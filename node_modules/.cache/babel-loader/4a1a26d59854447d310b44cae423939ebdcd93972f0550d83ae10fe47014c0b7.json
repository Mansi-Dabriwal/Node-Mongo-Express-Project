{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { findDOMNode } from \"react-dom\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { AbstractPureComponent2, Classes, Keys } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { getActiveElement, isFunction } from \"../../common/utils\";\nimport { Portal } from \"../portal/portal\";\nvar Overlay = /** @class */function (_super) {\n  __extends(Overlay, _super);\n  function Overlay() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.isAutoFocusing = false;\n    _this.state = {\n      hasEverOpened: _this.props.isOpen\n    };\n    // an HTMLElement that contains the backdrop and any children, to query for focus target\n    _this.containerElement = null;\n    // An empty, keyboard-focusable div at the beginning of the Overlay content\n    _this.startFocusTrapElement = null;\n    // An empty, keyboard-focusable div at the end of the Overlay content\n    _this.endFocusTrapElement = null;\n    _this.refHandlers = {\n      // HACKHACK: see https://github.com/palantir/blueprint/issues/3979\n      /* eslint-disable-next-line react/no-find-dom-node */\n      container: function (ref) {\n        return _this.containerElement = findDOMNode(ref);\n      },\n      endFocusTrap: function (ref) {\n        return _this.endFocusTrapElement = ref;\n      },\n      startFocusTrap: function (ref) {\n        return _this.startFocusTrapElement = ref;\n      }\n    };\n    _this.maybeRenderChild = function (child) {\n      if (isFunction(child)) {\n        child = child();\n      }\n      if (child == null) {\n        return null;\n      }\n      // add a special class to each child element that will automatically set the appropriate\n      // CSS position mode under the hood.\n      var decoratedChild = typeof child === \"object\" ? React.cloneElement(child, {\n        className: classNames(child.props.className, Classes.OVERLAY_CONTENT)\n      }) : React.createElement(\"span\", {\n        className: Classes.OVERLAY_CONTENT\n      }, child);\n      var _a = _this.props,\n        onOpening = _a.onOpening,\n        onOpened = _a.onOpened,\n        onClosing = _a.onClosing,\n        transitionDuration = _a.transitionDuration,\n        transitionName = _a.transitionName;\n      return React.createElement(CSSTransition, {\n        classNames: transitionName,\n        onEntering: onOpening,\n        onEntered: onOpened,\n        onExiting: onClosing,\n        onExited: _this.handleTransitionExited,\n        timeout: transitionDuration,\n        addEndListener: _this.handleTransitionAddEnd\n      }, decoratedChild);\n    };\n    /**\n     * Ensures repeatedly pressing shift+tab keeps focus inside the Overlay. Moves focus to\n     * the `endFocusTrapElement` or the first keyboard-focusable element in the Overlay (excluding\n     * the `startFocusTrapElement`), depending on whether the element losing focus is inside the\n     * Overlay.\n     */\n    _this.handleStartFocusTrapElementFocus = function (e) {\n      var _a;\n      if (!_this.props.enforceFocus || _this.isAutoFocusing) {\n        return;\n      }\n      // e.relatedTarget will not be defined if this was a programmatic focus event, as is the\n      // case when we call this.bringFocusInsideOverlay() after a user clicked on the backdrop.\n      // Otherwise, we're handling a user interaction, and we should wrap around to the last\n      // element in this transition group.\n      if (e.relatedTarget != null && _this.containerElement.contains(e.relatedTarget) && e.relatedTarget !== _this.endFocusTrapElement) {\n        (_a = _this.endFocusTrapElement) === null || _a === void 0 ? void 0 : _a.focus({\n          preventScroll: true\n        });\n      }\n    };\n    /**\n     * Wrap around to the end of the dialog if `enforceFocus` is enabled.\n     */\n    _this.handleStartFocusTrapElementKeyDown = function (e) {\n      var _a;\n      if (!_this.props.enforceFocus) {\n        return;\n      }\n      // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n      /* eslint-disable-next-line deprecation/deprecation */\n      if (e.shiftKey && e.which === Keys.TAB) {\n        var lastFocusableElement = _this.getKeyboardFocusableElements().pop();\n        if (lastFocusableElement != null) {\n          lastFocusableElement.focus();\n        } else {\n          (_a = _this.endFocusTrapElement) === null || _a === void 0 ? void 0 : _a.focus({\n            preventScroll: true\n          });\n        }\n      }\n    };\n    /**\n     * Ensures repeatedly pressing tab keeps focus inside the Overlay. Moves focus to the\n     * `startFocusTrapElement` or the last keyboard-focusable element in the Overlay (excluding the\n     * `startFocusTrapElement`), depending on whether the element losing focus is inside the\n     * Overlay.\n     */\n    _this.handleEndFocusTrapElementFocus = function (e) {\n      var _a, _b;\n      // No need for this.props.enforceFocus check here because this element is only rendered\n      // when that prop is true.\n      // During user interactions, e.relatedTarget will be defined, and we should wrap around to the\n      // \"start focus trap\" element.\n      // Otherwise, we're handling a programmatic focus event, which can only happen after a user\n      // presses shift+tab from the first focusable element in the overlay.\n      if (e.relatedTarget != null && _this.containerElement.contains(e.relatedTarget) && e.relatedTarget !== _this.startFocusTrapElement) {\n        var firstFocusableElement = _this.getKeyboardFocusableElements().shift();\n        // ensure we don't re-focus an already active element by comparing against e.relatedTarget\n        if (!_this.isAutoFocusing && firstFocusableElement != null && firstFocusableElement !== e.relatedTarget) {\n          firstFocusableElement.focus();\n        } else {\n          (_a = _this.startFocusTrapElement) === null || _a === void 0 ? void 0 : _a.focus({\n            preventScroll: true\n          });\n        }\n      } else {\n        var lastFocusableElement = _this.getKeyboardFocusableElements().pop();\n        if (lastFocusableElement != null) {\n          lastFocusableElement.focus();\n        } else {\n          // Keeps focus within Overlay even if there are no keyboard-focusable children\n          (_b = _this.startFocusTrapElement) === null || _b === void 0 ? void 0 : _b.focus({\n            preventScroll: true\n          });\n        }\n      }\n    };\n    _this.handleTransitionExited = function (node) {\n      var _a, _b;\n      if (_this.props.shouldReturnFocusOnClose && _this.lastActiveElementBeforeOpened instanceof HTMLElement) {\n        _this.lastActiveElementBeforeOpened.focus();\n      }\n      (_b = (_a = _this.props).onClosed) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n    };\n    _this.handleBackdropMouseDown = function (e) {\n      var _a;\n      var _b = _this.props,\n        backdropProps = _b.backdropProps,\n        canOutsideClickClose = _b.canOutsideClickClose,\n        enforceFocus = _b.enforceFocus,\n        onClose = _b.onClose;\n      if (canOutsideClickClose) {\n        onClose === null || onClose === void 0 ? void 0 : onClose(e);\n      }\n      if (enforceFocus) {\n        _this.bringFocusInsideOverlay();\n      }\n      (_a = backdropProps === null || backdropProps === void 0 ? void 0 : backdropProps.onMouseDown) === null || _a === void 0 ? void 0 : _a.call(backdropProps, e);\n    };\n    _this.handleDocumentClick = function (e) {\n      var _a = _this.props,\n        canOutsideClickClose = _a.canOutsideClickClose,\n        isOpen = _a.isOpen,\n        onClose = _a.onClose;\n      // get the actual target even in the Shadow DOM\n      var eventTarget = e.composed ? e.composedPath()[0] : e.target;\n      var stackIndex = Overlay.openStack.indexOf(_this);\n      var isClickInThisOverlayOrDescendant = Overlay.openStack.slice(stackIndex).some(function (_a) {\n        var elem = _a.containerElement;\n        // `elem` is the container of backdrop & content, so clicking on that container\n        // should not count as being \"inside\" the overlay.\n        return elem && elem.contains(eventTarget) && !elem.isSameNode(eventTarget);\n      });\n      if (isOpen && !isClickInThisOverlayOrDescendant && canOutsideClickClose) {\n        // casting to any because this is a native event\n        onClose === null || onClose === void 0 ? void 0 : onClose(e);\n      }\n    };\n    /**\n     * When multiple Overlays are open, this event handler is only active for the most recently\n     * opened one to avoid Overlays competing with each other for focus.\n     */\n    _this.handleDocumentFocus = function (e) {\n      // get the actual target even in the Shadow DOM\n      var eventTarget = e.composed ? e.composedPath()[0] : e.target;\n      if (_this.props.enforceFocus && _this.containerElement != null && eventTarget instanceof Node && !_this.containerElement.contains(eventTarget)) {\n        // prevent default focus behavior (sometimes auto-scrolls the page)\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        _this.bringFocusInsideOverlay();\n      }\n    };\n    _this.handleKeyDown = function (e) {\n      var _a = _this.props,\n        canEscapeKeyClose = _a.canEscapeKeyClose,\n        onClose = _a.onClose;\n      if (e.key === \"Escape\" && canEscapeKeyClose) {\n        onClose === null || onClose === void 0 ? void 0 : onClose(e);\n        // prevent other overlays from closing\n        e.stopPropagation();\n        // prevent browser-specific escape key behavior (Safari exits fullscreen)\n        e.preventDefault();\n      }\n    };\n    _this.handleTransitionAddEnd = function () {\n      // no-op\n    };\n    return _this;\n  }\n  Overlay.getDerivedStateFromProps = function (_a) {\n    var hasEverOpened = _a.isOpen;\n    if (hasEverOpened) {\n      return {\n        hasEverOpened: hasEverOpened\n      };\n    }\n    return null;\n  };\n  Overlay.prototype.render = function () {\n    var _a;\n    var _b;\n    // oh snap! no reason to render anything at all if we're being truly lazy\n    if (this.props.lazy && !this.state.hasEverOpened) {\n      return null;\n    }\n    var _c = this.props,\n      autoFocus = _c.autoFocus,\n      children = _c.children,\n      className = _c.className,\n      enforceFocus = _c.enforceFocus,\n      usePortal = _c.usePortal,\n      isOpen = _c.isOpen;\n    // TransitionGroup types require single array of children; does not support nested arrays.\n    // So we must collapse backdrop and children into one array, and every item must be wrapped in a\n    // Transition element (no ReactText allowed).\n    var childrenWithTransitions = isOpen ? (_b = React.Children.map(children, this.maybeRenderChild)) !== null && _b !== void 0 ? _b : [] : [];\n    var maybeBackdrop = this.maybeRenderBackdrop();\n    if (maybeBackdrop !== null) {\n      childrenWithTransitions.unshift(maybeBackdrop);\n    }\n    if (isOpen && (autoFocus || enforceFocus) && childrenWithTransitions.length > 0) {\n      childrenWithTransitions.unshift(this.renderDummyElement(\"__start\", {\n        className: Classes.OVERLAY_START_FOCUS_TRAP,\n        onFocus: this.handleStartFocusTrapElementFocus,\n        onKeyDown: this.handleStartFocusTrapElementKeyDown,\n        ref: this.refHandlers.startFocusTrap\n      }));\n      if (enforceFocus) {\n        childrenWithTransitions.push(this.renderDummyElement(\"__end\", {\n          className: Classes.OVERLAY_END_FOCUS_TRAP,\n          onFocus: this.handleEndFocusTrapElementFocus,\n          ref: this.refHandlers.endFocusTrap\n        }));\n      }\n    }\n    var containerClasses = classNames(Classes.OVERLAY, (_a = {}, _a[Classes.OVERLAY_OPEN] = isOpen, _a[Classes.OVERLAY_INLINE] = !usePortal, _a), className);\n    var transitionGroup = React.createElement(TransitionGroup, {\n      appear: true,\n      \"aria-live\": \"polite\",\n      className: containerClasses,\n      component: \"div\",\n      onKeyDown: this.handleKeyDown,\n      ref: this.refHandlers.container\n    }, childrenWithTransitions);\n    if (usePortal) {\n      return React.createElement(Portal, {\n        className: this.props.portalClassName,\n        container: this.props.portalContainer\n      }, transitionGroup);\n    } else {\n      return transitionGroup;\n    }\n  };\n  Overlay.prototype.componentDidMount = function () {\n    if (this.props.isOpen) {\n      this.overlayWillOpen();\n    }\n  };\n  Overlay.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.isOpen && !this.props.isOpen) {\n      this.overlayWillClose();\n    } else if (!prevProps.isOpen && this.props.isOpen) {\n      this.overlayWillOpen();\n    }\n  };\n  Overlay.prototype.componentWillUnmount = function () {\n    this.overlayWillClose();\n  };\n  /**\n   * @public for testing\n   * @internal\n   */\n  Overlay.prototype.bringFocusInsideOverlay = function () {\n    var _this = this;\n    // always delay focus manipulation to just before repaint to prevent scroll jumping\n    return this.requestAnimationFrame(function () {\n      var _a;\n      // container ref may be undefined between component mounting and Portal rendering\n      // activeElement may be undefined in some rare cases in IE\n      var activeElement = getActiveElement(_this.containerElement);\n      if (_this.containerElement == null || activeElement == null || !_this.props.isOpen) {\n        return;\n      }\n      var isFocusOutsideModal = !_this.containerElement.contains(activeElement);\n      if (isFocusOutsideModal) {\n        (_a = _this.startFocusTrapElement) === null || _a === void 0 ? void 0 : _a.focus({\n          preventScroll: true\n        });\n        _this.isAutoFocusing = false;\n      }\n    });\n  };\n  Overlay.prototype.maybeRenderBackdrop = function () {\n    var _a = this.props,\n      backdropClassName = _a.backdropClassName,\n      backdropProps = _a.backdropProps,\n      hasBackdrop = _a.hasBackdrop,\n      isOpen = _a.isOpen,\n      transitionDuration = _a.transitionDuration,\n      transitionName = _a.transitionName;\n    if (hasBackdrop && isOpen) {\n      return React.createElement(CSSTransition, {\n        classNames: transitionName,\n        key: \"__backdrop\",\n        timeout: transitionDuration,\n        addEndListener: this.handleTransitionAddEnd\n      }, React.createElement(\"div\", __assign({}, backdropProps, {\n        className: classNames(Classes.OVERLAY_BACKDROP, backdropClassName, backdropProps === null || backdropProps === void 0 ? void 0 : backdropProps.className),\n        onMouseDown: this.handleBackdropMouseDown\n      })));\n    } else {\n      return null;\n    }\n  };\n  Overlay.prototype.renderDummyElement = function (key, props) {\n    var _a = this.props,\n      transitionDuration = _a.transitionDuration,\n      transitionName = _a.transitionName;\n    return React.createElement(CSSTransition, {\n      classNames: transitionName,\n      key: key,\n      addEndListener: this.handleTransitionAddEnd,\n      timeout: transitionDuration,\n      unmountOnExit: true\n    }, React.createElement(\"div\", __assign({\n      tabIndex: 0\n    }, props)));\n  };\n  Overlay.prototype.getKeyboardFocusableElements = function () {\n    var focusableElements = this.containerElement !== null ? Array.from(\n    // Order may not be correct if children elements use tabindex values > 0.\n    // Selectors derived from this SO question:\n    // https://stackoverflow.com/questions/1599660/which-html-elements-can-receive-focus\n    this.containerElement.querySelectorAll(['a[href]:not([tabindex=\"-1\"])', 'button:not([disabled]):not([tabindex=\"-1\"])', 'details:not([tabindex=\"-1\"])', 'input:not([disabled]):not([tabindex=\"-1\"])', 'select:not([disabled]):not([tabindex=\"-1\"])', 'textarea:not([disabled]):not([tabindex=\"-1\"])', '[tabindex]:not([tabindex=\"-1\"])'].join(\",\"))) : [];\n    return focusableElements.filter(function (el) {\n      return !el.classList.contains(Classes.OVERLAY_START_FOCUS_TRAP) && !el.classList.contains(Classes.OVERLAY_END_FOCUS_TRAP);\n    });\n  };\n  Overlay.prototype.overlayWillClose = function () {\n    document.removeEventListener(\"focus\", this.handleDocumentFocus, /* useCapture */true);\n    document.removeEventListener(\"mousedown\", this.handleDocumentClick);\n    var openStack = Overlay.openStack;\n    var stackIndex = openStack.indexOf(this);\n    if (stackIndex !== -1) {\n      openStack.splice(stackIndex, 1);\n      if (openStack.length > 0) {\n        var lastOpenedOverlay = Overlay.getLastOpened();\n        // Only bring focus back to last overlay if it had autoFocus _and_ enforceFocus enabled.\n        // If `autoFocus={false}`, it's likely that the overlay never received focus in the first place,\n        // so it would be surprising for us to send it there. See https://github.com/palantir/blueprint/issues/4921\n        if (lastOpenedOverlay.props.autoFocus && lastOpenedOverlay.props.enforceFocus) {\n          lastOpenedOverlay.bringFocusInsideOverlay();\n          document.addEventListener(\"focus\", lastOpenedOverlay.handleDocumentFocus, /* useCapture */true);\n        }\n      }\n      if (openStack.filter(function (o) {\n        return o.props.usePortal && o.props.hasBackdrop;\n      }).length === 0) {\n        document.body.classList.remove(Classes.OVERLAY_OPEN);\n      }\n    }\n  };\n  Overlay.prototype.overlayWillOpen = function () {\n    var getLastOpened = Overlay.getLastOpened,\n      openStack = Overlay.openStack;\n    if (openStack.length > 0) {\n      document.removeEventListener(\"focus\", getLastOpened().handleDocumentFocus, /* useCapture */true);\n    }\n    openStack.push(this);\n    if (this.props.autoFocus) {\n      this.isAutoFocusing = true;\n      this.bringFocusInsideOverlay();\n    }\n    if (this.props.enforceFocus) {\n      // Focus events do not bubble, but setting useCapture allows us to listen in and execute\n      // our handler before all others\n      document.addEventListener(\"focus\", this.handleDocumentFocus, /* useCapture */true);\n    }\n    if (this.props.canOutsideClickClose && !this.props.hasBackdrop) {\n      document.addEventListener(\"mousedown\", this.handleDocumentClick);\n    }\n    if (this.props.hasBackdrop && this.props.usePortal) {\n      // add a class to the body to prevent scrolling of content below the overlay\n      document.body.classList.add(Classes.OVERLAY_OPEN);\n    }\n    this.lastActiveElementBeforeOpened = getActiveElement(this.containerElement);\n  };\n  Overlay.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Overlay\");\n  Overlay.defaultProps = {\n    autoFocus: true,\n    backdropProps: {},\n    canEscapeKeyClose: true,\n    canOutsideClickClose: true,\n    enforceFocus: true,\n    hasBackdrop: true,\n    isOpen: false,\n    lazy: true,\n    shouldReturnFocusOnClose: true,\n    transitionDuration: 300,\n    transitionName: Classes.OVERLAY,\n    usePortal: true\n  };\n  Overlay.openStack = [];\n  Overlay.getLastOpened = function () {\n    return Overlay.openStack[Overlay.openStack.length - 1];\n  };\n  return Overlay;\n}(AbstractPureComponent2);\nexport { Overlay };","map":{"version":3,"mappings":"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","names":["classNames","React","findDOMNode","CSSTransition","TransitionGroup","AbstractPureComponent2","Classes","Keys","DISPLAYNAME_PREFIX","getActiveElement","isFunction","Portal","__extends","_this","hasEverOpened","props","isOpen","container","ref","containerElement","endFocusTrap","endFocusTrapElement","startFocusTrap","startFocusTrapElement","child","decoratedChild","cloneElement","className","OVERLAY_CONTENT","onOpening","onOpened","onClosing","transitionDuration","transitionName","onEntering","onEntered","onExiting","onExited","handleTransitionExited","timeout","addEndListener","handleTransitionAddEnd","e","enforceFocus","isAutoFocusing","relatedTarget","contains","focus","preventScroll","shiftKey","which","TAB","lastFocusableElement","getKeyboardFocusableElements","pop","firstFocusableElement","shift","node","shouldReturnFocusOnClose","lastActiveElementBeforeOpened","HTMLElement","onClosed","backdropProps","canOutsideClickClose","onClose","bringFocusInsideOverlay","onMouseDown","eventTarget","composed","composedPath","target","stackIndex","Overlay","openStack","indexOf","isClickInThisOverlayOrDescendant","slice","some","_a","elem","isSameNode","Node","preventDefault","stopImmediatePropagation","canEscapeKeyClose","key","stopPropagation","lazy","state","autoFocus","children","usePortal","childrenWithTransitions","Children","map","maybeRenderChild","maybeBackdrop","maybeRenderBackdrop","unshift","length","renderDummyElement","OVERLAY_START_FOCUS_TRAP","onFocus","handleStartFocusTrapElementFocus","onKeyDown","handleStartFocusTrapElementKeyDown","refHandlers","push","OVERLAY_END_FOCUS_TRAP","handleEndFocusTrapElementFocus","containerClasses","OVERLAY","OVERLAY_OPEN","OVERLAY_INLINE","transitionGroup","appear","component","handleKeyDown","portalClassName","portalContainer","overlayWillOpen","prevProps","overlayWillClose","requestAnimationFrame","activeElement","isFocusOutsideModal","backdropClassName","hasBackdrop","OVERLAY_BACKDROP","handleBackdropMouseDown","unmountOnExit","tabIndex","focusableElements","Array","from","querySelectorAll","join","filter","el","classList","document","removeEventListener","handleDocumentFocus","handleDocumentClick","splice","lastOpenedOverlay","getLastOpened","addEventListener","o","body","remove","add"],"sources":["/Users/mansidabriwal/Documents/Web design class/React-Assignment/react-app/node_modules/@blueprintjs/core/src/components/overlay/overlay.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { findDOMNode } from \"react-dom\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport { AbstractPureComponent2, Classes, Keys } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, HTMLDivProps, Props } from \"../../common/props\";\nimport { getActiveElement, isFunction } from \"../../common/utils\";\nimport { Portal } from \"../portal/portal\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type OverlayableProps = IOverlayableProps;\n/** @deprecated use OverlayableProps */\nexport interface IOverlayableProps extends IOverlayLifecycleProps {\n    /**\n     * Whether the overlay should acquire application focus when it first opens.\n     *\n     * @default true\n     */\n    autoFocus?: boolean;\n\n    /**\n     * Whether pressing the `esc` key should invoke `onClose`.\n     *\n     * @default true\n     */\n    canEscapeKeyClose?: boolean;\n\n    /**\n     * Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\n     * to focus an element outside the overlay and this prop is enabled, then the overlay will\n     * immediately bring focus back to itself. If you are nesting overlay components, either disable\n     * this prop on the \"outermost\" overlays or mark the nested ones `usePortal={false}`.\n     *\n     * @default true\n     */\n    enforceFocus?: boolean;\n\n    /**\n     * If `true` and `usePortal={true}`, the `Portal` containing the children is created and attached\n     * to the DOM when the overlay is opened for the first time; otherwise this happens when the\n     * component mounts. Lazy mounting provides noticeable performance improvements if you have lots\n     * of overlays at once, such as on each row of a table.\n     *\n     * @default true\n     */\n    lazy?: boolean;\n\n    /**\n     * Whether the application should return focus to the last active element in the\n     * document after this overlay closes.\n     *\n     * @default true\n     */\n    shouldReturnFocusOnClose?: boolean;\n\n    /**\n     * Indicates how long (in milliseconds) the overlay's enter/leave transition takes.\n     * This is used by React `CSSTransition` to know when a transition completes and must match\n     * the duration of the animation in CSS. Only set this prop if you override Blueprint's default\n     * transitions with new transitions of a different length.\n     *\n     * @default 300\n     */\n    transitionDuration?: number;\n\n    /**\n     * Whether the overlay should be wrapped in a `Portal`, which renders its contents in a new\n     * element attached to `portalContainer` prop.\n     *\n     * This prop essentially determines which element is covered by the backdrop: if `false`,\n     * then only its parent is covered; otherwise, the entire page is covered (because the parent\n     * of the `Portal` is the `<body>` itself).\n     *\n     * Set this prop to `false` on nested overlays (such as `Dialog` or `Popover`) to ensure that they\n     * are rendered above their parents.\n     *\n     * @default true\n     */\n    usePortal?: boolean;\n\n    /**\n     * Space-delimited string of class names applied to the `Portal` element if\n     * `usePortal={true}`.\n     */\n    portalClassName?: string;\n\n    /**\n     * The container element into which the overlay renders its contents, when `usePortal` is `true`.\n     * This prop is ignored if `usePortal` is `false`.\n     *\n     * @default document.body\n     */\n    portalContainer?: HTMLElement;\n\n    /**\n     * A callback that is invoked when user interaction causes the overlay to close, such as\n     * clicking on the overlay or pressing the `esc` key (if enabled).\n     *\n     * Receives the event from the user's interaction, if there was an event (generally either a\n     * mouse or key event). Note that, since this component is controlled by the `isOpen` prop, it\n     * will not actually close itself until that prop becomes `false`.\n     */\n    onClose?: (event: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nexport type OverlayLifecycleProps = IOverlayLifecycleProps;\nexport interface IOverlayLifecycleProps {\n    /**\n     * Lifecycle method invoked just before the CSS _close_ transition begins on\n     * a child. Receives the DOM element of the child being closed.\n     */\n    onClosing?: (node: HTMLElement) => void;\n\n    /**\n     * Lifecycle method invoked just after the CSS _close_ transition ends but\n     * before the child has been removed from the DOM. Receives the DOM element\n     * of the child being closed.\n     */\n    onClosed?: (node: HTMLElement) => void;\n\n    /**\n     * Lifecycle method invoked just after mounting the child in the DOM but\n     * just before the CSS _open_ transition begins. Receives the DOM element of\n     * the child being opened.\n     */\n    onOpening?: (node: HTMLElement) => void;\n\n    /**\n     * Lifecycle method invoked just after the CSS _open_ transition ends.\n     * Receives the DOM element of the child being opened.\n     */\n    onOpened?: (node: HTMLElement) => void;\n}\n\nexport type BackdropProps = IBackdropProps;\nexport interface IBackdropProps {\n    /** CSS class names to apply to backdrop element. */\n    backdropClassName?: string;\n\n    /** HTML props for the backdrop element. */\n    backdropProps?: React.HTMLProps<HTMLDivElement>;\n\n    /**\n     * Whether clicking outside the overlay element (either on backdrop when present or on document)\n     * should invoke `onClose`.\n     *\n     * @default true\n     */\n    canOutsideClickClose?: boolean;\n\n    /**\n     * Whether a container-spanning backdrop element should be rendered behind the contents.\n     *\n     * @default true\n     */\n    hasBackdrop?: boolean;\n}\n\n// eslint-disable-next-line deprecation/deprecation\nexport type OverlayProps = IOverlayProps;\n/** @deprecated use OverlayProps */\nexport interface IOverlayProps extends OverlayableProps, IBackdropProps, Props {\n    /** Element to overlay. */\n    children?: React.ReactNode;\n\n    /**\n     * Toggles the visibility of the overlay and its children.\n     * This prop is required because the component is controlled.\n     */\n    isOpen: boolean;\n\n    /**\n     * Name of the transition for internal `CSSTransition`.\n     * Providing your own name here will require defining new CSS transition properties.\n     *\n     * @default Classes.OVERLAY\n     */\n    transitionName?: string;\n}\n\nexport interface IOverlayState {\n    hasEverOpened?: boolean;\n}\n\nexport class Overlay extends AbstractPureComponent2<OverlayProps, IOverlayState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Overlay`;\n\n    public static defaultProps: OverlayProps = {\n        autoFocus: true,\n        backdropProps: {},\n        canEscapeKeyClose: true,\n        canOutsideClickClose: true,\n        enforceFocus: true,\n        hasBackdrop: true,\n        isOpen: false,\n        lazy: true,\n        shouldReturnFocusOnClose: true,\n        transitionDuration: 300,\n        transitionName: Classes.OVERLAY,\n        usePortal: true,\n    };\n\n    public static getDerivedStateFromProps({ isOpen: hasEverOpened }: OverlayProps) {\n        if (hasEverOpened) {\n            return { hasEverOpened };\n        }\n        return null;\n    }\n\n    private static openStack: Overlay[] = [];\n\n    private static getLastOpened = () => Overlay.openStack[Overlay.openStack.length - 1];\n\n    private isAutoFocusing = false;\n\n    private lastActiveElementBeforeOpened: Element | null | undefined;\n\n    public state: IOverlayState = {\n        hasEverOpened: this.props.isOpen,\n    };\n\n    // an HTMLElement that contains the backdrop and any children, to query for focus target\n    public containerElement: HTMLElement | null = null;\n\n    // An empty, keyboard-focusable div at the beginning of the Overlay content\n    private startFocusTrapElement: HTMLDivElement | null = null;\n\n    // An empty, keyboard-focusable div at the end of the Overlay content\n    private endFocusTrapElement: HTMLDivElement | null = null;\n\n    private refHandlers = {\n        // HACKHACK: see https://github.com/palantir/blueprint/issues/3979\n        /* eslint-disable-next-line react/no-find-dom-node */\n        container: (ref: TransitionGroup | null) => (this.containerElement = findDOMNode(ref) as HTMLElement),\n        endFocusTrap: (ref: HTMLDivElement | null) => (this.endFocusTrapElement = ref),\n        startFocusTrap: (ref: HTMLDivElement | null) => (this.startFocusTrapElement = ref),\n    };\n\n    public render() {\n        // oh snap! no reason to render anything at all if we're being truly lazy\n        if (this.props.lazy && !this.state.hasEverOpened) {\n            return null;\n        }\n\n        const { autoFocus, children, className, enforceFocus, usePortal, isOpen } = this.props;\n\n        // TransitionGroup types require single array of children; does not support nested arrays.\n        // So we must collapse backdrop and children into one array, and every item must be wrapped in a\n        // Transition element (no ReactText allowed).\n        const childrenWithTransitions = isOpen ? React.Children.map(children, this.maybeRenderChild) ?? [] : [];\n\n        const maybeBackdrop = this.maybeRenderBackdrop();\n        if (maybeBackdrop !== null) {\n            childrenWithTransitions.unshift(maybeBackdrop);\n        }\n        if (isOpen && (autoFocus || enforceFocus) && childrenWithTransitions.length > 0) {\n            childrenWithTransitions.unshift(\n                this.renderDummyElement(\"__start\", {\n                    className: Classes.OVERLAY_START_FOCUS_TRAP,\n                    onFocus: this.handleStartFocusTrapElementFocus,\n                    onKeyDown: this.handleStartFocusTrapElementKeyDown,\n                    ref: this.refHandlers.startFocusTrap,\n                }),\n            );\n            if (enforceFocus) {\n                childrenWithTransitions.push(\n                    this.renderDummyElement(\"__end\", {\n                        className: Classes.OVERLAY_END_FOCUS_TRAP,\n                        onFocus: this.handleEndFocusTrapElementFocus,\n                        ref: this.refHandlers.endFocusTrap,\n                    }),\n                );\n            }\n        }\n\n        const containerClasses = classNames(\n            Classes.OVERLAY,\n            {\n                [Classes.OVERLAY_OPEN]: isOpen,\n                [Classes.OVERLAY_INLINE]: !usePortal,\n            },\n            className,\n        );\n\n        const transitionGroup = (\n            <TransitionGroup\n                appear={true}\n                aria-live=\"polite\"\n                className={containerClasses}\n                component=\"div\"\n                onKeyDown={this.handleKeyDown}\n                ref={this.refHandlers.container}\n            >\n                {childrenWithTransitions}\n            </TransitionGroup>\n        );\n        if (usePortal) {\n            return (\n                <Portal className={this.props.portalClassName} container={this.props.portalContainer}>\n                    {transitionGroup}\n                </Portal>\n            );\n        } else {\n            return transitionGroup;\n        }\n    }\n\n    public componentDidMount() {\n        if (this.props.isOpen) {\n            this.overlayWillOpen();\n        }\n    }\n\n    public componentDidUpdate(prevProps: OverlayProps) {\n        if (prevProps.isOpen && !this.props.isOpen) {\n            this.overlayWillClose();\n        } else if (!prevProps.isOpen && this.props.isOpen) {\n            this.overlayWillOpen();\n        }\n    }\n\n    public componentWillUnmount() {\n        this.overlayWillClose();\n    }\n\n    /**\n     * @public for testing\n     * @internal\n     */\n    public bringFocusInsideOverlay() {\n        // always delay focus manipulation to just before repaint to prevent scroll jumping\n        return this.requestAnimationFrame(() => {\n            // container ref may be undefined between component mounting and Portal rendering\n            // activeElement may be undefined in some rare cases in IE\n            const activeElement = getActiveElement(this.containerElement);\n\n            if (this.containerElement == null || activeElement == null || !this.props.isOpen) {\n                return;\n            }\n\n            const isFocusOutsideModal = !this.containerElement.contains(activeElement);\n            if (isFocusOutsideModal) {\n                this.startFocusTrapElement?.focus({ preventScroll: true });\n                this.isAutoFocusing = false;\n            }\n        });\n    }\n\n    private maybeRenderChild = (child?: React.ReactNode) => {\n        if (isFunction(child)) {\n            child = child();\n        }\n\n        if (child == null) {\n            return null;\n        }\n\n        // add a special class to each child element that will automatically set the appropriate\n        // CSS position mode under the hood.\n        const decoratedChild =\n            typeof child === \"object\" ? (\n                React.cloneElement(child as React.ReactElement, {\n                    className: classNames((child as React.ReactElement).props.className, Classes.OVERLAY_CONTENT),\n                })\n            ) : (\n                <span className={Classes.OVERLAY_CONTENT}>{child}</span>\n            );\n        const { onOpening, onOpened, onClosing, transitionDuration, transitionName } = this.props;\n\n        return (\n            <CSSTransition\n                classNames={transitionName}\n                onEntering={onOpening}\n                onEntered={onOpened}\n                onExiting={onClosing}\n                onExited={this.handleTransitionExited}\n                timeout={transitionDuration}\n                addEndListener={this.handleTransitionAddEnd}\n            >\n                {decoratedChild}\n            </CSSTransition>\n        );\n    };\n\n    private maybeRenderBackdrop() {\n        const { backdropClassName, backdropProps, hasBackdrop, isOpen, transitionDuration, transitionName } =\n            this.props;\n\n        if (hasBackdrop && isOpen) {\n            return (\n                <CSSTransition\n                    classNames={transitionName}\n                    key=\"__backdrop\"\n                    timeout={transitionDuration}\n                    addEndListener={this.handleTransitionAddEnd}\n                >\n                    <div\n                        {...backdropProps}\n                        className={classNames(Classes.OVERLAY_BACKDROP, backdropClassName, backdropProps?.className)}\n                        onMouseDown={this.handleBackdropMouseDown}\n                    />\n                </CSSTransition>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    private renderDummyElement(key: string, props: HTMLDivProps & { ref?: React.Ref<HTMLDivElement> }) {\n        const { transitionDuration, transitionName } = this.props;\n        return (\n            <CSSTransition\n                classNames={transitionName}\n                key={key}\n                addEndListener={this.handleTransitionAddEnd}\n                timeout={transitionDuration}\n                unmountOnExit={true}\n            >\n                <div tabIndex={0} {...props} />\n            </CSSTransition>\n        );\n    }\n\n    /**\n     * Ensures repeatedly pressing shift+tab keeps focus inside the Overlay. Moves focus to\n     * the `endFocusTrapElement` or the first keyboard-focusable element in the Overlay (excluding\n     * the `startFocusTrapElement`), depending on whether the element losing focus is inside the\n     * Overlay.\n     */\n    private handleStartFocusTrapElementFocus = (e: React.FocusEvent<HTMLDivElement>) => {\n        if (!this.props.enforceFocus || this.isAutoFocusing) {\n            return;\n        }\n        // e.relatedTarget will not be defined if this was a programmatic focus event, as is the\n        // case when we call this.bringFocusInsideOverlay() after a user clicked on the backdrop.\n        // Otherwise, we're handling a user interaction, and we should wrap around to the last\n        // element in this transition group.\n        if (\n            e.relatedTarget != null &&\n            this.containerElement!.contains(e.relatedTarget as Element) &&\n            e.relatedTarget !== this.endFocusTrapElement\n        ) {\n            this.endFocusTrapElement?.focus({ preventScroll: true });\n        }\n    };\n\n    /**\n     * Wrap around to the end of the dialog if `enforceFocus` is enabled.\n     */\n    private handleStartFocusTrapElementKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (!this.props.enforceFocus) {\n            return;\n        }\n        // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n        /* eslint-disable-next-line deprecation/deprecation */\n        if (e.shiftKey && e.which === Keys.TAB) {\n            const lastFocusableElement = this.getKeyboardFocusableElements().pop();\n            if (lastFocusableElement != null) {\n                lastFocusableElement.focus();\n            } else {\n                this.endFocusTrapElement?.focus({ preventScroll: true });\n            }\n        }\n    };\n\n    /**\n     * Ensures repeatedly pressing tab keeps focus inside the Overlay. Moves focus to the\n     * `startFocusTrapElement` or the last keyboard-focusable element in the Overlay (excluding the\n     * `startFocusTrapElement`), depending on whether the element losing focus is inside the\n     * Overlay.\n     */\n    private handleEndFocusTrapElementFocus = (e: React.FocusEvent<HTMLDivElement>) => {\n        // No need for this.props.enforceFocus check here because this element is only rendered\n        // when that prop is true.\n        // During user interactions, e.relatedTarget will be defined, and we should wrap around to the\n        // \"start focus trap\" element.\n        // Otherwise, we're handling a programmatic focus event, which can only happen after a user\n        // presses shift+tab from the first focusable element in the overlay.\n        if (\n            e.relatedTarget != null &&\n            this.containerElement!.contains(e.relatedTarget as Element) &&\n            e.relatedTarget !== this.startFocusTrapElement\n        ) {\n            const firstFocusableElement = this.getKeyboardFocusableElements().shift();\n            // ensure we don't re-focus an already active element by comparing against e.relatedTarget\n            if (!this.isAutoFocusing && firstFocusableElement != null && firstFocusableElement !== e.relatedTarget) {\n                firstFocusableElement.focus();\n            } else {\n                this.startFocusTrapElement?.focus({ preventScroll: true });\n            }\n        } else {\n            const lastFocusableElement = this.getKeyboardFocusableElements().pop();\n            if (lastFocusableElement != null) {\n                lastFocusableElement.focus();\n            } else {\n                // Keeps focus within Overlay even if there are no keyboard-focusable children\n                this.startFocusTrapElement?.focus({ preventScroll: true });\n            }\n        }\n    };\n\n    private getKeyboardFocusableElements() {\n        const focusableElements: HTMLElement[] =\n            this.containerElement !== null\n                ? Array.from(\n                      // Order may not be correct if children elements use tabindex values > 0.\n                      // Selectors derived from this SO question:\n                      // https://stackoverflow.com/questions/1599660/which-html-elements-can-receive-focus\n                      this.containerElement.querySelectorAll(\n                          [\n                              'a[href]:not([tabindex=\"-1\"])',\n                              'button:not([disabled]):not([tabindex=\"-1\"])',\n                              'details:not([tabindex=\"-1\"])',\n                              'input:not([disabled]):not([tabindex=\"-1\"])',\n                              'select:not([disabled]):not([tabindex=\"-1\"])',\n                              'textarea:not([disabled]):not([tabindex=\"-1\"])',\n                              '[tabindex]:not([tabindex=\"-1\"])',\n                          ].join(\",\"),\n                      ),\n                  )\n                : [];\n\n        return focusableElements.filter(\n            el =>\n                !el.classList.contains(Classes.OVERLAY_START_FOCUS_TRAP) &&\n                !el.classList.contains(Classes.OVERLAY_END_FOCUS_TRAP),\n        );\n    }\n\n    private overlayWillClose() {\n        document.removeEventListener(\"focus\", this.handleDocumentFocus, /* useCapture */ true);\n        document.removeEventListener(\"mousedown\", this.handleDocumentClick);\n\n        const { openStack } = Overlay;\n        const stackIndex = openStack.indexOf(this);\n        if (stackIndex !== -1) {\n            openStack.splice(stackIndex, 1);\n            if (openStack.length > 0) {\n                const lastOpenedOverlay = Overlay.getLastOpened();\n                // Only bring focus back to last overlay if it had autoFocus _and_ enforceFocus enabled.\n                // If `autoFocus={false}`, it's likely that the overlay never received focus in the first place,\n                // so it would be surprising for us to send it there. See https://github.com/palantir/blueprint/issues/4921\n                if (lastOpenedOverlay.props.autoFocus && lastOpenedOverlay.props.enforceFocus) {\n                    lastOpenedOverlay.bringFocusInsideOverlay();\n                    document.addEventListener(\"focus\", lastOpenedOverlay.handleDocumentFocus, /* useCapture */ true);\n                }\n            }\n\n            if (openStack.filter(o => o.props.usePortal && o.props.hasBackdrop).length === 0) {\n                document.body.classList.remove(Classes.OVERLAY_OPEN);\n            }\n        }\n    }\n\n    private overlayWillOpen() {\n        const { getLastOpened, openStack } = Overlay;\n        if (openStack.length > 0) {\n            document.removeEventListener(\"focus\", getLastOpened().handleDocumentFocus, /* useCapture */ true);\n        }\n        openStack.push(this);\n\n        if (this.props.autoFocus) {\n            this.isAutoFocusing = true;\n            this.bringFocusInsideOverlay();\n        }\n\n        if (this.props.enforceFocus) {\n            // Focus events do not bubble, but setting useCapture allows us to listen in and execute\n            // our handler before all others\n            document.addEventListener(\"focus\", this.handleDocumentFocus, /* useCapture */ true);\n        }\n\n        if (this.props.canOutsideClickClose && !this.props.hasBackdrop) {\n            document.addEventListener(\"mousedown\", this.handleDocumentClick);\n        }\n\n        if (this.props.hasBackdrop && this.props.usePortal) {\n            // add a class to the body to prevent scrolling of content below the overlay\n            document.body.classList.add(Classes.OVERLAY_OPEN);\n        }\n\n        this.lastActiveElementBeforeOpened = getActiveElement(this.containerElement);\n    }\n\n    private handleTransitionExited = (node: HTMLElement) => {\n        if (this.props.shouldReturnFocusOnClose && this.lastActiveElementBeforeOpened instanceof HTMLElement) {\n            this.lastActiveElementBeforeOpened.focus();\n        }\n        this.props.onClosed?.(node);\n    };\n\n    private handleBackdropMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n        const { backdropProps, canOutsideClickClose, enforceFocus, onClose } = this.props;\n        if (canOutsideClickClose) {\n            onClose?.(e);\n        }\n        if (enforceFocus) {\n            this.bringFocusInsideOverlay();\n        }\n        backdropProps?.onMouseDown?.(e);\n    };\n\n    private handleDocumentClick = (e: MouseEvent) => {\n        const { canOutsideClickClose, isOpen, onClose } = this.props;\n        // get the actual target even in the Shadow DOM\n        const eventTarget = (e.composed ? e.composedPath()[0] : e.target) as HTMLElement;\n\n        const stackIndex = Overlay.openStack.indexOf(this);\n        const isClickInThisOverlayOrDescendant = Overlay.openStack\n            .slice(stackIndex)\n            .some(({ containerElement: elem }) => {\n                // `elem` is the container of backdrop & content, so clicking on that container\n                // should not count as being \"inside\" the overlay.\n                return elem && elem.contains(eventTarget) && !elem.isSameNode(eventTarget);\n            });\n\n        if (isOpen && !isClickInThisOverlayOrDescendant && canOutsideClickClose) {\n            // casting to any because this is a native event\n            onClose?.(e as any);\n        }\n    };\n\n    /**\n     * When multiple Overlays are open, this event handler is only active for the most recently\n     * opened one to avoid Overlays competing with each other for focus.\n     */\n    private handleDocumentFocus = (e: FocusEvent) => {\n        // get the actual target even in the Shadow DOM\n        const eventTarget = e.composed ? e.composedPath()[0] : e.target;\n        if (\n            this.props.enforceFocus &&\n            this.containerElement != null &&\n            eventTarget instanceof Node &&\n            !this.containerElement.contains(eventTarget as HTMLElement)\n        ) {\n            // prevent default focus behavior (sometimes auto-scrolls the page)\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            this.bringFocusInsideOverlay();\n        }\n    };\n\n    private handleKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\n        const { canEscapeKeyClose, onClose } = this.props;\n        if (e.key === \"Escape\" && canEscapeKeyClose) {\n            onClose?.(e);\n            // prevent other overlays from closing\n            e.stopPropagation();\n            // prevent browser-specific escape key behavior (Safari exits fullscreen)\n            e.preventDefault();\n        }\n    };\n\n    private handleTransitionAddEnd = () => {\n        // no-op\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}