{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../../common/classes\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { isFunction } from \"../../common/utils\";\nimport { TreeNode } from \"./treeNode\";\n// eslint-disable-next-line @typescript-eslint/ban-types\nvar Tree = /** @class */function (_super) {\n  __extends(Tree, _super);\n  function Tree() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.nodeRefs = {};\n    _this.handleNodeCollapse = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeCollapse, node, e);\n    };\n    _this.handleNodeClick = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeClick, node, e);\n    };\n    _this.handleContentRef = function (node, element) {\n      if (element != null) {\n        _this.nodeRefs[node.props.id] = element;\n      } else {\n        // don't want our object to get bloated with old keys\n        delete _this.nodeRefs[node.props.id];\n      }\n    };\n    _this.handleNodeContextMenu = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeContextMenu, node, e);\n    };\n    _this.handleNodeDoubleClick = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeDoubleClick, node, e);\n    };\n    _this.handleNodeExpand = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeExpand, node, e);\n    };\n    _this.handleNodeMouseEnter = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeMouseEnter, node, e);\n    };\n    _this.handleNodeMouseLeave = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeMouseLeave, node, e);\n    };\n    return _this;\n  }\n  Tree.ofType = function () {\n    return Tree;\n  };\n  Tree.nodeFromPath = function (path, treeNodes) {\n    if (path.length === 1) {\n      return treeNodes[path[0]];\n    } else {\n      return Tree.nodeFromPath(path.slice(1), treeNodes[path[0]].childNodes);\n    }\n  };\n  Tree.prototype.render = function () {\n    return React.createElement(\"div\", {\n      className: classNames(Classes.TREE, this.props.className)\n    }, this.renderNodes(this.props.contents, [], Classes.TREE_ROOT));\n  };\n  /**\n   * Returns the underlying HTML element of the `Tree` node with an id of `nodeId`.\n   * This element does not contain the children of the node, only its label and controls.\n   * If the node is not currently mounted, `undefined` is returned.\n   */\n  Tree.prototype.getNodeContentElement = function (nodeId) {\n    return this.nodeRefs[nodeId];\n  };\n  Tree.prototype.renderNodes = function (treeNodes, currentPath, className) {\n    var _this = this;\n    if (treeNodes == null) {\n      return null;\n    }\n    var nodeItems = treeNodes.map(function (node, i) {\n      var elementPath = currentPath.concat(i);\n      return React.createElement(TreeNode, __assign({}, node, {\n        key: node.id,\n        contentRef: _this.handleContentRef,\n        depth: elementPath.length - 1,\n        onClick: _this.handleNodeClick,\n        onContextMenu: _this.handleNodeContextMenu,\n        onCollapse: _this.handleNodeCollapse,\n        onDoubleClick: _this.handleNodeDoubleClick,\n        onExpand: _this.handleNodeExpand,\n        onMouseEnter: _this.handleNodeMouseEnter,\n        onMouseLeave: _this.handleNodeMouseLeave,\n        path: elementPath\n      }), _this.renderNodes(node.childNodes, elementPath));\n    });\n    return React.createElement(\"ul\", {\n      className: classNames(Classes.TREE_NODE_LIST, className)\n    }, nodeItems);\n  };\n  Tree.prototype.handlerHelper = function (handlerFromProps, node, e) {\n    if (isFunction(handlerFromProps)) {\n      var nodeData = Tree.nodeFromPath(node.props.path, this.props.contents);\n      handlerFromProps(nodeData, node.props.path, e);\n    }\n  };\n  Tree.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Tree\");\n  return Tree;\n}(React.Component);\nexport { Tree };","map":{"version":3,"mappings":"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","names":["classNames","React","Classes","DISPLAYNAME_PREFIX","isFunction","TreeNode","__extends","_this","node","e","handlerHelper","props","onNodeCollapse","onNodeClick","element","nodeRefs","id","onNodeContextMenu","onNodeDoubleClick","onNodeExpand","onNodeMouseEnter","onNodeMouseLeave","Tree","path","treeNodes","length","nodeFromPath","slice","childNodes","className","TREE","renderNodes","contents","TREE_ROOT","nodeId","currentPath","nodeItems","map","i","elementPath","concat","key","contentRef","handleContentRef","depth","onClick","handleNodeClick","onContextMenu","handleNodeContextMenu","onCollapse","handleNodeCollapse","onDoubleClick","handleNodeDoubleClick","onExpand","handleNodeExpand","onMouseEnter","handleNodeMouseEnter","onMouseLeave","handleNodeMouseLeave","TREE_NODE_LIST","handlerFromProps","nodeData","Component"],"sources":["/Users/mansidabriwal/Documents/Web design class/React-Assignment/react-app/node_modules/@blueprintjs/core/src/components/tree/tree.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../../common/classes\";\nimport { DISPLAYNAME_PREFIX, Props } from \"../../common/props\";\nimport { isFunction } from \"../../common/utils\";\nimport { TreeNode, TreeNodeInfo } from \"./treeNode\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type TreeEventHandler<T = {}> = (\n    node: TreeNodeInfo<T>,\n    nodePath: number[],\n    e: React.MouseEvent<HTMLElement>,\n) => void;\n\n// eslint-disable-next-line @typescript-eslint/ban-types, deprecation/deprecation\nexport type TreeProps<T = {}> = ITreeProps<T>;\n/** @deprecated use TreeProps */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface ITreeProps<T = {}> extends Props {\n    /**\n     * The data specifying the contents and appearance of the tree.\n     */\n    contents: ReadonlyArray<TreeNodeInfo<T>>;\n\n    /**\n     * Invoked when a node is clicked anywhere other than the caret for expanding/collapsing the node.\n     */\n    onNodeClick?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when caret of an expanded node is clicked.\n     */\n    onNodeCollapse?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when a node is right-clicked or the context menu button is pressed on a focused node.\n     */\n    onNodeContextMenu?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when a node is double-clicked. Be careful when using this in combination with\n     * an `onNodeClick` (single-click) handler, as the way this behaves can vary between browsers.\n     * See http://stackoverflow.com/q/5497073/3124288\n     */\n    onNodeDoubleClick?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when the caret of a collapsed node is clicked.\n     */\n    onNodeExpand?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when the mouse is moved over a node.\n     */\n    onNodeMouseEnter?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when the mouse is moved out of a node.\n     */\n    onNodeMouseLeave?: TreeEventHandler<T>;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport class Tree<T = {}> extends React.Component<TreeProps<T>> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Tree`;\n\n    public static ofType<U>() {\n        return Tree as new (props: TreeProps<U>) => Tree<U>;\n    }\n\n    public static nodeFromPath<U>(\n        path: readonly number[],\n        treeNodes?: ReadonlyArray<TreeNodeInfo<U>>,\n    ): TreeNodeInfo<U> {\n        if (path.length === 1) {\n            return treeNodes![path[0]];\n        } else {\n            return Tree.nodeFromPath(path.slice(1), treeNodes![path[0]].childNodes);\n        }\n    }\n\n    private nodeRefs: { [nodeId: string]: HTMLElement } = {};\n\n    public render() {\n        return (\n            <div className={classNames(Classes.TREE, this.props.className)}>\n                {this.renderNodes(this.props.contents, [], Classes.TREE_ROOT)}\n            </div>\n        );\n    }\n\n    /**\n     * Returns the underlying HTML element of the `Tree` node with an id of `nodeId`.\n     * This element does not contain the children of the node, only its label and controls.\n     * If the node is not currently mounted, `undefined` is returned.\n     */\n    public getNodeContentElement(nodeId: string | number): HTMLElement | undefined {\n        return this.nodeRefs[nodeId];\n    }\n\n    private renderNodes(\n        treeNodes: ReadonlyArray<TreeNodeInfo<T>> | undefined,\n        currentPath?: number[],\n        className?: string,\n    ) {\n        if (treeNodes == null) {\n            return null;\n        }\n\n        const nodeItems = treeNodes.map((node, i) => {\n            const elementPath = currentPath!.concat(i);\n            return (\n                <TreeNode<T>\n                    {...node}\n                    key={node.id}\n                    contentRef={this.handleContentRef}\n                    depth={elementPath.length - 1}\n                    onClick={this.handleNodeClick}\n                    onContextMenu={this.handleNodeContextMenu}\n                    onCollapse={this.handleNodeCollapse}\n                    onDoubleClick={this.handleNodeDoubleClick}\n                    onExpand={this.handleNodeExpand}\n                    onMouseEnter={this.handleNodeMouseEnter}\n                    onMouseLeave={this.handleNodeMouseLeave}\n                    path={elementPath}\n                >\n                    {this.renderNodes(node.childNodes, elementPath)}\n                </TreeNode>\n            );\n        });\n\n        return <ul className={classNames(Classes.TREE_NODE_LIST, className)}>{nodeItems}</ul>;\n    }\n\n    private handleNodeCollapse = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeCollapse, node, e);\n    };\n\n    private handleNodeClick = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeClick, node, e);\n    };\n\n    private handleContentRef = (node: TreeNode<T>, element: HTMLElement | null) => {\n        if (element != null) {\n            this.nodeRefs[node.props.id] = element;\n        } else {\n            // don't want our object to get bloated with old keys\n            delete this.nodeRefs[node.props.id];\n        }\n    };\n\n    private handleNodeContextMenu = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeContextMenu, node, e);\n    };\n\n    private handleNodeDoubleClick = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeDoubleClick, node, e);\n    };\n\n    private handleNodeExpand = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeExpand, node, e);\n    };\n\n    private handleNodeMouseEnter = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeMouseEnter, node, e);\n    };\n\n    private handleNodeMouseLeave = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeMouseLeave, node, e);\n    };\n\n    private handlerHelper(\n        handlerFromProps: TreeEventHandler<T> | undefined,\n        node: TreeNode<T>,\n        e: React.MouseEvent<HTMLElement>,\n    ) {\n        if (isFunction(handlerFromProps)) {\n            const nodeData = Tree.nodeFromPath(node.props.path, this.props.contents);\n            handlerFromProps(nodeData, node.props.path, e);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}