{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX, Intent, Keys, Position, refHandler, removeNonHTMLProps, setRef, Utils } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { ButtonGroup } from \"../button/buttonGroup\";\nimport { Button } from \"../button/buttons\";\nimport { ControlGroup } from \"./controlGroup\";\nimport { InputGroup } from \"./inputGroup\";\nimport { clampValue, getValueOrEmptyValue, isValidNumericKeyboardEvent, isValueNumeric, parseStringToStringNumber, sanitizeNumericInput, toLocaleString, toMaxPrecision } from \"./numericInputUtils\";\nvar IncrementDirection;\n(function (IncrementDirection) {\n  IncrementDirection[IncrementDirection[\"DOWN\"] = -1] = \"DOWN\";\n  IncrementDirection[IncrementDirection[\"UP\"] = 1] = \"UP\";\n})(IncrementDirection || (IncrementDirection = {}));\nvar NON_HTML_PROPS = [\"allowNumericCharactersOnly\", \"buttonPosition\", \"clampValueOnBlur\", \"className\", \"defaultValue\", \"majorStepSize\", \"minorStepSize\", \"onButtonClick\", \"onValueChange\", \"selectAllOnFocus\", \"selectAllOnIncrement\", \"stepSize\"];\nvar NumericInput = /** @class */function (_super) {\n  __extends(NumericInput, _super);\n  function NumericInput() {\n    var _this = this;\n    var _a;\n    _this = _super.apply(this, arguments) || this;\n    _this.numericInputId = Utils.uniqueId(\"numericInput\");\n    _this.state = {\n      currentImeInputInvalid: false,\n      shouldSelectAfterUpdate: false,\n      stepMaxPrecision: NumericInput.getStepMaxPrecision(_this.props),\n      value: getValueOrEmptyValue((_a = _this.props.value) !== null && _a !== void 0 ? _a : _this.props.defaultValue)\n    };\n    // updating these flags need not trigger re-renders, so don't include them in this.state.\n    _this.didPasteEventJustOccur = false;\n    _this.delta = 0;\n    _this.inputElement = null;\n    _this.inputRef = refHandler(_this, \"inputElement\", _this.props.inputRef);\n    _this.incrementButtonHandlers = _this.getButtonEventHandlers(IncrementDirection.UP);\n    _this.decrementButtonHandlers = _this.getButtonEventHandlers(IncrementDirection.DOWN);\n    _this.getCurrentValueAsNumber = function () {\n      return Number(parseStringToStringNumber(_this.state.value, _this.props.locale));\n    };\n    _this.handleButtonClick = function (e, direction) {\n      var _a, _b;\n      var delta = _this.updateDelta(direction, e);\n      var nextValue = _this.incrementValue(delta);\n      (_b = (_a = _this.props).onButtonClick) === null || _b === void 0 ? void 0 : _b.call(_a, Number(parseStringToStringNumber(nextValue, _this.props.locale)), nextValue);\n    };\n    _this.stopContinuousChange = function () {\n      _this.delta = 0;\n      _this.clearTimeouts();\n      clearInterval(_this.intervalId);\n      document.removeEventListener(\"mouseup\", _this.stopContinuousChange);\n    };\n    _this.handleContinuousChange = function () {\n      var _a, _b, _c, _d;\n      // If either min or max prop is set, when reaching the limit\n      // the button will be disabled and stopContinuousChange will be never fired,\n      // hence the need to check on each iteration to properly clear the timeout\n      if (_this.props.min !== undefined || _this.props.max !== undefined) {\n        var min = (_a = _this.props.min) !== null && _a !== void 0 ? _a : -Infinity;\n        var max = (_b = _this.props.max) !== null && _b !== void 0 ? _b : Infinity;\n        var valueAsNumber = _this.getCurrentValueAsNumber();\n        if (valueAsNumber <= min || valueAsNumber >= max) {\n          _this.stopContinuousChange();\n          return;\n        }\n      }\n      var nextValue = _this.incrementValue(_this.delta);\n      (_d = (_c = _this.props).onButtonClick) === null || _d === void 0 ? void 0 : _d.call(_c, Number(parseStringToStringNumber(nextValue, _this.props.locale)), nextValue);\n    };\n    // Callbacks - Input\n    // =================\n    _this.handleInputFocus = function (e) {\n      var _a, _b;\n      // update this state flag to trigger update for input selection (see componentDidUpdate)\n      _this.setState({\n        shouldSelectAfterUpdate: _this.props.selectAllOnFocus\n      });\n      (_b = (_a = _this.props).onFocus) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n    _this.handleInputBlur = function (e) {\n      var _a, _b;\n      // always disable this flag on blur so it's ready for next time.\n      _this.setState({\n        shouldSelectAfterUpdate: false\n      });\n      if (_this.props.clampValueOnBlur) {\n        var value = e.target.value;\n        _this.handleNextValue(_this.roundAndClampValue(value));\n      }\n      (_b = (_a = _this.props).onBlur) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n    _this.handleInputKeyDown = function (e) {\n      var _a, _b;\n      if (_this.props.disabled || _this.props.readOnly) {\n        return;\n      }\n      // eslint-disable-next-line deprecation/deprecation\n      var keyCode = e.keyCode;\n      var direction;\n      if (keyCode === Keys.ARROW_UP) {\n        direction = IncrementDirection.UP;\n      } else if (keyCode === Keys.ARROW_DOWN) {\n        direction = IncrementDirection.DOWN;\n      }\n      if (direction !== undefined) {\n        // when the input field has focus, some key combinations will modify\n        // the field's selection range. we'll actually want to select all\n        // text in the field after we modify the value on the following\n        // lines. preventing the default selection behavior lets us do that\n        // without interference.\n        e.preventDefault();\n        var delta = _this.updateDelta(direction, e);\n        _this.incrementValue(delta);\n      }\n      (_b = (_a = _this.props).onKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n    _this.handleCompositionEnd = function (e) {\n      if (_this.props.allowNumericCharactersOnly) {\n        _this.handleNextValue(sanitizeNumericInput(e.data, _this.props.locale));\n        _this.setState({\n          currentImeInputInvalid: false\n        });\n      }\n    };\n    _this.handleCompositionUpdate = function (e) {\n      if (_this.props.allowNumericCharactersOnly) {\n        var data = e.data;\n        var sanitizedValue = sanitizeNumericInput(data, _this.props.locale);\n        if (sanitizedValue.length === 0 && data.length > 0) {\n          _this.setState({\n            currentImeInputInvalid: true\n          });\n        } else {\n          _this.setState({\n            currentImeInputInvalid: false\n          });\n        }\n      }\n    };\n    _this.handleInputKeyPress = function (e) {\n      var _a, _b;\n      // we prohibit keystrokes in onKeyPress instead of onKeyDown, because\n      // e.key is not trustworthy in onKeyDown in all browsers.\n      if (_this.props.allowNumericCharactersOnly && !isValidNumericKeyboardEvent(e, _this.props.locale)) {\n        e.preventDefault();\n      }\n      // eslint-disable-next-line deprecation/deprecation\n      (_b = (_a = _this.props).onKeyPress) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n    _this.handleInputPaste = function (e) {\n      var _a, _b;\n      _this.didPasteEventJustOccur = true;\n      (_b = (_a = _this.props).onPaste) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n    _this.handleInputChange = function (e) {\n      var value = e.target.value;\n      var nextValue = value;\n      if (_this.props.allowNumericCharactersOnly && _this.didPasteEventJustOccur) {\n        _this.didPasteEventJustOccur = false;\n        nextValue = sanitizeNumericInput(value, _this.props.locale);\n      }\n      _this.handleNextValue(nextValue);\n      _this.setState({\n        shouldSelectAfterUpdate: false\n      });\n    };\n    return _this;\n  }\n  NumericInput.getDerivedStateFromProps = function (props, state) {\n    var _a, _b;\n    var nextState = {\n      prevMaxProp: props.max,\n      prevMinProp: props.min\n    };\n    var didMinChange = props.min !== state.prevMinProp;\n    var didMaxChange = props.max !== state.prevMaxProp;\n    var didBoundsChange = didMinChange || didMaxChange;\n    // in controlled mode, use props.value\n    // in uncontrolled mode, if state.value has not been assigned yet (upon initial mount), use props.defaultValue\n    var value = (_b = (_a = props.value) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : state.value;\n    var stepMaxPrecision = NumericInput.getStepMaxPrecision(props);\n    var sanitizedValue = value !== NumericInput.VALUE_EMPTY ? NumericInput.roundAndClampValue(value, stepMaxPrecision, props.min, props.max, 0, props.locale) : NumericInput.VALUE_EMPTY;\n    // if a new min and max were provided that cause the existing value to fall\n    // outside of the new bounds, then clamp the value to the new valid range.\n    if (didBoundsChange && sanitizedValue !== state.value) {\n      return __assign(__assign({}, nextState), {\n        stepMaxPrecision: stepMaxPrecision,\n        value: sanitizedValue\n      });\n    }\n    return __assign(__assign({}, nextState), {\n      stepMaxPrecision: stepMaxPrecision,\n      value: value\n    });\n  };\n  // Value Helpers\n  // =============\n  NumericInput.getStepMaxPrecision = function (props) {\n    if (props.minorStepSize != null) {\n      return Utils.countDecimalPlaces(props.minorStepSize);\n    } else {\n      return Utils.countDecimalPlaces(props.stepSize);\n    }\n  };\n  NumericInput.roundAndClampValue = function (value, stepMaxPrecision, min, max, delta, locale) {\n    if (delta === void 0) {\n      delta = 0;\n    }\n    if (!isValueNumeric(value, locale)) {\n      return NumericInput.VALUE_EMPTY;\n    }\n    var currentValue = parseStringToStringNumber(value, locale);\n    var nextValue = toMaxPrecision(Number(currentValue) + delta, stepMaxPrecision);\n    var clampedValue = clampValue(nextValue, min, max);\n    return toLocaleString(clampedValue, locale);\n  };\n  NumericInput.prototype.render = function () {\n    var _a;\n    var _b = this.props,\n      buttonPosition = _b.buttonPosition,\n      className = _b.className,\n      fill = _b.fill,\n      large = _b.large;\n    var containerClasses = classNames(Classes.NUMERIC_INPUT, (_a = {}, _a[Classes.LARGE] = large, _a), className);\n    var buttons = this.renderButtons();\n    return React.createElement(ControlGroup, {\n      className: containerClasses,\n      fill: fill\n    }, buttonPosition === Position.LEFT && buttons, this.renderInput(), buttonPosition === Position.RIGHT && buttons);\n  };\n  NumericInput.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _a, _b, _c;\n    _super.prototype.componentDidUpdate.call(this, prevProps, prevState);\n    if (prevProps.inputRef !== this.props.inputRef) {\n      setRef(prevProps.inputRef, null);\n      this.inputRef = refHandler(this, \"inputElement\", this.props.inputRef);\n      setRef(this.props.inputRef, this.inputElement);\n    }\n    if (this.state.shouldSelectAfterUpdate) {\n      (_a = this.inputElement) === null || _a === void 0 ? void 0 : _a.setSelectionRange(0, this.state.value.length);\n    }\n    var didMinChange = this.props.min !== prevProps.min;\n    var didMaxChange = this.props.max !== prevProps.max;\n    var didBoundsChange = didMinChange || didMaxChange;\n    var didLocaleChange = this.props.locale !== prevProps.locale;\n    var didValueChange = this.state.value !== prevState.value;\n    if (didBoundsChange && didValueChange || didLocaleChange && prevState.value !== NumericInput.VALUE_EMPTY) {\n      // we clamped the value due to a bounds change, so we should fire the change callback\n      var valueToParse = didLocaleChange ? prevState.value : this.state.value;\n      var valueAsString = parseStringToStringNumber(valueToParse, prevProps.locale);\n      var localizedValue = toLocaleString(+valueAsString, this.props.locale);\n      (_c = (_b = this.props).onValueChange) === null || _c === void 0 ? void 0 : _c.call(_b, +valueAsString, localizedValue, this.inputElement);\n    }\n  };\n  NumericInput.prototype.validateProps = function (nextProps) {\n    var majorStepSize = nextProps.majorStepSize,\n      max = nextProps.max,\n      min = nextProps.min,\n      minorStepSize = nextProps.minorStepSize,\n      stepSize = nextProps.stepSize,\n      value = nextProps.value;\n    if (min != null && max != null && min > max) {\n      console.error(Errors.NUMERIC_INPUT_MIN_MAX);\n    }\n    if (stepSize <= 0) {\n      console.error(Errors.NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE);\n    }\n    if (minorStepSize && minorStepSize <= 0) {\n      console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE);\n    }\n    if (majorStepSize && majorStepSize <= 0) {\n      console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE);\n    }\n    if (minorStepSize && minorStepSize > stepSize) {\n      console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND);\n    }\n    if (majorStepSize && majorStepSize < stepSize) {\n      console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND);\n    }\n    // controlled mode\n    if (value != null) {\n      var stepMaxPrecision = NumericInput.getStepMaxPrecision(nextProps);\n      var sanitizedValue = NumericInput.roundAndClampValue(value.toString(), stepMaxPrecision, min, max, 0, this.props.locale);\n      var valueDoesNotMatch = sanitizedValue !== value.toString();\n      var localizedValue = toLocaleString(Number(parseStringToStringNumber(value, this.props.locale)), this.props.locale);\n      var isNotLocalized = sanitizedValue !== localizedValue;\n      if (valueDoesNotMatch && isNotLocalized) {\n        console.warn(Errors.NUMERIC_INPUT_CONTROLLED_VALUE_INVALID);\n      }\n    }\n  };\n  // Render Helpers\n  // ==============\n  NumericInput.prototype.renderButtons = function () {\n    var _a = this.props,\n      intent = _a.intent,\n      max = _a.max,\n      min = _a.min,\n      locale = _a.locale;\n    var value = parseStringToStringNumber(this.state.value, locale);\n    var disabled = this.props.disabled || this.props.readOnly;\n    var isIncrementDisabled = max !== undefined && value !== \"\" && +value >= max;\n    var isDecrementDisabled = min !== undefined && value !== \"\" && +value <= min;\n    return React.createElement(ButtonGroup, {\n      className: Classes.FIXED,\n      key: \"button-group\",\n      vertical: true\n    }, React.createElement(Button, __assign({\n      \"aria-label\": \"increment\",\n      \"aria-controls\": this.numericInputId,\n      disabled: disabled || isIncrementDisabled,\n      icon: \"chevron-up\",\n      intent: intent\n    }, this.incrementButtonHandlers)), React.createElement(Button, __assign({\n      \"aria-label\": \"decrement\",\n      \"aria-controls\": this.numericInputId,\n      disabled: disabled || isDecrementDisabled,\n      icon: \"chevron-down\",\n      intent: intent\n    }, this.decrementButtonHandlers)));\n  };\n  NumericInput.prototype.renderInput = function () {\n    var inputGroupHtmlProps = removeNonHTMLProps(this.props, NON_HTML_PROPS, true);\n    var valueAsNumber = this.getCurrentValueAsNumber();\n    return React.createElement(InputGroup, __assign({\n      asyncControl: this.props.asyncControl,\n      autoComplete: \"off\",\n      id: this.numericInputId,\n      role: this.props.allowNumericCharactersOnly ? \"spinbutton\" : undefined\n    }, inputGroupHtmlProps, {\n      \"aria-valuemax\": this.props.max,\n      \"aria-valuemin\": this.props.min,\n      \"aria-valuenow\": valueAsNumber,\n      intent: this.state.currentImeInputInvalid ? Intent.DANGER : this.props.intent,\n      inputRef: this.inputRef,\n      large: this.props.large,\n      leftElement: this.props.leftElement,\n      leftIcon: this.props.leftIcon,\n      onFocus: this.handleInputFocus,\n      onBlur: this.handleInputBlur,\n      onChange: this.handleInputChange,\n      onCompositionEnd: this.handleCompositionEnd,\n      onCompositionUpdate: this.handleCompositionUpdate,\n      onKeyDown: this.handleInputKeyDown,\n      onKeyPress: this.handleInputKeyPress,\n      onPaste: this.handleInputPaste,\n      rightElement: this.props.rightElement,\n      value: this.state.value\n    }));\n  };\n  // Callbacks - Buttons\n  // ===================\n  NumericInput.prototype.getButtonEventHandlers = function (direction) {\n    var _this = this;\n    return {\n      // keydown is fired repeatedly when held so it's implicitly continuous\n      onKeyDown: function (evt) {\n        // eslint-disable-next-line deprecation/deprecation\n        if (!_this.props.disabled && Keys.isKeyboardClick(evt.keyCode)) {\n          _this.handleButtonClick(evt, direction);\n        }\n      },\n      onMouseDown: function (evt) {\n        if (!_this.props.disabled) {\n          _this.handleButtonClick(evt, direction);\n          _this.startContinuousChange();\n        }\n      }\n    };\n  };\n  NumericInput.prototype.startContinuousChange = function () {\n    var _this = this;\n    // The button's onMouseUp event handler doesn't fire if the user\n    // releases outside of the button, so we need to watch all the way\n    // from the top.\n    document.addEventListener(\"mouseup\", this.stopContinuousChange);\n    // Initial delay is slightly longer to prevent the user from\n    // accidentally triggering the continuous increment/decrement.\n    this.setTimeout(function () {\n      _this.intervalId = window.setInterval(_this.handleContinuousChange, NumericInput.CONTINUOUS_CHANGE_INTERVAL);\n    }, NumericInput.CONTINUOUS_CHANGE_DELAY);\n  };\n  // Data logic\n  // ==========\n  NumericInput.prototype.handleNextValue = function (valueAsString) {\n    var _a, _b;\n    if (this.props.value == null) {\n      this.setState({\n        value: valueAsString\n      });\n    }\n    (_b = (_a = this.props).onValueChange) === null || _b === void 0 ? void 0 : _b.call(_a, Number(parseStringToStringNumber(valueAsString, this.props.locale)), valueAsString, this.inputElement);\n  };\n  NumericInput.prototype.incrementValue = function (delta) {\n    // pretend we're incrementing from 0 if currValue is empty\n    var currValue = this.state.value === NumericInput.VALUE_EMPTY ? NumericInput.VALUE_ZERO : this.state.value;\n    var nextValue = this.roundAndClampValue(currValue, delta);\n    if (nextValue !== this.state.value) {\n      this.handleNextValue(nextValue);\n      this.setState({\n        shouldSelectAfterUpdate: this.props.selectAllOnIncrement\n      });\n    }\n    // return value used in continuous change updates\n    return nextValue;\n  };\n  NumericInput.prototype.getIncrementDelta = function (direction, isShiftKeyPressed, isAltKeyPressed) {\n    var _a = this.props,\n      majorStepSize = _a.majorStepSize,\n      minorStepSize = _a.minorStepSize,\n      stepSize = _a.stepSize;\n    if (isShiftKeyPressed && majorStepSize != null) {\n      return direction * majorStepSize;\n    } else if (isAltKeyPressed && minorStepSize != null) {\n      return direction * minorStepSize;\n    } else {\n      return direction * stepSize;\n    }\n  };\n  NumericInput.prototype.roundAndClampValue = function (value, delta) {\n    if (delta === void 0) {\n      delta = 0;\n    }\n    return NumericInput.roundAndClampValue(value, this.state.stepMaxPrecision, this.props.min, this.props.max, delta, this.props.locale);\n  };\n  NumericInput.prototype.updateDelta = function (direction, e) {\n    this.delta = this.getIncrementDelta(direction, e.shiftKey, e.altKey);\n    return this.delta;\n  };\n  NumericInput.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".NumericInput\");\n  NumericInput.VALUE_EMPTY = \"\";\n  NumericInput.VALUE_ZERO = \"0\";\n  NumericInput.defaultProps = {\n    allowNumericCharactersOnly: true,\n    buttonPosition: Position.RIGHT,\n    clampValueOnBlur: false,\n    defaultValue: NumericInput.VALUE_EMPTY,\n    large: false,\n    majorStepSize: 10,\n    minorStepSize: 0.1,\n    selectAllOnFocus: false,\n    selectAllOnIncrement: false,\n    stepSize: 1\n  };\n  NumericInput.CONTINUOUS_CHANGE_DELAY = 300;\n  NumericInput.CONTINUOUS_CHANGE_INTERVAL = 100;\n  return NumericInput;\n}(AbstractPureComponent2);\nexport { NumericInput };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAU,MAAM,YAAY;AACnC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,SACIC,sBAAsB,EACtBC,OAAO,EACPC,kBAAkB,EAElBC,MAAM,EACNC,IAAI,EACJC,QAAQ,EACRC,UAAU,EACVC,kBAAkB,EAClBC,MAAM,EACNC,KAAK,QACF,cAAc;AACrB,OAAO,KAAKC,MAAM,MAAM,qBAAqB;AAC7C,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,UAAU,QAAQ,cAAc;AAEzC,SACIC,UAAU,EACVC,oBAAoB,EACpBC,2BAA2B,EAC3BC,cAAc,EACdC,yBAAyB,EACzBC,oBAAoB,EACpBC,cAAc,EACdC,cAAc,QACX,qBAAqB;AA+H5B,IAAKC,kBAGJ;AAHD,WAAKA,kBAAkB;EACnBA,4DAAS;EACTA,uDAAO;AACX,CAAC,EAHIA,kBAAkB,KAAlBA,kBAAkB;AAKvB,IAAMC,cAAc,GAAmC,CACnD,4BAA4B,EAC5B,gBAAgB,EAChB,kBAAkB,EAClB,WAAW,EACX,cAAc,EACd,eAAe,EACf,eAAe,EACf,eAAe,EACf,eAAe,EACf,kBAAkB,EAClB,sBAAsB,EACtB,UAAU,CACb;AAID;EAAkCC;EAAlC;IAAA;;;IAOYC,oBAAc,GAAGjB,KAAK,CAACkB,QAAQ,CAAC,cAAc,CAAC;IA0EhDD,WAAK,GAAuB;MAC/BE,sBAAsB,EAAE,KAAK;MAC7BC,uBAAuB,EAAE,KAAK;MAC9BC,gBAAgB,EAAEC,YAAY,CAACC,mBAAmB,CAACN,KAAI,CAACO,KAAK,CAAC;MAC9DC,KAAK,EAAElB,oBAAoB,CAAC,WAAI,CAACiB,KAAK,CAACC,KAAK,mCAAIR,KAAI,CAACO,KAAK,CAACE,YAAY;KAC1E;IAED;IACQT,4BAAsB,GAAG,KAAK;IAE9BA,WAAK,GAAG,CAAC;IAEVA,kBAAY,GAA4B,IAAI;IAE3CA,cAAQ,GAAgCpB,UAAU,CAACoB,KAAI,EAAE,cAAc,EAAEA,KAAI,CAACO,KAAK,CAACG,QAAQ,CAAC;IAI7FV,6BAAuB,GAAGA,KAAI,CAACW,sBAAsB,CAACd,kBAAkB,CAACe,EAAE,CAAC;IAE5EZ,6BAAuB,GAAGA,KAAI,CAACW,sBAAsB,CAACd,kBAAkB,CAACgB,IAAI,CAAC;IAE9Eb,6BAAuB,GAAG;MAAM,aAAM,CAACP,yBAAyB,CAACO,KAAI,CAACc,KAAK,CAACN,KAAK,EAAER,KAAI,CAACO,KAAK,CAACQ,MAAM,CAAC,CAAC;IAAtE,CAAsE;IA+KtGf,uBAAiB,GAAG,UAACgB,CAAyC,EAAEC,SAA6B;;MACjG,IAAMC,KAAK,GAAGlB,KAAI,CAACmB,WAAW,CAACF,SAAS,EAAED,CAAC,CAAC;MAC5C,IAAMI,SAAS,GAAGpB,KAAI,CAACqB,cAAc,CAACH,KAAK,CAAC;MAC5C,iBAAI,CAACX,KAAK,EAACe,aAAa,mDAAGC,MAAM,CAAC9B,yBAAyB,CAAC2B,SAAS,EAAEpB,KAAI,CAACO,KAAK,CAACQ,MAAM,CAAC,CAAC,EAAEK,SAAS,CAAC;IAC1G,CAAC;IAeOpB,0BAAoB,GAAG;MAC3BA,KAAI,CAACkB,KAAK,GAAG,CAAC;MACdlB,KAAI,CAACwB,aAAa,EAAE;MACpBC,aAAa,CAACzB,KAAI,CAAC0B,UAAU,CAAC;MAC9BC,QAAQ,CAACC,mBAAmB,CAAC,SAAS,EAAE5B,KAAI,CAAC6B,oBAAoB,CAAC;IACtE,CAAC;IAEO7B,4BAAsB,GAAG;;MAC7B;MACA;MACA;MACA,IAAIA,KAAI,CAACO,KAAK,CAACuB,GAAG,KAAKC,SAAS,IAAI/B,KAAI,CAACO,KAAK,CAACyB,GAAG,KAAKD,SAAS,EAAE;QAC9D,IAAMD,GAAG,GAAG,WAAI,CAACvB,KAAK,CAACuB,GAAG,mCAAI,CAACG,QAAQ;QACvC,IAAMD,GAAG,GAAG,WAAI,CAACzB,KAAK,CAACyB,GAAG,mCAAIC,QAAQ;QACtC,IAAMC,aAAa,GAAGlC,KAAI,CAACmC,uBAAuB,EAAE;QACpD,IAAID,aAAa,IAAIJ,GAAG,IAAII,aAAa,IAAIF,GAAG,EAAE;UAC9ChC,KAAI,CAAC6B,oBAAoB,EAAE;UAC3B;;;MAGR,IAAMT,SAAS,GAAGpB,KAAI,CAACqB,cAAc,CAACrB,KAAI,CAACkB,KAAK,CAAC;MACjD,iBAAI,CAACX,KAAK,EAACe,aAAa,mDAAGC,MAAM,CAAC9B,yBAAyB,CAAC2B,SAAS,EAAEpB,KAAI,CAACO,KAAK,CAACQ,MAAM,CAAC,CAAC,EAAEK,SAAS,CAAC;IAC1G,CAAC;IAED;IACA;IAEQpB,sBAAgB,GAAG,UAACgB,CAAqC;;MAC7D;MACAhB,KAAI,CAACoC,QAAQ,CAAC;QAAEjC,uBAAuB,EAAEH,KAAI,CAACO,KAAK,CAAC8B;MAAiB,CAAE,CAAC;MACxE,iBAAI,CAAC9B,KAAK,EAAC+B,OAAO,mDAAGtB,CAAC,CAAC;IAC3B,CAAC;IAEOhB,qBAAe,GAAG,UAACgB,CAAqC;;MAC5D;MACAhB,KAAI,CAACoC,QAAQ,CAAC;QAAEjC,uBAAuB,EAAE;MAAK,CAAE,CAAC;MAEjD,IAAIH,KAAI,CAACO,KAAK,CAACgC,gBAAgB,EAAE;QACrB,SAAK,GAAKvB,CAAC,CAACwB,MAA0B,MAAjC;QACbxC,KAAI,CAACyC,eAAe,CAACzC,KAAI,CAAC0C,kBAAkB,CAAClC,KAAK,CAAC,CAAC;;MAGxD,iBAAI,CAACD,KAAK,EAACoC,MAAM,mDAAG3B,CAAC,CAAC;IAC1B,CAAC;IAEOhB,wBAAkB,GAAG,UAACgB,CAAwC;;MAClE,IAAIhB,KAAI,CAACO,KAAK,CAACqC,QAAQ,IAAI5C,KAAI,CAACO,KAAK,CAACsC,QAAQ,EAAE;QAC5C;;MAGJ;MACQ,WAAO,GAAK7B,CAAC,QAAN;MAEf,IAAIC,SAAyC;MAE7C,IAAI6B,OAAO,KAAKpE,IAAI,CAACqE,QAAQ,EAAE;QAC3B9B,SAAS,GAAGpB,kBAAkB,CAACe,EAAE;OACpC,MAAM,IAAIkC,OAAO,KAAKpE,IAAI,CAACsE,UAAU,EAAE;QACpC/B,SAAS,GAAGpB,kBAAkB,CAACgB,IAAI;;MAGvC,IAAII,SAAS,KAAKc,SAAS,EAAE;QACzB;QACA;QACA;QACA;QACA;QACAf,CAAC,CAACiC,cAAc,EAAE;QAElB,IAAM/B,KAAK,GAAGlB,KAAI,CAACmB,WAAW,CAACF,SAAS,EAAED,CAAC,CAAC;QAC5ChB,KAAI,CAACqB,cAAc,CAACH,KAAK,CAAC;;MAG9B,iBAAI,CAACX,KAAK,EAAC2C,SAAS,mDAAGlC,CAAC,CAAC;IAC7B,CAAC;IAEOhB,0BAAoB,GAAG,UAACgB,CAA2C;MACvE,IAAIhB,KAAI,CAACO,KAAK,CAAC4C,0BAA0B,EAAE;QACvCnD,KAAI,CAACyC,eAAe,CAAC/C,oBAAoB,CAACsB,CAAC,CAACoC,IAAI,EAAEpD,KAAI,CAACO,KAAK,CAACQ,MAAM,CAAC,CAAC;QACrEf,KAAI,CAACoC,QAAQ,CAAC;UAAElC,sBAAsB,EAAE;QAAK,CAAE,CAAC;;IAExD,CAAC;IAEOF,6BAAuB,GAAG,UAACgB,CAA2C;MAC1E,IAAIhB,KAAI,CAACO,KAAK,CAAC4C,0BAA0B,EAAE;QAC/B,QAAI,GAAKnC,CAAC,KAAN;QACZ,IAAMqC,cAAc,GAAG3D,oBAAoB,CAAC0D,IAAI,EAAEpD,KAAI,CAACO,KAAK,CAACQ,MAAM,CAAC;QACpE,IAAIsC,cAAc,CAACC,MAAM,KAAK,CAAC,IAAIF,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;UAChDtD,KAAI,CAACoC,QAAQ,CAAC;YAAElC,sBAAsB,EAAE;UAAI,CAAE,CAAC;SAClD,MAAM;UACHF,KAAI,CAACoC,QAAQ,CAAC;YAAElC,sBAAsB,EAAE;UAAK,CAAE,CAAC;;;IAG5D,CAAC;IAEOF,yBAAmB,GAAG,UAACgB,CAAwC;;MACnE;MACA;MACA,IAAIhB,KAAI,CAACO,KAAK,CAAC4C,0BAA0B,IAAI,CAAC5D,2BAA2B,CAACyB,CAAC,EAAEhB,KAAI,CAACO,KAAK,CAACQ,MAAM,CAAC,EAAE;QAC7FC,CAAC,CAACiC,cAAc,EAAE;;MAGtB;MACA,iBAAI,CAAC1C,KAAK,EAACgD,UAAU,mDAAGvC,CAAC,CAAC;IAC9B,CAAC;IAEOhB,sBAAgB,GAAG,UAACgB,CAAyC;;MACjEhB,KAAI,CAACwD,sBAAsB,GAAG,IAAI;MAClC,iBAAI,CAACjD,KAAK,EAACkD,OAAO,mDAAGzC,CAAC,CAAC;IAC3B,CAAC;IAEOhB,uBAAiB,GAAG,UAACgB,CAAkB;MACnC,SAAK,GAAKA,CAAC,CAACwB,MAA0B,MAAjC;MACb,IAAIpB,SAAS,GAAGZ,KAAK;MACrB,IAAIR,KAAI,CAACO,KAAK,CAAC4C,0BAA0B,IAAInD,KAAI,CAACwD,sBAAsB,EAAE;QACtExD,KAAI,CAACwD,sBAAsB,GAAG,KAAK;QACnCpC,SAAS,GAAG1B,oBAAoB,CAACc,KAAK,EAAER,KAAI,CAACO,KAAK,CAACQ,MAAM,CAAC;;MAG9Df,KAAI,CAACyC,eAAe,CAACrB,SAAS,CAAC;MAC/BpB,KAAI,CAACoC,QAAQ,CAAC;QAAEjC,uBAAuB,EAAE;MAAK,CAAE,CAAC;IACrD,CAAC;;EA0DL;EAtckBE,qCAAwB,GAAtC,UAAuCE,KAAwB,EAAEO,KAAyB;;IACtF,IAAM4C,SAAS,GAAG;MACdC,WAAW,EAAEpD,KAAK,CAACyB,GAAG;MACtB4B,WAAW,EAAErD,KAAK,CAACuB;KACtB;IAED,IAAM+B,YAAY,GAAGtD,KAAK,CAACuB,GAAG,KAAKhB,KAAK,CAAC8C,WAAW;IACpD,IAAME,YAAY,GAAGvD,KAAK,CAACyB,GAAG,KAAKlB,KAAK,CAAC6C,WAAW;IACpD,IAAMI,eAAe,GAAGF,YAAY,IAAIC,YAAY;IAEpD;IACA;IACA,IAAMtD,KAAK,GAAG,iBAAK,CAACA,KAAK,0CAAEwD,QAAQ,EAAE,mCAAIlD,KAAK,CAACN,KAAK;IACpD,IAAMJ,gBAAgB,GAAGC,YAAY,CAACC,mBAAmB,CAACC,KAAK,CAAC;IAEhE,IAAM8C,cAAc,GAChB7C,KAAK,KAAKH,YAAY,CAAC4D,WAAW,GAC5B5D,YAAY,CAACqC,kBAAkB,CAAClC,KAAK,EAAEJ,gBAAgB,EAAEG,KAAK,CAACuB,GAAG,EAAEvB,KAAK,CAACyB,GAAG,EAAE,CAAC,EAAEzB,KAAK,CAACQ,MAAM,CAAC,GAC/FV,YAAY,CAAC4D,WAAW;IAElC;IACA;IACA,IAAIF,eAAe,IAAIV,cAAc,KAAKvC,KAAK,CAACN,KAAK,EAAE;MACnD,6BAAYkD,SAAS;QAAEtD,gBAAgB;QAAEI,KAAK,EAAE6C;MAAc;;IAElE,6BAAYK,SAAS;MAAEtD,gBAAgB;MAAEI,KAAK;IAAA;EAClD,CAAC;EAMD;EACA;EACeH,gCAAmB,GAAlC,UAAmCE,KAAyC;IACxE,IAAIA,KAAK,CAAC2D,aAAa,IAAI,IAAI,EAAE;MAC7B,OAAOnF,KAAK,CAACoF,kBAAkB,CAAC5D,KAAK,CAAC2D,aAAa,CAAC;KACvD,MAAM;MACH,OAAOnF,KAAK,CAACoF,kBAAkB,CAAC5D,KAAK,CAAC6D,QAAS,CAAC;;EAExD,CAAC;EAEc/D,+BAAkB,GAAjC,UACIG,KAAa,EACbJ,gBAAwB,EACxB0B,GAAuB,EACvBE,GAAuB,EACvBd,KAAS,EACTH,MAA0B;IAD1B;MAAAG,SAAS;IAAA;IAGT,IAAI,CAAC1B,cAAc,CAACgB,KAAK,EAAEO,MAAM,CAAC,EAAE;MAChC,OAAOV,YAAY,CAAC4D,WAAW;;IAEnC,IAAMI,YAAY,GAAG5E,yBAAyB,CAACe,KAAK,EAAEO,MAAM,CAAC;IAC7D,IAAMK,SAAS,GAAGxB,cAAc,CAAC2B,MAAM,CAAC8C,YAAY,CAAC,GAAGnD,KAAK,EAAEd,gBAAgB,CAAC;IAChF,IAAMkE,YAAY,GAAGjF,UAAU,CAAC+B,SAAS,EAAEU,GAAG,EAAEE,GAAG,CAAC;IACpD,OAAOrC,cAAc,CAAC2E,YAAY,EAAEvD,MAAM,CAAC;EAC/C,CAAC;EA0BMV,6BAAM,GAAb;;IACU,SAA6C,IAAI,CAACE,KAAK;MAArDgE,cAAc;MAAEC,SAAS;MAAEC,IAAI;MAAEC,KAAK,WAAe;IAC7D,IAAMC,gBAAgB,GAAGvG,UAAU,CAACG,OAAO,CAACqG,aAAa,YAAIC,GAACtG,OAAO,CAACuG,KAAK,IAAGJ,KAAK,OAAIF,SAAS,CAAC;IACjG,IAAMO,OAAO,GAAG,IAAI,CAACC,aAAa,EAAE;IACpC,OACI3G,oBAACc,YAAY;MAACqF,SAAS,EAAEG,gBAAgB;MAAEF,IAAI,EAAEA;IAAI,GAChDF,cAAc,KAAK5F,QAAQ,CAACsG,IAAI,IAAIF,OAAO,EAC3C,IAAI,CAACG,WAAW,EAAE,EAClBX,cAAc,KAAK5F,QAAQ,CAACwG,KAAK,IAAIJ,OAAO,CAClC;EAEvB,CAAC;EAEM1E,yCAAkB,GAAzB,UAA0B+E,SAA4B,EAAEC,SAA6B;;IACjFC,iBAAMC,kBAAkB,YAACH,SAAS,EAAEC,SAAS,CAAC;IAE9C,IAAID,SAAS,CAAC1E,QAAQ,KAAK,IAAI,CAACH,KAAK,CAACG,QAAQ,EAAE;MAC5C5B,MAAM,CAACsG,SAAS,CAAC1E,QAAQ,EAAE,IAAI,CAAC;MAChC,IAAI,CAACA,QAAQ,GAAG9B,UAAU,CAAC,IAAI,EAAE,cAAc,EAAE,IAAI,CAAC2B,KAAK,CAACG,QAAQ,CAAC;MACrE5B,MAAM,CAAC,IAAI,CAACyB,KAAK,CAACG,QAAQ,EAAE,IAAI,CAAC8E,YAAY,CAAC;;IAGlD,IAAI,IAAI,CAAC1E,KAAK,CAACX,uBAAuB,EAAE;MACpC,UAAI,CAACqF,YAAY,0CAAEC,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAAC3E,KAAK,CAACN,KAAK,CAAC8C,MAAM,CAAC;;IAGpE,IAAMO,YAAY,GAAG,IAAI,CAACtD,KAAK,CAACuB,GAAG,KAAKsD,SAAS,CAACtD,GAAG;IACrD,IAAMgC,YAAY,GAAG,IAAI,CAACvD,KAAK,CAACyB,GAAG,KAAKoD,SAAS,CAACpD,GAAG;IACrD,IAAM+B,eAAe,GAAGF,YAAY,IAAIC,YAAY;IACpD,IAAM4B,eAAe,GAAG,IAAI,CAACnF,KAAK,CAACQ,MAAM,KAAKqE,SAAS,CAACrE,MAAM;IAC9D,IAAM4E,cAAc,GAAG,IAAI,CAAC7E,KAAK,CAACN,KAAK,KAAK6E,SAAS,CAAC7E,KAAK;IAE3D,IAAKuD,eAAe,IAAI4B,cAAc,IAAMD,eAAe,IAAIL,SAAS,CAAC7E,KAAK,KAAKH,YAAY,CAAC4D,WAAY,EAAE;MAC1G;MACA,IAAM2B,YAAY,GAAGF,eAAe,GAAGL,SAAS,CAAC7E,KAAK,GAAG,IAAI,CAACM,KAAK,CAACN,KAAK;MACzE,IAAMqF,aAAa,GAAGpG,yBAAyB,CAACmG,YAAY,EAAER,SAAS,CAACrE,MAAM,CAAC;MAC/E,IAAM+E,cAAc,GAAGnG,cAAc,CAAC,CAACkG,aAAa,EAAE,IAAI,CAACtF,KAAK,CAACQ,MAAM,CAAC;MAExE,gBAAI,CAACR,KAAK,EAACwF,aAAa,mDAAG,CAACF,aAAa,EAAEC,cAAc,EAAE,IAAI,CAACN,YAAY,CAAC;;EAErF,CAAC;EAESnF,oCAAa,GAAvB,UAAwB2F,SAA6C;IACzD,iBAAa,GAA+CA,SAAS,cAAxD;MAAEhE,GAAG,GAA0CgE,SAAS,IAAnD;MAAElE,GAAG,GAAqCkE,SAAS,IAA9C;MAAE9B,aAAa,GAAsB8B,SAAS,cAA/B;MAAE5B,QAAQ,GAAY4B,SAAS,SAArB;MAAExF,KAAK,GAAKwF,SAAS,MAAd;IAC/D,IAAIlE,GAAG,IAAI,IAAI,IAAIE,GAAG,IAAI,IAAI,IAAIF,GAAG,GAAGE,GAAG,EAAE;MACzCiE,OAAO,CAACC,KAAK,CAAClH,MAAM,CAACmH,qBAAqB,CAAC;;IAE/C,IAAI/B,QAAS,IAAI,CAAC,EAAE;MAChB6B,OAAO,CAACC,KAAK,CAAClH,MAAM,CAACoH,oCAAoC,CAAC;;IAE9D,IAAIlC,aAAa,IAAIA,aAAa,IAAI,CAAC,EAAE;MACrC+B,OAAO,CAACC,KAAK,CAAClH,MAAM,CAACqH,0CAA0C,CAAC;;IAEpE,IAAIC,aAAa,IAAIA,aAAa,IAAI,CAAC,EAAE;MACrCL,OAAO,CAACC,KAAK,CAAClH,MAAM,CAACuH,0CAA0C,CAAC;;IAEpE,IAAIrC,aAAa,IAAIA,aAAa,GAAGE,QAAS,EAAE;MAC5C6B,OAAO,CAACC,KAAK,CAAClH,MAAM,CAACwH,mCAAmC,CAAC;;IAE7D,IAAIF,aAAa,IAAIA,aAAa,GAAGlC,QAAS,EAAE;MAC5C6B,OAAO,CAACC,KAAK,CAAClH,MAAM,CAACyH,mCAAmC,CAAC;;IAG7D;IACA,IAAIjG,KAAK,IAAI,IAAI,EAAE;MACf,IAAMJ,gBAAgB,GAAGC,YAAY,CAACC,mBAAmB,CAAC0F,SAAS,CAAC;MACpE,IAAM3C,cAAc,GAAGhD,YAAY,CAACqC,kBAAkB,CAClDlC,KAAK,CAACwD,QAAQ,EAAE,EAChB5D,gBAAgB,EAChB0B,GAAG,EACHE,GAAG,EACH,CAAC,EACD,IAAI,CAACzB,KAAK,CAACQ,MAAM,CACpB;MACD,IAAM2F,iBAAiB,GAAGrD,cAAc,KAAK7C,KAAK,CAACwD,QAAQ,EAAE;MAC7D,IAAM8B,cAAc,GAAGnG,cAAc,CACjC4B,MAAM,CAAC9B,yBAAyB,CAACe,KAAK,EAAE,IAAI,CAACD,KAAK,CAACQ,MAAM,CAAC,CAAC,EAC3D,IAAI,CAACR,KAAK,CAACQ,MAAM,CACpB;MACD,IAAM4F,cAAc,GAAGtD,cAAc,KAAKyC,cAAc;MAExD,IAAIY,iBAAiB,IAAIC,cAAc,EAAE;QACrCV,OAAO,CAACW,IAAI,CAAC5H,MAAM,CAAC6H,sCAAsC,CAAC;;;EAGvE,CAAC;EAED;EACA;EAEQxG,oCAAa,GAArB;IACU,SAA+B,IAAI,CAACE,KAAK;MAAvCuG,MAAM;MAAE9E,GAAG;MAAEF,GAAG;MAAEf,MAAM,YAAe;IAC/C,IAAMP,KAAK,GAAGf,yBAAyB,CAAC,IAAI,CAACqB,KAAK,CAACN,KAAK,EAAEO,MAAM,CAAC;IACjE,IAAM6B,QAAQ,GAAG,IAAI,CAACrC,KAAK,CAACqC,QAAQ,IAAI,IAAI,CAACrC,KAAK,CAACsC,QAAQ;IAC3D,IAAMkE,mBAAmB,GAAG/E,GAAG,KAAKD,SAAS,IAAIvB,KAAK,KAAK,EAAE,IAAI,CAACA,KAAK,IAAIwB,GAAG;IAC9E,IAAMgF,mBAAmB,GAAGlF,GAAG,KAAKC,SAAS,IAAIvB,KAAK,KAAK,EAAE,IAAI,CAACA,KAAK,IAAIsB,GAAG;IAE9E,OACIzD,oBAACY,WAAW;MAACuF,SAAS,EAAEjG,OAAO,CAAC0I,KAAK;MAAEC,GAAG,EAAC,cAAc;MAACC,QAAQ,EAAE;IAAI,GACpE9I,oBAACa,MAAM;MAAA,cACQ,WAAW;MAAA,iBACP,IAAI,CAACkI,cAAc;MAClCxE,QAAQ,EAAEA,QAAQ,IAAImE,mBAAmB;MACzCM,IAAI,EAAC,YAAY;MACjBP,MAAM,EAAEA;IAAM,GACV,IAAI,CAACQ,uBAAuB,EAClC,EACFjJ,oBAACa,MAAM;MAAA,cACQ,WAAW;MAAA,iBACP,IAAI,CAACkI,cAAc;MAClCxE,QAAQ,EAAEA,QAAQ,IAAIoE,mBAAmB;MACzCK,IAAI,EAAC,cAAc;MACnBP,MAAM,EAAEA;IAAM,GACV,IAAI,CAACS,uBAAuB,EAClC,CACQ;EAEtB,CAAC;EAEOlH,kCAAW,GAAnB;IACI,IAAMmH,mBAAmB,GAAG3I,kBAAkB,CAAC,IAAI,CAAC0B,KAAK,EAAET,cAAc,EAAE,IAAI,CAAC;IAChF,IAAMoC,aAAa,GAAG,IAAI,CAACC,uBAAuB,EAAE;IAEpD,OACI9D,oBAACe,UAAU;MACPqI,YAAY,EAAE,IAAI,CAAClH,KAAK,CAACkH,YAAY;MACrCC,YAAY,EAAC,KAAK;MAClBC,EAAE,EAAE,IAAI,CAACP,cAAc;MACvBQ,IAAI,EAAE,IAAI,CAACrH,KAAK,CAAC4C,0BAA0B,GAAG,YAAY,GAAGpB;IAAS,GAClEyF,mBAAmB;MAAA,iBACR,IAAI,CAACjH,KAAK,CAACyB,GAAG;MAAA,iBACd,IAAI,CAACzB,KAAK,CAACuB,GAAG;MAAA,iBACdI,aAAa;MAC5B4E,MAAM,EAAE,IAAI,CAAChG,KAAK,CAACZ,sBAAsB,GAAGzB,MAAM,CAACoJ,MAAM,GAAG,IAAI,CAACtH,KAAK,CAACuG,MAAM;MAC7EpG,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBgE,KAAK,EAAE,IAAI,CAACnE,KAAK,CAACmE,KAAK;MACvBoD,WAAW,EAAE,IAAI,CAACvH,KAAK,CAACuH,WAAW;MACnCC,QAAQ,EAAE,IAAI,CAACxH,KAAK,CAACwH,QAAQ;MAC7BzF,OAAO,EAAE,IAAI,CAAC0F,gBAAgB;MAC9BrF,MAAM,EAAE,IAAI,CAACsF,eAAe;MAC5BC,QAAQ,EAAE,IAAI,CAACC,iBAAiB;MAChCC,gBAAgB,EAAE,IAAI,CAACC,oBAAoB;MAC3CC,mBAAmB,EAAE,IAAI,CAACC,uBAAuB;MACjDrF,SAAS,EAAE,IAAI,CAACsF,kBAAkB;MAClCjF,UAAU,EAAE,IAAI,CAACkF,mBAAmB;MACpChF,OAAO,EAAE,IAAI,CAACiF,gBAAgB;MAC9BC,YAAY,EAAE,IAAI,CAACpI,KAAK,CAACoI,YAAY;MACrCnI,KAAK,EAAE,IAAI,CAACM,KAAK,CAACN;IAAK,GACzB;EAEV,CAAC;EAED;EACA;EAEQH,6CAAsB,GAA9B,UAA+BY,SAA6B;IAA5D;IACI,OAAO;MACH;MACAiC,SAAS,EAAE,aAAG;QACV;QACA,IAAI,CAAClD,KAAI,CAACO,KAAK,CAACqC,QAAQ,IAAIlE,IAAI,CAACkK,eAAe,CAACC,GAAG,CAAC/F,OAAO,CAAC,EAAE;UAC3D9C,KAAI,CAAC8I,iBAAiB,CAACD,GAAG,EAAE5H,SAAS,CAAC;;MAE9C,CAAC;MACD8H,WAAW,EAAE,aAAG;QACZ,IAAI,CAAC/I,KAAI,CAACO,KAAK,CAACqC,QAAQ,EAAE;UACtB5C,KAAI,CAAC8I,iBAAiB,CAACD,GAAG,EAAE5H,SAAS,CAAC;UACtCjB,KAAI,CAACgJ,qBAAqB,EAAE;;MAEpC;KACH;EACL,CAAC;EAQO3I,4CAAqB,GAA7B;IAAA;IACI;IACA;IACA;IACAsB,QAAQ,CAACsH,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACpH,oBAAoB,CAAC;IAE/D;IACA;IACA,IAAI,CAACqH,UAAU,CAAC;MACZlJ,KAAI,CAAC0B,UAAU,GAAGyH,MAAM,CAACC,WAAW,CAACpJ,KAAI,CAACqJ,sBAAsB,EAAEhJ,YAAY,CAACiJ,0BAA0B,CAAC;IAC9G,CAAC,EAAEjJ,YAAY,CAACkJ,uBAAuB,CAAC;EAC5C,CAAC;EA6HD;EACA;EAEQlJ,sCAAe,GAAvB,UAAwBwF,aAAqB;;IACzC,IAAI,IAAI,CAACtF,KAAK,CAACC,KAAK,IAAI,IAAI,EAAE;MAC1B,IAAI,CAAC4B,QAAQ,CAAC;QAAE5B,KAAK,EAAEqF;MAAa,CAAE,CAAC;;IAG3C,gBAAI,CAACtF,KAAK,EAACwF,aAAa,mDACpBxE,MAAM,CAAC9B,yBAAyB,CAACoG,aAAa,EAAE,IAAI,CAACtF,KAAK,CAACQ,MAAM,CAAC,CAAC,EACnE8E,aAAa,EACb,IAAI,CAACL,YAAY,CACpB;EACL,CAAC;EAEOnF,qCAAc,GAAtB,UAAuBa,KAAa;IAChC;IACA,IAAMsI,SAAS,GAAG,IAAI,CAAC1I,KAAK,CAACN,KAAK,KAAKH,YAAY,CAAC4D,WAAW,GAAG5D,YAAY,CAACoJ,UAAU,GAAG,IAAI,CAAC3I,KAAK,CAACN,KAAK;IAC5G,IAAMY,SAAS,GAAG,IAAI,CAACsB,kBAAkB,CAAC8G,SAAS,EAAEtI,KAAK,CAAC;IAE3D,IAAIE,SAAS,KAAK,IAAI,CAACN,KAAK,CAACN,KAAK,EAAE;MAChC,IAAI,CAACiC,eAAe,CAACrB,SAAS,CAAC;MAC/B,IAAI,CAACgB,QAAQ,CAAC;QAAEjC,uBAAuB,EAAE,IAAI,CAACI,KAAK,CAACmJ;MAAqB,CAAE,CAAC;;IAGhF;IACA,OAAOtI,SAAS;EACpB,CAAC;EAEOf,wCAAiB,GAAzB,UAA0BY,SAA6B,EAAE0I,iBAA0B,EAAEC,eAAwB;IACnG,SAA6C,IAAI,CAACrJ,KAAK;MAArD+F,aAAa;MAAEpC,aAAa;MAAEE,QAAQ,cAAe;IAE7D,IAAIuF,iBAAiB,IAAIrD,aAAa,IAAI,IAAI,EAAE;MAC5C,OAAOrF,SAAS,GAAGqF,aAAa;KACnC,MAAM,IAAIsD,eAAe,IAAI1F,aAAa,IAAI,IAAI,EAAE;MACjD,OAAOjD,SAAS,GAAGiD,aAAa;KACnC,MAAM;MACH,OAAOjD,SAAS,GAAGmD,QAAS;;EAEpC,CAAC;EAEO/D,yCAAkB,GAA1B,UAA2BG,KAAa,EAAEU,KAAS;IAAT;MAAAA,SAAS;IAAA;IAC/C,OAAOb,YAAY,CAACqC,kBAAkB,CAClClC,KAAK,EACL,IAAI,CAACM,KAAK,CAACV,gBAAgB,EAC3B,IAAI,CAACG,KAAK,CAACuB,GAAG,EACd,IAAI,CAACvB,KAAK,CAACyB,GAAG,EACdd,KAAK,EACL,IAAI,CAACX,KAAK,CAACQ,MAAM,CACpB;EACL,CAAC;EAEOV,kCAAW,GAAnB,UAAoBY,SAA6B,EAAED,CAAyC;IACxF,IAAI,CAACE,KAAK,GAAG,IAAI,CAAC2I,iBAAiB,CAAC5I,SAAS,EAAED,CAAC,CAAC8I,QAAQ,EAAE9I,CAAC,CAAC+I,MAAM,CAAC;IACpE,OAAO,IAAI,CAAC7I,KAAK;EACrB,CAAC;EA1dab,wBAAW,GAAG,UAAG7B,kBAAkB,kBAAe;EAElD6B,wBAAW,GAAG,EAAE;EAEhBA,uBAAU,GAAG,GAAG;EAIhBA,yBAAY,GAAsB;IAC5C8C,0BAA0B,EAAE,IAAI;IAChCoB,cAAc,EAAE5F,QAAQ,CAACwG,KAAK;IAC9B5C,gBAAgB,EAAE,KAAK;IACvB9B,YAAY,EAAEJ,YAAY,CAAC4D,WAAW;IACtCS,KAAK,EAAE,KAAK;IACZ4B,aAAa,EAAE,EAAE;IACjBpC,aAAa,EAAE,GAAG;IAClB7B,gBAAgB,EAAE,KAAK;IACvBqH,oBAAoB,EAAE,KAAK;IAC3BtF,QAAQ,EAAE;GACb;EA8Bc/D,oCAAuB,GAAG,GAAG;EAE7BA,uCAA0B,GAAG,GAAG;EAwanD,mBAAC;CAAA,CA5diC/B,sBAAsB;SAA3C+B,YAAY","names":["classNames","React","AbstractPureComponent2","Classes","DISPLAYNAME_PREFIX","Intent","Keys","Position","refHandler","removeNonHTMLProps","setRef","Utils","Errors","ButtonGroup","Button","ControlGroup","InputGroup","clampValue","getValueOrEmptyValue","isValidNumericKeyboardEvent","isValueNumeric","parseStringToStringNumber","sanitizeNumericInput","toLocaleString","toMaxPrecision","IncrementDirection","NON_HTML_PROPS","__extends","_this","uniqueId","currentImeInputInvalid","shouldSelectAfterUpdate","stepMaxPrecision","NumericInput","getStepMaxPrecision","props","value","defaultValue","inputRef","getButtonEventHandlers","UP","DOWN","state","locale","e","direction","delta","updateDelta","nextValue","incrementValue","onButtonClick","Number","clearTimeouts","clearInterval","intervalId","document","removeEventListener","stopContinuousChange","min","undefined","max","Infinity","valueAsNumber","getCurrentValueAsNumber","setState","selectAllOnFocus","onFocus","clampValueOnBlur","target","handleNextValue","roundAndClampValue","onBlur","disabled","readOnly","keyCode","ARROW_UP","ARROW_DOWN","preventDefault","onKeyDown","allowNumericCharactersOnly","data","sanitizedValue","length","onKeyPress","didPasteEventJustOccur","onPaste","nextState","prevMaxProp","prevMinProp","didMinChange","didMaxChange","didBoundsChange","toString","VALUE_EMPTY","minorStepSize","countDecimalPlaces","stepSize","currentValue","clampedValue","buttonPosition","className","fill","large","containerClasses","NUMERIC_INPUT","_a","LARGE","buttons","renderButtons","LEFT","renderInput","RIGHT","prevProps","prevState","_super","componentDidUpdate","inputElement","setSelectionRange","didLocaleChange","didValueChange","valueToParse","valueAsString","localizedValue","onValueChange","nextProps","console","error","NUMERIC_INPUT_MIN_MAX","NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE","NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE","majorStepSize","NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE","NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND","NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND","valueDoesNotMatch","isNotLocalized","warn","NUMERIC_INPUT_CONTROLLED_VALUE_INVALID","intent","isIncrementDisabled","isDecrementDisabled","FIXED","key","vertical","numericInputId","icon","incrementButtonHandlers","decrementButtonHandlers","inputGroupHtmlProps","asyncControl","autoComplete","id","role","DANGER","leftElement","leftIcon","handleInputFocus","handleInputBlur","onChange","handleInputChange","onCompositionEnd","handleCompositionEnd","onCompositionUpdate","handleCompositionUpdate","handleInputKeyDown","handleInputKeyPress","handleInputPaste","rightElement","isKeyboardClick","evt","handleButtonClick","onMouseDown","startContinuousChange","addEventListener","setTimeout","window","setInterval","handleContinuousChange","CONTINUOUS_CHANGE_INTERVAL","CONTINUOUS_CHANGE_DELAY","currValue","VALUE_ZERO","selectAllOnIncrement","isShiftKeyPressed","isAltKeyPressed","getIncrementDelta","shiftKey","altKey"],"sources":["/Users/mansidabriwal/Documents/Web design class/React-Assignment/react-app/node_modules/@blueprintjs/core/src/components/forms/numericInput.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    AbstractPureComponent2,\n    Classes,\n    DISPLAYNAME_PREFIX,\n    HTMLInputProps,\n    Intent,\n    Keys,\n    Position,\n    refHandler,\n    removeNonHTMLProps,\n    setRef,\n    Utils,\n} from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { ButtonGroup } from \"../button/buttonGroup\";\nimport { Button } from \"../button/buttons\";\nimport { ControlGroup } from \"./controlGroup\";\nimport { InputGroup } from \"./inputGroup\";\nimport type { InputSharedProps } from \"./inputSharedProps\";\nimport {\n    clampValue,\n    getValueOrEmptyValue,\n    isValidNumericKeyboardEvent,\n    isValueNumeric,\n    parseStringToStringNumber,\n    sanitizeNumericInput,\n    toLocaleString,\n    toMaxPrecision,\n} from \"./numericInputUtils\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type NumericInputProps = INumericInputProps;\n/** @deprecated use NumericInputProps */\nexport interface INumericInputProps extends InputSharedProps {\n    /**\n     * Whether to allow only floating-point number characters in the field,\n     * mimicking the native `input[type=\"number\"]`.\n     *\n     * @default true\n     */\n    allowNumericCharactersOnly?: boolean;\n\n    /**\n     * Set this to `true` if you will be controlling the `value` of this input with asynchronous updates.\n     * These may occur if you do not immediately call setState in a parent component with the value from\n     * the `onChange` handler.\n     */\n    asyncControl?: boolean;\n\n    /**\n     * The position of the buttons with respect to the input field.\n     *\n     * @default Position.RIGHT\n     */\n    buttonPosition?: typeof Position.LEFT | typeof Position.RIGHT | \"none\";\n\n    /**\n     * Whether the value should be clamped to `[min, max]` on blur.\n     * The value will be clamped to each bound only if the bound is defined.\n     * Note that native `input[type=\"number\"]` controls do *NOT* clamp on blur.\n     *\n     * @default false\n     */\n    clampValueOnBlur?: boolean;\n\n    /**\n     * In uncontrolled mode, this sets the default value of the input.\n     * Note that this value is only used upon component instantiation and changes to this prop\n     * during the component lifecycle will be ignored.\n     *\n     * @default \"\"\n     */\n    defaultValue?: number | string;\n\n    /**\n     * If set to `true`, the input will display with larger styling.\n     * This is equivalent to setting `Classes.LARGE` via className on the\n     * parent control group and on the child input group.\n     *\n     * @default false\n     */\n    large?: boolean;\n\n    /**\n     * The locale name, which is passed to the component to format the number and allowing to type the number in the specific locale.\n     * [See MDN documentation for more info about browser locale identification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n     *\n     * @default \"\"\n     */\n    locale?: string;\n\n    /**\n     * The increment between successive values when <kbd>shift</kbd> is held.\n     * Pass explicit `null` value to disable this interaction.\n     *\n     * @default 10\n     */\n    majorStepSize?: number | null;\n\n    /** The maximum value of the input. */\n    max?: number;\n\n    /** The minimum value of the input. */\n    min?: number;\n\n    /**\n     * The increment between successive values when <kbd>alt</kbd> is held.\n     * Pass explicit `null` value to disable this interaction.\n     *\n     * @default 0.1\n     */\n    minorStepSize?: number | null;\n\n    /**\n     * Whether the entire text field should be selected on focus.\n     *\n     * @default false\n     */\n    selectAllOnFocus?: boolean;\n\n    /**\n     * Whether the entire text field should be selected on increment.\n     *\n     * @default false\n     */\n    selectAllOnIncrement?: boolean;\n\n    /**\n     * The increment between successive values when no modifier keys are held.\n     *\n     * @default 1\n     */\n    stepSize?: number;\n\n    /**\n     * The value to display in the input field.\n     */\n    value?: number | string;\n\n    /** The callback invoked when the value changes due to a button click. */\n    onButtonClick?(valueAsNumber: number, valueAsString: string): void;\n\n    /** The callback invoked when the value changes due to typing, arrow keys, or button clicks. */\n    onValueChange?(valueAsNumber: number, valueAsString: string, inputElement: HTMLInputElement | null): void;\n}\n\nexport interface INumericInputState {\n    currentImeInputInvalid: boolean;\n    prevMinProp?: number;\n    prevMaxProp?: number;\n    shouldSelectAfterUpdate: boolean;\n    stepMaxPrecision: number;\n    value: string;\n}\n\nenum IncrementDirection {\n    DOWN = -1,\n    UP = +1,\n}\n\nconst NON_HTML_PROPS: Array<keyof NumericInputProps> = [\n    \"allowNumericCharactersOnly\",\n    \"buttonPosition\",\n    \"clampValueOnBlur\",\n    \"className\",\n    \"defaultValue\",\n    \"majorStepSize\",\n    \"minorStepSize\",\n    \"onButtonClick\",\n    \"onValueChange\",\n    \"selectAllOnFocus\",\n    \"selectAllOnIncrement\",\n    \"stepSize\",\n];\n\ntype ButtonEventHandlers = Required<Pick<React.HTMLAttributes<Element>, \"onKeyDown\" | \"onMouseDown\">>;\n\nexport class NumericInput extends AbstractPureComponent2<HTMLInputProps & NumericInputProps, INumericInputState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.NumericInput`;\n\n    public static VALUE_EMPTY = \"\";\n\n    public static VALUE_ZERO = \"0\";\n\n    private numericInputId = Utils.uniqueId(\"numericInput\");\n\n    public static defaultProps: NumericInputProps = {\n        allowNumericCharactersOnly: true,\n        buttonPosition: Position.RIGHT,\n        clampValueOnBlur: false,\n        defaultValue: NumericInput.VALUE_EMPTY,\n        large: false,\n        majorStepSize: 10,\n        minorStepSize: 0.1,\n        selectAllOnFocus: false,\n        selectAllOnIncrement: false,\n        stepSize: 1,\n    };\n\n    public static getDerivedStateFromProps(props: NumericInputProps, state: INumericInputState) {\n        const nextState = {\n            prevMaxProp: props.max,\n            prevMinProp: props.min,\n        };\n\n        const didMinChange = props.min !== state.prevMinProp;\n        const didMaxChange = props.max !== state.prevMaxProp;\n        const didBoundsChange = didMinChange || didMaxChange;\n\n        // in controlled mode, use props.value\n        // in uncontrolled mode, if state.value has not been assigned yet (upon initial mount), use props.defaultValue\n        const value = props.value?.toString() ?? state.value;\n        const stepMaxPrecision = NumericInput.getStepMaxPrecision(props);\n\n        const sanitizedValue =\n            value !== NumericInput.VALUE_EMPTY\n                ? NumericInput.roundAndClampValue(value, stepMaxPrecision, props.min, props.max, 0, props.locale)\n                : NumericInput.VALUE_EMPTY;\n\n        // if a new min and max were provided that cause the existing value to fall\n        // outside of the new bounds, then clamp the value to the new valid range.\n        if (didBoundsChange && sanitizedValue !== state.value) {\n            return { ...nextState, stepMaxPrecision, value: sanitizedValue };\n        }\n        return { ...nextState, stepMaxPrecision, value };\n    }\n\n    private static CONTINUOUS_CHANGE_DELAY = 300;\n\n    private static CONTINUOUS_CHANGE_INTERVAL = 100;\n\n    // Value Helpers\n    // =============\n    private static getStepMaxPrecision(props: HTMLInputProps & NumericInputProps) {\n        if (props.minorStepSize != null) {\n            return Utils.countDecimalPlaces(props.minorStepSize);\n        } else {\n            return Utils.countDecimalPlaces(props.stepSize!);\n        }\n    }\n\n    private static roundAndClampValue(\n        value: string,\n        stepMaxPrecision: number,\n        min: number | undefined,\n        max: number | undefined,\n        delta = 0,\n        locale: string | undefined,\n    ) {\n        if (!isValueNumeric(value, locale)) {\n            return NumericInput.VALUE_EMPTY;\n        }\n        const currentValue = parseStringToStringNumber(value, locale);\n        const nextValue = toMaxPrecision(Number(currentValue) + delta, stepMaxPrecision);\n        const clampedValue = clampValue(nextValue, min, max);\n        return toLocaleString(clampedValue, locale);\n    }\n\n    public state: INumericInputState = {\n        currentImeInputInvalid: false,\n        shouldSelectAfterUpdate: false,\n        stepMaxPrecision: NumericInput.getStepMaxPrecision(this.props),\n        value: getValueOrEmptyValue(this.props.value ?? this.props.defaultValue),\n    };\n\n    // updating these flags need not trigger re-renders, so don't include them in this.state.\n    private didPasteEventJustOccur = false;\n\n    private delta = 0;\n\n    public inputElement: HTMLInputElement | null = null;\n\n    private inputRef: React.Ref<HTMLInputElement> = refHandler(this, \"inputElement\", this.props.inputRef);\n\n    private intervalId?: number;\n\n    private incrementButtonHandlers = this.getButtonEventHandlers(IncrementDirection.UP);\n\n    private decrementButtonHandlers = this.getButtonEventHandlers(IncrementDirection.DOWN);\n\n    private getCurrentValueAsNumber = () => Number(parseStringToStringNumber(this.state.value, this.props.locale));\n\n    public render() {\n        const { buttonPosition, className, fill, large } = this.props;\n        const containerClasses = classNames(Classes.NUMERIC_INPUT, { [Classes.LARGE]: large }, className);\n        const buttons = this.renderButtons();\n        return (\n            <ControlGroup className={containerClasses} fill={fill}>\n                {buttonPosition === Position.LEFT && buttons}\n                {this.renderInput()}\n                {buttonPosition === Position.RIGHT && buttons}\n            </ControlGroup>\n        );\n    }\n\n    public componentDidUpdate(prevProps: NumericInputProps, prevState: INumericInputState) {\n        super.componentDidUpdate(prevProps, prevState);\n\n        if (prevProps.inputRef !== this.props.inputRef) {\n            setRef(prevProps.inputRef, null);\n            this.inputRef = refHandler(this, \"inputElement\", this.props.inputRef);\n            setRef(this.props.inputRef, this.inputElement);\n        }\n\n        if (this.state.shouldSelectAfterUpdate) {\n            this.inputElement?.setSelectionRange(0, this.state.value.length);\n        }\n\n        const didMinChange = this.props.min !== prevProps.min;\n        const didMaxChange = this.props.max !== prevProps.max;\n        const didBoundsChange = didMinChange || didMaxChange;\n        const didLocaleChange = this.props.locale !== prevProps.locale;\n        const didValueChange = this.state.value !== prevState.value;\n\n        if ((didBoundsChange && didValueChange) || (didLocaleChange && prevState.value !== NumericInput.VALUE_EMPTY)) {\n            // we clamped the value due to a bounds change, so we should fire the change callback\n            const valueToParse = didLocaleChange ? prevState.value : this.state.value;\n            const valueAsString = parseStringToStringNumber(valueToParse, prevProps.locale);\n            const localizedValue = toLocaleString(+valueAsString, this.props.locale);\n\n            this.props.onValueChange?.(+valueAsString, localizedValue, this.inputElement);\n        }\n    }\n\n    protected validateProps(nextProps: HTMLInputProps & NumericInputProps) {\n        const { majorStepSize, max, min, minorStepSize, stepSize, value } = nextProps;\n        if (min != null && max != null && min > max) {\n            console.error(Errors.NUMERIC_INPUT_MIN_MAX);\n        }\n        if (stepSize! <= 0) {\n            console.error(Errors.NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE);\n        }\n        if (minorStepSize && minorStepSize <= 0) {\n            console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE);\n        }\n        if (majorStepSize && majorStepSize <= 0) {\n            console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE);\n        }\n        if (minorStepSize && minorStepSize > stepSize!) {\n            console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND);\n        }\n        if (majorStepSize && majorStepSize < stepSize!) {\n            console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND);\n        }\n\n        // controlled mode\n        if (value != null) {\n            const stepMaxPrecision = NumericInput.getStepMaxPrecision(nextProps);\n            const sanitizedValue = NumericInput.roundAndClampValue(\n                value.toString(),\n                stepMaxPrecision,\n                min,\n                max,\n                0,\n                this.props.locale,\n            );\n            const valueDoesNotMatch = sanitizedValue !== value.toString();\n            const localizedValue = toLocaleString(\n                Number(parseStringToStringNumber(value, this.props.locale)),\n                this.props.locale,\n            );\n            const isNotLocalized = sanitizedValue !== localizedValue;\n\n            if (valueDoesNotMatch && isNotLocalized) {\n                console.warn(Errors.NUMERIC_INPUT_CONTROLLED_VALUE_INVALID);\n            }\n        }\n    }\n\n    // Render Helpers\n    // ==============\n\n    private renderButtons() {\n        const { intent, max, min, locale } = this.props;\n        const value = parseStringToStringNumber(this.state.value, locale);\n        const disabled = this.props.disabled || this.props.readOnly;\n        const isIncrementDisabled = max !== undefined && value !== \"\" && +value >= max;\n        const isDecrementDisabled = min !== undefined && value !== \"\" && +value <= min;\n\n        return (\n            <ButtonGroup className={Classes.FIXED} key=\"button-group\" vertical={true}>\n                <Button\n                    aria-label=\"increment\"\n                    aria-controls={this.numericInputId}\n                    disabled={disabled || isIncrementDisabled}\n                    icon=\"chevron-up\"\n                    intent={intent}\n                    {...this.incrementButtonHandlers}\n                />\n                <Button\n                    aria-label=\"decrement\"\n                    aria-controls={this.numericInputId}\n                    disabled={disabled || isDecrementDisabled}\n                    icon=\"chevron-down\"\n                    intent={intent}\n                    {...this.decrementButtonHandlers}\n                />\n            </ButtonGroup>\n        );\n    }\n\n    private renderInput() {\n        const inputGroupHtmlProps = removeNonHTMLProps(this.props, NON_HTML_PROPS, true);\n        const valueAsNumber = this.getCurrentValueAsNumber();\n\n        return (\n            <InputGroup\n                asyncControl={this.props.asyncControl}\n                autoComplete=\"off\"\n                id={this.numericInputId}\n                role={this.props.allowNumericCharactersOnly ? \"spinbutton\" : undefined}\n                {...inputGroupHtmlProps}\n                aria-valuemax={this.props.max}\n                aria-valuemin={this.props.min}\n                aria-valuenow={valueAsNumber}\n                intent={this.state.currentImeInputInvalid ? Intent.DANGER : this.props.intent}\n                inputRef={this.inputRef}\n                large={this.props.large}\n                leftElement={this.props.leftElement}\n                leftIcon={this.props.leftIcon}\n                onFocus={this.handleInputFocus}\n                onBlur={this.handleInputBlur}\n                onChange={this.handleInputChange}\n                onCompositionEnd={this.handleCompositionEnd}\n                onCompositionUpdate={this.handleCompositionUpdate}\n                onKeyDown={this.handleInputKeyDown}\n                onKeyPress={this.handleInputKeyPress}\n                onPaste={this.handleInputPaste}\n                rightElement={this.props.rightElement}\n                value={this.state.value}\n            />\n        );\n    }\n\n    // Callbacks - Buttons\n    // ===================\n\n    private getButtonEventHandlers(direction: IncrementDirection): ButtonEventHandlers {\n        return {\n            // keydown is fired repeatedly when held so it's implicitly continuous\n            onKeyDown: evt => {\n                // eslint-disable-next-line deprecation/deprecation\n                if (!this.props.disabled && Keys.isKeyboardClick(evt.keyCode)) {\n                    this.handleButtonClick(evt, direction);\n                }\n            },\n            onMouseDown: evt => {\n                if (!this.props.disabled) {\n                    this.handleButtonClick(evt, direction);\n                    this.startContinuousChange();\n                }\n            },\n        };\n    }\n\n    private handleButtonClick = (e: React.MouseEvent | React.KeyboardEvent, direction: IncrementDirection) => {\n        const delta = this.updateDelta(direction, e);\n        const nextValue = this.incrementValue(delta);\n        this.props.onButtonClick?.(Number(parseStringToStringNumber(nextValue, this.props.locale)), nextValue);\n    };\n\n    private startContinuousChange() {\n        // The button's onMouseUp event handler doesn't fire if the user\n        // releases outside of the button, so we need to watch all the way\n        // from the top.\n        document.addEventListener(\"mouseup\", this.stopContinuousChange);\n\n        // Initial delay is slightly longer to prevent the user from\n        // accidentally triggering the continuous increment/decrement.\n        this.setTimeout(() => {\n            this.intervalId = window.setInterval(this.handleContinuousChange, NumericInput.CONTINUOUS_CHANGE_INTERVAL);\n        }, NumericInput.CONTINUOUS_CHANGE_DELAY);\n    }\n\n    private stopContinuousChange = () => {\n        this.delta = 0;\n        this.clearTimeouts();\n        clearInterval(this.intervalId);\n        document.removeEventListener(\"mouseup\", this.stopContinuousChange);\n    };\n\n    private handleContinuousChange = () => {\n        // If either min or max prop is set, when reaching the limit\n        // the button will be disabled and stopContinuousChange will be never fired,\n        // hence the need to check on each iteration to properly clear the timeout\n        if (this.props.min !== undefined || this.props.max !== undefined) {\n            const min = this.props.min ?? -Infinity;\n            const max = this.props.max ?? Infinity;\n            const valueAsNumber = this.getCurrentValueAsNumber();\n            if (valueAsNumber <= min || valueAsNumber >= max) {\n                this.stopContinuousChange();\n                return;\n            }\n        }\n        const nextValue = this.incrementValue(this.delta);\n        this.props.onButtonClick?.(Number(parseStringToStringNumber(nextValue, this.props.locale)), nextValue);\n    };\n\n    // Callbacks - Input\n    // =================\n\n    private handleInputFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n        // update this state flag to trigger update for input selection (see componentDidUpdate)\n        this.setState({ shouldSelectAfterUpdate: this.props.selectAllOnFocus! });\n        this.props.onFocus?.(e);\n    };\n\n    private handleInputBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n        // always disable this flag on blur so it's ready for next time.\n        this.setState({ shouldSelectAfterUpdate: false });\n\n        if (this.props.clampValueOnBlur) {\n            const { value } = e.target as HTMLInputElement;\n            this.handleNextValue(this.roundAndClampValue(value));\n        }\n\n        this.props.onBlur?.(e);\n    };\n\n    private handleInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (this.props.disabled || this.props.readOnly) {\n            return;\n        }\n\n        // eslint-disable-next-line deprecation/deprecation\n        const { keyCode } = e;\n\n        let direction: IncrementDirection | undefined;\n\n        if (keyCode === Keys.ARROW_UP) {\n            direction = IncrementDirection.UP;\n        } else if (keyCode === Keys.ARROW_DOWN) {\n            direction = IncrementDirection.DOWN;\n        }\n\n        if (direction !== undefined) {\n            // when the input field has focus, some key combinations will modify\n            // the field's selection range. we'll actually want to select all\n            // text in the field after we modify the value on the following\n            // lines. preventing the default selection behavior lets us do that\n            // without interference.\n            e.preventDefault();\n\n            const delta = this.updateDelta(direction, e);\n            this.incrementValue(delta);\n        }\n\n        this.props.onKeyDown?.(e);\n    };\n\n    private handleCompositionEnd = (e: React.CompositionEvent<HTMLInputElement>) => {\n        if (this.props.allowNumericCharactersOnly) {\n            this.handleNextValue(sanitizeNumericInput(e.data, this.props.locale));\n            this.setState({ currentImeInputInvalid: false });\n        }\n    };\n\n    private handleCompositionUpdate = (e: React.CompositionEvent<HTMLInputElement>) => {\n        if (this.props.allowNumericCharactersOnly) {\n            const { data } = e;\n            const sanitizedValue = sanitizeNumericInput(data, this.props.locale);\n            if (sanitizedValue.length === 0 && data.length > 0) {\n                this.setState({ currentImeInputInvalid: true });\n            } else {\n                this.setState({ currentImeInputInvalid: false });\n            }\n        }\n    };\n\n    private handleInputKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        // we prohibit keystrokes in onKeyPress instead of onKeyDown, because\n        // e.key is not trustworthy in onKeyDown in all browsers.\n        if (this.props.allowNumericCharactersOnly && !isValidNumericKeyboardEvent(e, this.props.locale)) {\n            e.preventDefault();\n        }\n\n        // eslint-disable-next-line deprecation/deprecation\n        this.props.onKeyPress?.(e);\n    };\n\n    private handleInputPaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n        this.didPasteEventJustOccur = true;\n        this.props.onPaste?.(e);\n    };\n\n    private handleInputChange = (e: React.FormEvent) => {\n        const { value } = e.target as HTMLInputElement;\n        let nextValue = value;\n        if (this.props.allowNumericCharactersOnly && this.didPasteEventJustOccur) {\n            this.didPasteEventJustOccur = false;\n            nextValue = sanitizeNumericInput(value, this.props.locale);\n        }\n\n        this.handleNextValue(nextValue);\n        this.setState({ shouldSelectAfterUpdate: false });\n    };\n\n    // Data logic\n    // ==========\n\n    private handleNextValue(valueAsString: string) {\n        if (this.props.value == null) {\n            this.setState({ value: valueAsString });\n        }\n\n        this.props.onValueChange?.(\n            Number(parseStringToStringNumber(valueAsString, this.props.locale)),\n            valueAsString,\n            this.inputElement,\n        );\n    }\n\n    private incrementValue(delta: number) {\n        // pretend we're incrementing from 0 if currValue is empty\n        const currValue = this.state.value === NumericInput.VALUE_EMPTY ? NumericInput.VALUE_ZERO : this.state.value;\n        const nextValue = this.roundAndClampValue(currValue, delta);\n\n        if (nextValue !== this.state.value) {\n            this.handleNextValue(nextValue);\n            this.setState({ shouldSelectAfterUpdate: this.props.selectAllOnIncrement! });\n        }\n\n        // return value used in continuous change updates\n        return nextValue;\n    }\n\n    private getIncrementDelta(direction: IncrementDirection, isShiftKeyPressed: boolean, isAltKeyPressed: boolean) {\n        const { majorStepSize, minorStepSize, stepSize } = this.props;\n\n        if (isShiftKeyPressed && majorStepSize != null) {\n            return direction * majorStepSize;\n        } else if (isAltKeyPressed && minorStepSize != null) {\n            return direction * minorStepSize;\n        } else {\n            return direction * stepSize!;\n        }\n    }\n\n    private roundAndClampValue(value: string, delta = 0) {\n        return NumericInput.roundAndClampValue(\n            value,\n            this.state.stepMaxPrecision,\n            this.props.min,\n            this.props.max,\n            delta,\n            this.props.locale,\n        );\n    }\n\n    private updateDelta(direction: IncrementDirection, e: React.MouseEvent | React.KeyboardEvent) {\n        this.delta = this.getIncrementDelta(direction, e.shiftKey, e.altKey);\n        return this.delta;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}