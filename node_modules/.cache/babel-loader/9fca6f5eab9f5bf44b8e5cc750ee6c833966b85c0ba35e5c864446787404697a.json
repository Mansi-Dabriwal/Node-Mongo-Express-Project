{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\n/**\n * @fileoverview This component is DEPRECATED, and the code is frozen.\n * All changes & bugfixes should be made to OverflowList instead.\n */\n/* eslint-disable deprecation/deprecation */\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Boundary } from \"../../common/boundary\";\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { Position } from \"../../common/position\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { isElementOfType } from \"../../common/utils\";\nimport { Menu } from \"../menu/menu\";\nimport { MenuItem } from \"../menu/menuItem\";\nimport { Popover } from \"../popover/popover\";\n/** @deprecated use `<OverflowList>` for automatic overflow based on available space. */\nvar CollapsibleList = /** @class */function (_super) {\n  __extends(CollapsibleList, _super);\n  function CollapsibleList() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  CollapsibleList.prototype.render = function () {\n    var _this = this;\n    var collapseFrom = this.props.collapseFrom;\n    var childrenLength = React.Children.count(this.props.children);\n    var _a = this.partitionChildren(),\n      visibleChildren = _a[0],\n      collapsedChildren = _a[1];\n    var visibleItems = visibleChildren.map(function (child, index) {\n      var absoluteIndex = collapseFrom === Boundary.START ? childrenLength - 1 - index : index;\n      return React.createElement(\"li\", {\n        className: _this.props.visibleItemClassName,\n        key: absoluteIndex\n      }, _this.props.visibleItemRenderer(child.props, absoluteIndex));\n    });\n    if (collapseFrom === Boundary.START) {\n      // reverse START list so separators appear before items\n      visibleItems.reverse();\n    }\n    // construct dropdown menu for collapsed items\n    var collapsedPopover;\n    if (collapsedChildren.length > 0) {\n      var position = collapseFrom === Boundary.END ? Position.BOTTOM_RIGHT : Position.BOTTOM_LEFT;\n      collapsedPopover = React.createElement(\"li\", {\n        className: this.props.visibleItemClassName\n      }, React.createElement(Popover, __assign({\n        content: React.createElement(Menu, null, collapsedChildren),\n        position: position\n      }, this.props.dropdownProps), this.props.dropdownTarget));\n    }\n    return React.createElement(\"ul\", {\n      className: classNames(Classes.COLLAPSIBLE_LIST, this.props.className)\n    }, collapseFrom === Boundary.START ? collapsedPopover : null, visibleItems, collapseFrom === Boundary.END ? collapsedPopover : null);\n  };\n  // splits the list of children into two arrays: visible and collapsed\n  CollapsibleList.prototype.partitionChildren = function () {\n    var childrenArray = React.Children.map(this.props.children, function (child, index) {\n      if (!isElementOfType(child, MenuItem)) {\n        throw new Error(Errors.COLLAPSIBLE_LIST_INVALID_CHILD);\n      }\n      return React.cloneElement(child, {\n        key: \"visible-\".concat(index)\n      });\n    });\n    if (childrenArray == null) {\n      return [[], []];\n    }\n    if (this.props.collapseFrom === Boundary.START) {\n      // reverse START list so we can always slice visible items from the front of the list\n      childrenArray.reverse();\n    }\n    var visibleItemCount = this.props.visibleItemCount;\n    return [childrenArray.slice(0, visibleItemCount), childrenArray.slice(visibleItemCount)];\n  };\n  CollapsibleList.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".CollapsibleList\");\n  CollapsibleList.defaultProps = {\n    collapseFrom: Boundary.START,\n    visibleItemCount: 3\n  };\n  return CollapsibleList;\n}(React.Component);\nexport { CollapsibleList };","map":{"version":3,"mappings":"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","names":["classNames","React","Boundary","Classes","Errors","Position","DISPLAYNAME_PREFIX","isElementOfType","Menu","MenuItem","Popover","__extends","CollapsibleList","props","childrenLength","Children","count","children","partitionChildren","visibleChildren","collapsedChildren","visibleItems","map","child","index","absoluteIndex","collapseFrom","START","className","_this","visibleItemClassName","key","visibleItemRenderer","reverse","collapsedPopover","length","position","END","BOTTOM_RIGHT","BOTTOM_LEFT","content","dropdownProps","dropdownTarget","COLLAPSIBLE_LIST","childrenArray","Error","COLLAPSIBLE_LIST_INVALID_CHILD","cloneElement","slice","visibleItemCount","Component"],"sources":["/Users/mansidabriwal/Documents/Web design class/React-Assignment/react-app/node_modules/@blueprintjs/core/src/components/collapsible-list/collapsibleList.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview This component is DEPRECATED, and the code is frozen.\n * All changes & bugfixes should be made to OverflowList instead.\n */\n\n/* eslint-disable deprecation/deprecation */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { Boundary } from \"../../common/boundary\";\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { Position } from \"../../common/position\";\nimport { DISPLAYNAME_PREFIX, Props } from \"../../common/props\";\nimport { isElementOfType } from \"../../common/utils\";\nimport { Menu } from \"../menu/menu\";\nimport { MenuItem, MenuItemProps } from \"../menu/menuItem\";\nimport { IPopoverProps, Popover } from \"../popover/popover\";\n\ntype CollapsibleItem = React.ReactElement<MenuItemProps>;\n\n/** @deprecated use OverflowList */\nexport type CollapsibleListProps = ICollapsibleListProps;\n/** @deprecated use OverflowList */\nexport interface ICollapsibleListProps extends Props {\n    /** Contents to collapse. */\n    children?: React.ReactNode;\n\n    /**\n     * Element to render as dropdown target with `CLICK` interaction to show collapsed menu.\n     */\n    dropdownTarget: JSX.Element;\n\n    /**\n     * Props to pass to the dropdown.\n     */\n    dropdownProps?: IPopoverProps;\n\n    /**\n     * Callback invoked to render each visible item. The item will be wrapped in an `li` with\n     * the optional `visibleItemClassName` prop.\n     */\n    visibleItemRenderer: (props: MenuItemProps, index: number) => JSX.Element;\n\n    /**\n     * Which direction the items should collapse from: start or end of the children.\n     *\n     * @default Boundary.START\n     */\n    collapseFrom?: Boundary;\n\n    /**\n     * CSS class names to add to `<li>` tags containing each visible item and the dropdown.\n     */\n    visibleItemClassName?: string;\n\n    /**\n     * Exact number of visible items.\n     *\n     * @default 3\n     */\n    visibleItemCount?: number;\n}\n\n/** @deprecated use `<OverflowList>` for automatic overflow based on available space. */\nexport class CollapsibleList extends React.Component<CollapsibleListProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.CollapsibleList`;\n\n    public static defaultProps: Partial<CollapsibleListProps> = {\n        collapseFrom: Boundary.START,\n        visibleItemCount: 3,\n    };\n\n    public render() {\n        const { collapseFrom } = this.props;\n        const childrenLength = React.Children.count(this.props.children);\n        const [visibleChildren, collapsedChildren] = this.partitionChildren();\n\n        const visibleItems = visibleChildren.map((child: CollapsibleItem, index: number) => {\n            const absoluteIndex = collapseFrom === Boundary.START ? childrenLength - 1 - index : index;\n            return (\n                <li className={this.props.visibleItemClassName} key={absoluteIndex}>\n                    {this.props.visibleItemRenderer(child.props, absoluteIndex)}\n                </li>\n            );\n        });\n        if (collapseFrom === Boundary.START) {\n            // reverse START list so separators appear before items\n            visibleItems.reverse();\n        }\n\n        // construct dropdown menu for collapsed items\n        let collapsedPopover: JSX.Element | undefined;\n        if (collapsedChildren.length > 0) {\n            const position = collapseFrom === Boundary.END ? Position.BOTTOM_RIGHT : Position.BOTTOM_LEFT;\n            collapsedPopover = (\n                <li className={this.props.visibleItemClassName}>\n                    <Popover\n                        content={<Menu>{collapsedChildren}</Menu>}\n                        position={position}\n                        {...this.props.dropdownProps}\n                    >\n                        {this.props.dropdownTarget}\n                    </Popover>\n                </li>\n            );\n        }\n\n        return (\n            <ul className={classNames(Classes.COLLAPSIBLE_LIST, this.props.className)}>\n                {collapseFrom === Boundary.START ? collapsedPopover : null}\n                {visibleItems}\n                {collapseFrom === Boundary.END ? collapsedPopover : null}\n            </ul>\n        );\n    }\n\n    // splits the list of children into two arrays: visible and collapsed\n    private partitionChildren(): [CollapsibleItem[], CollapsibleItem[]] {\n        const childrenArray = React.Children.map(this.props.children, (child: React.ReactNode, index: number) => {\n            if (!isElementOfType(child, MenuItem)) {\n                throw new Error(Errors.COLLAPSIBLE_LIST_INVALID_CHILD);\n            }\n            return React.cloneElement(child as JSX.Element, { key: `visible-${index}` });\n        });\n\n        if (childrenArray == null) {\n            return [[], []];\n        }\n\n        if (this.props.collapseFrom === Boundary.START) {\n            // reverse START list so we can always slice visible items from the front of the list\n            childrenArray.reverse();\n        }\n        const { visibleItemCount } = this.props;\n        return [childrenArray.slice(0, visibleItemCount), childrenArray.slice(visibleItemCount)];\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}