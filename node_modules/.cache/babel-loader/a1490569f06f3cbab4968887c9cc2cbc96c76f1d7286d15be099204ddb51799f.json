{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends, __spreadArray } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { PanelView } from \"./panelView\";\n/** @deprecated use `PanelStack2<T>` */\nvar PanelStack = /** @class */function (_super) {\n  __extends(PanelStack, _super);\n  function PanelStack() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.state = {\n      direction: \"push\",\n      stack: _this.props.stack != null ? _this.props.stack.slice().reverse() : _this.props.initialPanel !== undefined ? [_this.props.initialPanel] : []\n    };\n    _this.renderPanel = function (panel, index) {\n      var _a = _this.props,\n        renderActivePanelOnly = _a.renderActivePanelOnly,\n        _b = _a.showPanelHeader,\n        showPanelHeader = _b === void 0 ? true : _b;\n      var stack = _this.state.stack;\n      // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n      // therefore they would not trigger the \"enter\" transition event as they were entered.\n      // To force the enter event, we want to change the key, but stack.length is not enough\n      // and a single panel should not rerender as long as it's hidden.\n      // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n      // second one, active changes only when the panel becomes or stops being active.\n      var layer = stack.length - index;\n      var key = renderActivePanelOnly ? stack.length : layer;\n      return React.createElement(CSSTransition, {\n        classNames: Classes.PANEL_STACK,\n        key: key,\n        timeout: 400\n      }, React.createElement(PanelView, {\n        onClose: _this.handlePanelClose,\n        onOpen: _this.handlePanelOpen,\n        panel: panel,\n        previousPanel: stack[index + 1],\n        showHeader: showPanelHeader\n      }));\n    };\n    _this.handlePanelClose = function (panel) {\n      var _a, _b;\n      var stack = _this.state.stack;\n      // only remove this panel if it is at the top and not the only one.\n      if (stack[0] !== panel || stack.length <= 1) {\n        return;\n      }\n      (_b = (_a = _this.props).onClose) === null || _b === void 0 ? void 0 : _b.call(_a, panel);\n      if (_this.props.stack == null) {\n        _this.setState(function (state) {\n          return {\n            direction: \"pop\",\n            stack: state.stack.slice(1)\n          };\n        });\n      }\n    };\n    _this.handlePanelOpen = function (panel) {\n      var _a, _b;\n      (_b = (_a = _this.props).onOpen) === null || _b === void 0 ? void 0 : _b.call(_a, panel);\n      if (_this.props.stack == null) {\n        _this.setState(function (state) {\n          return {\n            direction: \"push\",\n            stack: __spreadArray([panel], state.stack, true)\n          };\n        });\n      }\n    };\n    return _this;\n  }\n  PanelStack.prototype.componentDidUpdate = function (prevProps, prevState) {\n    _super.prototype.componentDidUpdate.call(this, prevProps, prevState);\n    // Always update local stack if stack prop changes\n    if (this.props.stack !== prevProps.stack && prevProps.stack != null) {\n      this.setState({\n        stack: this.props.stack.slice().reverse()\n      });\n    }\n    // Only update animation direction if stack length changes\n    var stackLength = this.props.stack != null ? this.props.stack.length : 0;\n    var prevStackLength = prevProps.stack != null ? prevProps.stack.length : 0;\n    if (stackLength !== prevStackLength && prevProps.stack != null) {\n      this.setState({\n        direction: prevProps.stack.length - this.props.stack.length < 0 ? \"push\" : \"pop\"\n      });\n    }\n  };\n  PanelStack.prototype.render = function () {\n    var classes = classNames(Classes.PANEL_STACK, \"\".concat(Classes.PANEL_STACK, \"-\").concat(this.state.direction), this.props.className);\n    return React.createElement(TransitionGroup, {\n      className: classes,\n      component: \"div\"\n    }, this.renderPanels());\n  };\n  PanelStack.prototype.validateProps = function (props) {\n    if (props.initialPanel == null && props.stack == null || props.initialPanel != null && props.stack != null) {\n      console.error(Errors.PANEL_STACK_INITIAL_PANEL_STACK_MUTEX);\n    }\n    if (props.stack != null && props.stack.length === 0) {\n      console.error(Errors.PANEL_STACK_REQUIRES_PANEL);\n    }\n  };\n  PanelStack.prototype.renderPanels = function () {\n    var _a = this.props.renderActivePanelOnly,\n      renderActivePanelOnly = _a === void 0 ? true : _a;\n    var stack = this.state.stack;\n    if (stack.length === 0) {\n      return null;\n    }\n    var panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n    var panelViews = panelsToRender.map(this.renderPanel).reverse();\n    return panelViews;\n  };\n  return PanelStack;\n}(AbstractPureComponent2);\nexport { PanelStack };","map":{"version":3,"mappings":"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","names":["classNames","React","CSSTransition","TransitionGroup","AbstractPureComponent2","Classes","Errors","PanelView","__extends","_this","direction","stack","props","slice","reverse","initialPanel","undefined","panel","index","renderActivePanelOnly","_b","showPanelHeader","state","layer","length","key","PANEL_STACK","timeout","onClose","handlePanelClose","onOpen","handlePanelOpen","previousPanel","showHeader","setState","PanelStack","prevProps","prevState","_super","componentDidUpdate","stackLength","prevStackLength","classes","className","component","renderPanels","console","error","PANEL_STACK_INITIAL_PANEL_STACK_MUTEX","PANEL_STACK_REQUIRES_PANEL","panelsToRender","panelViews","map","renderPanel"],"sources":["/Users/mansidabriwal/Documents/Web design class/React-Assignment/react-app/node_modules/@blueprintjs/core/src/components/panel-stack/panelStack.tsx"],"sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { IProps } from \"../../common/props\";\nimport { IPanel } from \"./panelProps\";\nimport { PanelView } from \"./panelView\";\n\n/* eslint-disable deprecation/deprecation */\n\nexport interface IPanelStackProps extends IProps {\n    /**\n     * The initial panel to show on mount. This panel cannot be removed from the\n     * stack and will appear when the stack is empty.\n     * This prop is only used in uncontrolled mode and is thus mutually\n     * exclusive with the `stack` prop.\n     */\n    initialPanel?: IPanel<any>;\n\n    /**\n     * Callback invoked when the user presses the back button or a panel invokes\n     * the `closePanel()` injected prop method.\n     */\n    onClose?: (removedPanel: IPanel) => void;\n\n    /**\n     * Callback invoked when a panel invokes the `openPanel(panel)` injected\n     * prop method.\n     */\n    onOpen?: (addedPanel: IPanel) => void;\n\n    /**\n     * If false, PanelStack will render all panels in the stack to the DOM, allowing their\n     * React component trees to maintain state as a user navigates through the stack.\n     * Panels other than the currently active one will be invisible.\n     *\n     * @default true\n     */\n    renderActivePanelOnly?: boolean;\n\n    /**\n     * Whether to show the header with the \"back\" button in each panel.\n     *\n     * @default true\n     */\n    showPanelHeader?: boolean;\n\n    /**\n     * The full stack of panels in controlled mode. The last panel in the stack\n     * will be displayed.\n     */\n    stack?: Array<IPanel<any>>;\n}\n\nexport interface IPanelStackState {\n    /** Whether the stack is currently animating the push or pop of a panel. */\n    direction: \"push\" | \"pop\";\n\n    /** The current stack of panels. The first panel in the stack will be displayed. */\n    stack: IPanel[];\n}\n\n/** @deprecated use `PanelStack2<T>` */\n\nexport class PanelStack extends AbstractPureComponent2<IPanelStackProps, IPanelStackState> {\n    public state: IPanelStackState = {\n        direction: \"push\",\n        stack:\n            this.props.stack != null\n                ? this.props.stack.slice().reverse()\n                : this.props.initialPanel !== undefined\n                ? [this.props.initialPanel]\n                : [],\n    };\n\n    public componentDidUpdate(prevProps: IPanelStackProps, prevState: IPanelStackState) {\n        super.componentDidUpdate(prevProps, prevState);\n\n        // Always update local stack if stack prop changes\n        if (this.props.stack !== prevProps.stack && prevProps.stack != null) {\n            this.setState({ stack: this.props.stack!.slice().reverse() });\n        }\n\n        // Only update animation direction if stack length changes\n        const stackLength = this.props.stack != null ? this.props.stack.length : 0;\n        const prevStackLength = prevProps.stack != null ? prevProps.stack.length : 0;\n        if (stackLength !== prevStackLength && prevProps.stack != null) {\n            this.setState({\n                direction: prevProps.stack.length - this.props.stack!.length < 0 ? \"push\" : \"pop\",\n            });\n        }\n    }\n\n    public render() {\n        const classes = classNames(\n            Classes.PANEL_STACK,\n            `${Classes.PANEL_STACK}-${this.state.direction}`,\n            this.props.className,\n        );\n        return (\n            <TransitionGroup className={classes} component=\"div\">\n                {this.renderPanels()}\n            </TransitionGroup>\n        );\n    }\n\n    protected validateProps(props: IPanelStackProps) {\n        if (\n            (props.initialPanel == null && props.stack == null) ||\n            (props.initialPanel != null && props.stack != null)\n        ) {\n            console.error(Errors.PANEL_STACK_INITIAL_PANEL_STACK_MUTEX);\n        }\n        if (props.stack != null && props.stack.length === 0) {\n            console.error(Errors.PANEL_STACK_REQUIRES_PANEL);\n        }\n    }\n\n    private renderPanels() {\n        const { renderActivePanelOnly = true } = this.props;\n        const { stack } = this.state;\n        if (stack.length === 0) {\n            return null;\n        }\n        const panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n        const panelViews = panelsToRender.map(this.renderPanel).reverse();\n        return panelViews;\n    }\n\n    private renderPanel = (panel: IPanel, index: number) => {\n        const { renderActivePanelOnly, showPanelHeader = true } = this.props;\n        const { stack } = this.state;\n\n        // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n        // therefore they would not trigger the \"enter\" transition event as they were entered.\n        // To force the enter event, we want to change the key, but stack.length is not enough\n        // and a single panel should not rerender as long as it's hidden.\n        // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n        // second one, active changes only when the panel becomes or stops being active.\n        const layer = stack.length - index;\n        const key = renderActivePanelOnly ? stack.length : layer;\n\n        return (\n            <CSSTransition classNames={Classes.PANEL_STACK} key={key} timeout={400}>\n                <PanelView\n                    onClose={this.handlePanelClose}\n                    onOpen={this.handlePanelOpen}\n                    panel={panel}\n                    previousPanel={stack[index + 1]}\n                    showHeader={showPanelHeader}\n                />\n            </CSSTransition>\n        );\n    };\n\n    private handlePanelClose = (panel: IPanel) => {\n        const { stack } = this.state;\n        // only remove this panel if it is at the top and not the only one.\n        if (stack[0] !== panel || stack.length <= 1) {\n            return;\n        }\n        this.props.onClose?.(panel);\n        if (this.props.stack == null) {\n            this.setState(state => ({\n                direction: \"pop\",\n                stack: state.stack.slice(1),\n            }));\n        }\n    };\n\n    private handlePanelOpen = (panel: IPanel) => {\n        this.props.onOpen?.(panel);\n        if (this.props.stack == null) {\n            this.setState(state => ({\n                direction: \"push\",\n                stack: [panel, ...state.stack],\n            }));\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}