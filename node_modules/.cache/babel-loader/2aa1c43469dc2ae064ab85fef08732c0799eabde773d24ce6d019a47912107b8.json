{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __spreadArray } from \"tslib\";\nimport * as React from \"react\";\nimport { shallowCompareKeys } from \"../../common/utils\";\nimport { HotkeysDialog2 } from \"../../components/hotkeys/hotkeysDialog2\";\nvar initialHotkeysState = {\n  hasProvider: false,\n  hotkeys: [],\n  isDialogOpen: false\n};\nvar noOpDispatch = function () {\n  return null;\n};\n/**\n * A React context used to register and deregister hotkeys as components are mounted and unmounted in an application.\n * Users should take care to make sure that only _one_ of these is instantiated and used within an application, especially\n * if using global hotkeys.\n *\n * You will likely not be using this HotkeysContext directly, except in cases where you need to get a direct handle on an\n * existing context instance for advanced use cases involving nested HotkeysProviders.\n *\n * For more information, see the [HotkeysProvider documentation](https://blueprintjs.com/docs/#core/context/hotkeys-provider).\n */\nexport var HotkeysContext = React.createContext([initialHotkeysState, noOpDispatch]);\nvar hotkeysReducer = function (state, action) {\n  switch (action.type) {\n    case \"ADD_HOTKEYS\":\n      // only pick up unique hotkeys which haven't been registered already\n      var newUniqueHotkeys = [];\n      for (var _i = 0, _a = action.payload; _i < _a.length; _i++) {\n        var a = _a[_i];\n        var isUnique = true;\n        for (var _b = 0, _c = state.hotkeys; _b < _c.length; _b++) {\n          var b = _c[_b];\n          isUnique && (isUnique = !shallowCompareKeys(a, b, {\n            exclude: [\"onKeyDown\", \"onKeyUp\"]\n          }));\n        }\n        if (isUnique) {\n          newUniqueHotkeys.push(a);\n        }\n      }\n      return __assign(__assign({}, state), {\n        hotkeys: __spreadArray(__spreadArray([], state.hotkeys, true), newUniqueHotkeys, true)\n      });\n    case \"REMOVE_HOTKEYS\":\n      return __assign(__assign({}, state), {\n        hotkeys: state.hotkeys.filter(function (key) {\n          return action.payload.indexOf(key) === -1;\n        })\n      });\n    case \"OPEN_DIALOG\":\n      return __assign(__assign({}, state), {\n        isDialogOpen: true\n      });\n    case \"CLOSE_DIALOG\":\n      return __assign(__assign({}, state), {\n        isDialogOpen: false\n      });\n    default:\n      return state;\n  }\n};\n/**\n * Hotkeys context provider, necessary for the `useHotkeys` hook.\n */\nexport var HotkeysProvider = function (_a) {\n  var _b;\n  var children = _a.children,\n    dialogProps = _a.dialogProps,\n    renderDialog = _a.renderDialog,\n    value = _a.value;\n  var hasExistingContext = value != null;\n  var _c = value !== null && value !== void 0 ? value : React.useReducer(hotkeysReducer, __assign(__assign({}, initialHotkeysState), {\n      hasProvider: true\n    })),\n    state = _c[0],\n    dispatch = _c[1];\n  var handleDialogClose = React.useCallback(function () {\n    return dispatch({\n      type: \"CLOSE_DIALOG\"\n    });\n  }, []);\n  var dialog = (_b = renderDialog === null || renderDialog === void 0 ? void 0 : renderDialog(state, {\n    handleDialogClose: handleDialogClose\n  })) !== null && _b !== void 0 ? _b : React.createElement(HotkeysDialog2, __assign({}, dialogProps, {\n    isOpen: state.isDialogOpen,\n    hotkeys: state.hotkeys,\n    onClose: handleDialogClose\n  }));\n  // if we are working with an existing context, we don't need to generate our own dialog\n  return React.createElement(HotkeysContext.Provider, {\n    value: [state, dispatch]\n  }, children, hasExistingContext ? undefined : dialog);\n};","map":{"version":3,"mappings":"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","names":["React","shallowCompareKeys","HotkeysDialog2","initialHotkeysState","hasProvider","hotkeys","isDialogOpen","noOpDispatch","HotkeysContext","createContext","hotkeysReducer","state","action","type","newUniqueHotkeys","_a","payload","_i","a","isUnique","_c","_b","b","exclude","push","filter","indexOf","key","HotkeysProvider","children","dialogProps","renderDialog","value","hasExistingContext","useReducer","dispatch","handleDialogClose","useCallback","dialog","isOpen","onClose","Provider","undefined"],"sources":["/Users/mansidabriwal/Documents/Web design class/React-Assignment/react-app/node_modules/@blueprintjs/core/src/context/hotkeys/hotkeysProvider.tsx"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { shallowCompareKeys } from \"../../common/utils\";\nimport { HotkeysDialog2, HotkeysDialog2Props } from \"../../components/hotkeys/hotkeysDialog2\";\nimport { HotkeyConfig } from \"../../hooks\";\n\ninterface HotkeysContextState {\n    /**\n     * Whether the context instance is being used within a tree which has a <HotkeysProvider>.\n     * It's technically ok if this is false, but not recommended, since that means any hotkeys\n     * bound with that context instance will not show up in the hotkeys help dialog.\n     */\n    hasProvider: boolean;\n\n    /** List of hotkeys accessible in the current scope, registered by currently mounted components, can be global or local. */\n    hotkeys: HotkeyConfig[];\n\n    /** Whether the global hotkeys dialog is open. */\n    isDialogOpen: boolean;\n}\n\ntype HotkeysAction =\n    | { type: \"ADD_HOTKEYS\" | \"REMOVE_HOTKEYS\"; payload: HotkeyConfig[] }\n    | { type: \"CLOSE_DIALOG\" | \"OPEN_DIALOG\" };\n\nexport type HotkeysContextInstance = [HotkeysContextState, React.Dispatch<HotkeysAction>];\n\nconst initialHotkeysState: HotkeysContextState = { hasProvider: false, hotkeys: [], isDialogOpen: false };\nconst noOpDispatch: React.Dispatch<HotkeysAction> = () => null;\n\n/**\n * A React context used to register and deregister hotkeys as components are mounted and unmounted in an application.\n * Users should take care to make sure that only _one_ of these is instantiated and used within an application, especially\n * if using global hotkeys.\n *\n * You will likely not be using this HotkeysContext directly, except in cases where you need to get a direct handle on an\n * existing context instance for advanced use cases involving nested HotkeysProviders.\n *\n * For more information, see the [HotkeysProvider documentation](https://blueprintjs.com/docs/#core/context/hotkeys-provider).\n */\nexport const HotkeysContext = React.createContext<HotkeysContextInstance>([initialHotkeysState, noOpDispatch]);\n\nconst hotkeysReducer = (state: HotkeysContextState, action: HotkeysAction) => {\n    switch (action.type) {\n        case \"ADD_HOTKEYS\":\n            // only pick up unique hotkeys which haven't been registered already\n            const newUniqueHotkeys = [];\n            for (const a of action.payload) {\n                let isUnique = true;\n                for (const b of state.hotkeys) {\n                    isUnique &&= !shallowCompareKeys(a, b, { exclude: [\"onKeyDown\", \"onKeyUp\"] });\n                }\n                if (isUnique) {\n                    newUniqueHotkeys.push(a);\n                }\n            }\n            return {\n                ...state,\n                hotkeys: [...state.hotkeys, ...newUniqueHotkeys],\n            };\n        case \"REMOVE_HOTKEYS\":\n            return {\n                ...state,\n                hotkeys: state.hotkeys.filter(key => action.payload.indexOf(key) === -1),\n            };\n        case \"OPEN_DIALOG\":\n            return { ...state, isDialogOpen: true };\n        case \"CLOSE_DIALOG\":\n            return { ...state, isDialogOpen: false };\n        default:\n            return state;\n    }\n};\n\nexport interface HotkeysProviderProps {\n    /** The component subtree which will have access to this hotkeys context. */\n    children: React.ReactChild;\n\n    /** Optional props to customize the rendered hotkeys dialog. */\n    dialogProps?: Partial<Omit<HotkeysDialog2Props, \"hotkeys\">>;\n\n    /** If provided, this dialog render function will be used in place of the default implementation. */\n    renderDialog?: (state: HotkeysContextState, contextActions: { handleDialogClose: () => void }) => JSX.Element;\n\n    /** If provided, we will use this context instance instead of generating our own. */\n    value?: HotkeysContextInstance;\n}\n\n/**\n * Hotkeys context provider, necessary for the `useHotkeys` hook.\n */\nexport const HotkeysProvider = ({ children, dialogProps, renderDialog, value }: HotkeysProviderProps) => {\n    const hasExistingContext = value != null;\n    const [state, dispatch] = value ?? React.useReducer(hotkeysReducer, { ...initialHotkeysState, hasProvider: true });\n    const handleDialogClose = React.useCallback(() => dispatch({ type: \"CLOSE_DIALOG\" }), []);\n\n    const dialog = renderDialog?.(state, { handleDialogClose }) ?? (\n        <HotkeysDialog2\n            {...dialogProps}\n            isOpen={state.isDialogOpen}\n            hotkeys={state.hotkeys}\n            onClose={handleDialogClose}\n        />\n    );\n\n    // if we are working with an existing context, we don't need to generate our own dialog\n    return (\n        <HotkeysContext.Provider value={[state, dispatch]}>\n            {children}\n            {hasExistingContext ? undefined : dialog}\n        </HotkeysContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}