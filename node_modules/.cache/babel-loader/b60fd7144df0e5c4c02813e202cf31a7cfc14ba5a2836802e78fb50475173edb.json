{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Classes } from \"../../common\";\nimport { Dialog } from \"../../components\";\nimport { Hotkey } from \"./hotkey\";\nimport { Hotkeys } from \"./hotkeys\";\n/**\n * The delay before showing or hiding the dialog. Should be long enough to\n * allow all registered hotkey listeners to execute first.\n */\nvar DELAY_IN_MS = 10;\nvar HotkeysDialog = /** @class */function () {\n  function HotkeysDialog() {\n    var _this = this;\n    this.componentProps = {\n      globalHotkeysGroup: \"Global hotkeys\"\n    };\n    this.container = null;\n    this.hotkeysQueue = [];\n    this.isDialogShowing = false;\n    this.show = function () {\n      _this.isDialogShowing = true;\n      _this.render();\n    };\n    this.hide = function () {\n      _this.isDialogShowing = false;\n      _this.render();\n    };\n  }\n  HotkeysDialog.prototype.render = function () {\n    if (this.container == null) {\n      this.container = this.getContainer();\n    }\n    ReactDOM.render(this.renderComponent(), this.container);\n  };\n  HotkeysDialog.prototype.unmount = function () {\n    if (this.container != null) {\n      ReactDOM.unmountComponentAtNode(this.container);\n      this.container.remove();\n      this.container = null;\n    }\n  };\n  /**\n   * Because hotkeys can be registered globally and locally and because\n   * event ordering cannot be guaranteed, we use this debouncing method to\n   * allow all hotkey listeners to fire and add their hotkeys to the dialog.\n   *\n   * 10msec after the last listener adds their hotkeys, we render the dialog\n   * and clear the queue.\n   */\n  HotkeysDialog.prototype.enqueueHotkeysForDisplay = function (hotkeys) {\n    this.hotkeysQueue.push(hotkeys);\n    // reset timeout for debounce\n    window.clearTimeout(this.showTimeoutToken);\n    this.showTimeoutToken = window.setTimeout(this.show, DELAY_IN_MS);\n  };\n  HotkeysDialog.prototype.hideAfterDelay = function () {\n    window.clearTimeout(this.hideTimeoutToken);\n    this.hideTimeoutToken = window.setTimeout(this.hide, DELAY_IN_MS);\n  };\n  HotkeysDialog.prototype.isShowing = function () {\n    return this.isDialogShowing;\n  };\n  HotkeysDialog.prototype.getContainer = function () {\n    if (this.container == null) {\n      this.container = document.createElement(\"div\");\n      this.container.classList.add(Classes.PORTAL);\n      document.body.appendChild(this.container);\n    }\n    return this.container;\n  };\n  HotkeysDialog.prototype.renderComponent = function () {\n    return React.createElement(Dialog, __assign({}, this.componentProps, {\n      className: classNames(Classes.HOTKEY_DIALOG, this.componentProps.className),\n      isOpen: this.isDialogShowing,\n      onClose: this.hide\n    }), React.createElement(\"div\", {\n      className: Classes.DIALOG_BODY\n    }, this.renderHotkeys()));\n  };\n  HotkeysDialog.prototype.renderHotkeys = function () {\n    var _this = this;\n    var hotkeys = this.emptyHotkeyQueue();\n    var elements = hotkeys.map(function (hotkey, index) {\n      var group = hotkey.global === true && hotkey.group == null ? _this.componentProps.globalHotkeysGroup : hotkey.group;\n      return React.createElement(Hotkey, __assign({\n        key: index\n      }, hotkey, {\n        group: group\n      }));\n    });\n    return React.createElement(Hotkeys, null, elements);\n  };\n  HotkeysDialog.prototype.emptyHotkeyQueue = function () {\n    // flatten then empty the hotkeys queue\n    var hotkeys = this.hotkeysQueue.reduce(function (arr, queued) {\n      return arr.concat(queued);\n    }, []);\n    this.hotkeysQueue.length = 0;\n    return hotkeys;\n  };\n  return HotkeysDialog;\n}();\n// singleton instance\nvar HOTKEYS_DIALOG = new HotkeysDialog();\nexport function isHotkeysDialogShowing() {\n  return HOTKEYS_DIALOG.isShowing();\n}\nexport function setHotkeysDialogProps(props) {\n  for (var key in props) {\n    if (props.hasOwnProperty(key)) {\n      HOTKEYS_DIALOG.componentProps[key] = props[key];\n    }\n  }\n}\nexport function showHotkeysDialog(hotkeys) {\n  HOTKEYS_DIALOG.enqueueHotkeysForDisplay(hotkeys);\n}\nexport function hideHotkeysDialog() {\n  HOTKEYS_DIALOG.hide();\n}\n/**\n * Use this function instead of `hideHotkeysDialog` if you need to ensure that all hotkey listeners\n * have time to execute with the dialog in a consistent open state. This can avoid flickering the\n * dialog between open and closedÂ states as successive listeners fire.\n */\nexport function hideHotkeysDialogAfterDelay() {\n  HOTKEYS_DIALOG.hideAfterDelay();\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAU,MAAM,YAAY;AACnC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAO,KAAKC,QAAQ,MAAM,WAAW;AAErC,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,MAAM,QAAqB,kBAAkB;AACtD,SAASC,MAAM,QAAsB,UAAU;AAC/C,SAASC,OAAO,QAAQ,WAAW;AAUnC;;;;AAIA,IAAMC,WAAW,GAAG,EAAE;AAEtB;EAAA;IAAA;IACW,mBAAc,GAAG;MACpBC,kBAAkB,EAAE;KACO;IAEvB,cAAS,GAAuB,IAAI;IAEpC,iBAAY,GAAG,EAAsB;IAErC,oBAAe,GAAG,KAAK;IA0CxB,SAAI,GAAG;MACVC,KAAI,CAACC,eAAe,GAAG,IAAI;MAC3BD,KAAI,CAACE,MAAM,EAAE;IACjB,CAAC;IAEM,SAAI,GAAG;MACVF,KAAI,CAACC,eAAe,GAAG,KAAK;MAC5BD,KAAI,CAACE,MAAM,EAAE;IACjB,CAAC;EA8CL;EA1FWC,8BAAM,GAAb;IACI,IAAI,IAAI,CAACC,SAAS,IAAI,IAAI,EAAE;MACxB,IAAI,CAACA,SAAS,GAAG,IAAI,CAACC,YAAY,EAAE;;IAExCZ,QAAQ,CAACS,MAAM,CAAC,IAAI,CAACI,eAAe,EAAE,EAAE,IAAI,CAACF,SAAS,CAAC;EAC3D,CAAC;EAEMD,+BAAO,GAAd;IACI,IAAI,IAAI,CAACC,SAAS,IAAI,IAAI,EAAE;MACxBX,QAAQ,CAACc,sBAAsB,CAAC,IAAI,CAACH,SAAS,CAAC;MAC/C,IAAI,CAACA,SAAS,CAACI,MAAM,EAAE;MACvB,IAAI,CAACJ,SAAS,GAAG,IAAI;;EAE7B,CAAC;EAED;;;;;;;;EAQOD,gDAAwB,GAA/B,UAAgCM,OAAuB;IACnD,IAAI,CAACC,YAAY,CAACC,IAAI,CAACF,OAAO,CAAC;IAE/B;IACAG,MAAM,CAACC,YAAY,CAAC,IAAI,CAACC,gBAAgB,CAAC;IAC1C,IAAI,CAACA,gBAAgB,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAACC,IAAI,EAAElB,WAAW,CAAC;EACrE,CAAC;EAEMK,sCAAc,GAArB;IACIS,MAAM,CAACC,YAAY,CAAC,IAAI,CAACI,gBAAgB,CAAC;IAC1C,IAAI,CAACA,gBAAgB,GAAGL,MAAM,CAACG,UAAU,CAAC,IAAI,CAACG,IAAI,EAAEpB,WAAW,CAAC;EACrE,CAAC;EAYMK,iCAAS,GAAhB;IACI,OAAO,IAAI,CAACF,eAAe;EAC/B,CAAC;EAEOE,oCAAY,GAApB;IACI,IAAI,IAAI,CAACC,SAAS,IAAI,IAAI,EAAE;MACxB,IAAI,CAACA,SAAS,GAAGe,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MAC9C,IAAI,CAAChB,SAAS,CAACiB,SAAS,CAACC,GAAG,CAAC5B,OAAO,CAAC6B,MAAM,CAAC;MAC5CJ,QAAQ,CAACK,IAAI,CAACC,WAAW,CAAC,IAAI,CAACrB,SAAS,CAAC;;IAE7C,OAAO,IAAI,CAACA,SAAS;EACzB,CAAC;EAEOD,uCAAe,GAAvB;IACI,OACIX,oBAACG,MAAM,eACC,IAAI,CAAC+B,cAAc;MACvBC,SAAS,EAAEpC,UAAU,CAACG,OAAO,CAACkC,aAAa,EAAE,IAAI,CAACF,cAAc,CAACC,SAAS,CAAC;MAC3EE,MAAM,EAAE,IAAI,CAAC5B,eAAe;MAC5B6B,OAAO,EAAE,IAAI,CAACZ;IAAI,IAElB1B;MAAKmC,SAAS,EAAEjC,OAAO,CAACqC;IAAW,GAAG,IAAI,CAACC,aAAa,EAAE,CAAO,CAC5D;EAEjB,CAAC;EAEO7B,qCAAa,GAArB;IAAA;IACI,IAAMM,OAAO,GAAG,IAAI,CAACwB,gBAAgB,EAAE;IACvC,IAAMC,QAAQ,GAAGzB,OAAO,CAAC0B,GAAG,CAAC,UAACC,MAAM,EAAEC,KAAK;MACvC,IAAMC,KAAK,GACPF,MAAM,CAACG,MAAM,KAAK,IAAI,IAAIH,MAAM,CAACE,KAAK,IAAI,IAAI,GAAGtC,KAAI,CAAC0B,cAAc,CAAC3B,kBAAkB,GAAGqC,MAAM,CAACE,KAAK;MAE1G,OAAO9C,oBAACI,MAAM;QAAC4C,GAAG,EAAEH;MAAK,GAAMD,MAAM;QAAEE,KAAK,EAAEA;MAAK,GAAI;IAC3D,CAAC,CAAC;IAEF,OAAO9C,oBAACK,OAAO,QAAEqC,QAAQ,CAAW;EACxC,CAAC;EAEO/B,wCAAgB,GAAxB;IACI;IACA,IAAMM,OAAO,GAAG,IAAI,CAACC,YAAY,CAAC+B,MAAM,CAAC,UAACC,GAAG,EAAEC,MAAM;MAAK,UAAG,CAACC,MAAM,CAACD,MAAM,CAAC;IAAlB,CAAkB,EAAE,EAAE,CAAC;IACjF,IAAI,CAACjC,YAAY,CAACmC,MAAM,GAAG,CAAC;IAC5B,OAAOpC,OAAO;EAClB,CAAC;EACL,oBAAC;AAAD,CAAC,EAzGD;AA2GA;AACA,IAAMqC,cAAc,GAAG,IAAI3C,aAAa,EAAE;AAE1C,OAAM,SAAU4C,sBAAsB;EAClC,OAAOD,cAAc,CAACE,SAAS,EAAE;AACrC;AAEA,OAAM,SAAUC,qBAAqB,CAACC,KAAmC;EACrE,KAAK,IAAMV,GAAG,IAAIU,KAAK,EAAE;IACrB,IAAIA,KAAK,CAACC,cAAc,CAACX,GAAG,CAAC,EAAE;MAC1BM,cAAc,CAACpB,cAAsB,CAACc,GAAG,CAAC,GAAIU,KAAa,CAACV,GAAG,CAAC;;;AAG7E;AAEA,OAAM,SAAUY,iBAAiB,CAAC3C,OAAuB;EACrDqC,cAAc,CAACO,wBAAwB,CAAC5C,OAAO,CAAC;AACpD;AAEA,OAAM,SAAU6C,iBAAiB;EAC7BR,cAAc,CAAC5B,IAAI,EAAE;AACzB;AAEA;;;;;AAKA,OAAM,SAAUqC,2BAA2B;EACvCT,cAAc,CAACU,cAAc,EAAE;AACnC","names":["classNames","React","ReactDOM","Classes","Dialog","Hotkey","Hotkeys","DELAY_IN_MS","globalHotkeysGroup","_this","isDialogShowing","render","HotkeysDialog","container","getContainer","renderComponent","unmountComponentAtNode","remove","hotkeys","hotkeysQueue","push","window","clearTimeout","showTimeoutToken","setTimeout","show","hideTimeoutToken","hide","document","createElement","classList","add","PORTAL","body","appendChild","componentProps","className","HOTKEY_DIALOG","isOpen","onClose","DIALOG_BODY","renderHotkeys","emptyHotkeyQueue","elements","map","hotkey","index","group","global","key","reduce","arr","queued","concat","length","HOTKEYS_DIALOG","isHotkeysDialogShowing","isShowing","setHotkeysDialogProps","props","hasOwnProperty","showHotkeysDialog","enqueueHotkeysForDisplay","hideHotkeysDialog","hideHotkeysDialogAfterDelay","hideAfterDelay"],"sources":["/Users/mansidabriwal/Documents/Web design class/React-Assignment/react-app/node_modules/@blueprintjs/core/src/components/hotkeys/hotkeysDialog.tsx"],"sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { Classes } from \"../../common\";\nimport { Dialog, DialogProps } from \"../../components\";\nimport { Hotkey, IHotkeyProps } from \"./hotkey\";\nimport { Hotkeys } from \"./hotkeys\";\n\nexport interface IHotkeysDialogProps extends DialogProps {\n    /**\n     * This string displayed as the group name in the hotkeys dialog for all\n     * global hotkeys.\n     */\n    globalHotkeysGroup?: string;\n}\n\n/**\n * The delay before showing or hiding the dialog. Should be long enough to\n * allow all registered hotkey listeners to execute first.\n */\nconst DELAY_IN_MS = 10;\n\nclass HotkeysDialog {\n    public componentProps = {\n        globalHotkeysGroup: \"Global hotkeys\",\n    } as any as IHotkeysDialogProps;\n\n    private container: HTMLElement | null = null;\n\n    private hotkeysQueue = [] as IHotkeyProps[][];\n\n    private isDialogShowing = false;\n\n    private showTimeoutToken?: number;\n\n    private hideTimeoutToken?: number;\n\n    public render() {\n        if (this.container == null) {\n            this.container = this.getContainer();\n        }\n        ReactDOM.render(this.renderComponent(), this.container);\n    }\n\n    public unmount() {\n        if (this.container != null) {\n            ReactDOM.unmountComponentAtNode(this.container);\n            this.container.remove();\n            this.container = null;\n        }\n    }\n\n    /**\n     * Because hotkeys can be registered globally and locally and because\n     * event ordering cannot be guaranteed, we use this debouncing method to\n     * allow all hotkey listeners to fire and add their hotkeys to the dialog.\n     *\n     * 10msec after the last listener adds their hotkeys, we render the dialog\n     * and clear the queue.\n     */\n    public enqueueHotkeysForDisplay(hotkeys: IHotkeyProps[]) {\n        this.hotkeysQueue.push(hotkeys);\n\n        // reset timeout for debounce\n        window.clearTimeout(this.showTimeoutToken);\n        this.showTimeoutToken = window.setTimeout(this.show, DELAY_IN_MS);\n    }\n\n    public hideAfterDelay() {\n        window.clearTimeout(this.hideTimeoutToken);\n        this.hideTimeoutToken = window.setTimeout(this.hide, DELAY_IN_MS);\n    }\n\n    public show = () => {\n        this.isDialogShowing = true;\n        this.render();\n    };\n\n    public hide = () => {\n        this.isDialogShowing = false;\n        this.render();\n    };\n\n    public isShowing() {\n        return this.isDialogShowing;\n    }\n\n    private getContainer() {\n        if (this.container == null) {\n            this.container = document.createElement(\"div\");\n            this.container.classList.add(Classes.PORTAL);\n            document.body.appendChild(this.container);\n        }\n        return this.container;\n    }\n\n    private renderComponent() {\n        return (\n            <Dialog\n                {...this.componentProps}\n                className={classNames(Classes.HOTKEY_DIALOG, this.componentProps.className)}\n                isOpen={this.isDialogShowing}\n                onClose={this.hide}\n            >\n                <div className={Classes.DIALOG_BODY}>{this.renderHotkeys()}</div>\n            </Dialog>\n        );\n    }\n\n    private renderHotkeys() {\n        const hotkeys = this.emptyHotkeyQueue();\n        const elements = hotkeys.map((hotkey, index) => {\n            const group =\n                hotkey.global === true && hotkey.group == null ? this.componentProps.globalHotkeysGroup : hotkey.group;\n\n            return <Hotkey key={index} {...hotkey} group={group} />;\n        });\n\n        return <Hotkeys>{elements}</Hotkeys>;\n    }\n\n    private emptyHotkeyQueue() {\n        // flatten then empty the hotkeys queue\n        const hotkeys = this.hotkeysQueue.reduce((arr, queued) => arr.concat(queued), []);\n        this.hotkeysQueue.length = 0;\n        return hotkeys;\n    }\n}\n\n// singleton instance\nconst HOTKEYS_DIALOG = new HotkeysDialog();\n\nexport function isHotkeysDialogShowing() {\n    return HOTKEYS_DIALOG.isShowing();\n}\n\nexport function setHotkeysDialogProps(props: Partial<IHotkeysDialogProps>) {\n    for (const key in props) {\n        if (props.hasOwnProperty(key)) {\n            (HOTKEYS_DIALOG.componentProps as any)[key] = (props as any)[key];\n        }\n    }\n}\n\nexport function showHotkeysDialog(hotkeys: IHotkeyProps[]) {\n    HOTKEYS_DIALOG.enqueueHotkeysForDisplay(hotkeys);\n}\n\nexport function hideHotkeysDialog() {\n    HOTKEYS_DIALOG.hide();\n}\n\n/**\n * Use this function instead of `hideHotkeysDialog` if you need to ensure that all hotkey listeners\n * have time to execute with the dialog in a consistent open state. This can avoid flickering the\n * dialog between open and closedÂ states as successive listeners fire.\n */\nexport function hideHotkeysDialogAfterDelay() {\n    HOTKEYS_DIALOG.hideAfterDelay();\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}