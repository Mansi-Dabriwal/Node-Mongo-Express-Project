{"ast":null,"code":"/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes, Utils } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { Dialog } from \"./dialog\";\nimport { DialogStep } from \"./dialogStep\";\nimport { DialogStepButton } from \"./dialogStepButton\";\nvar PADDING_BOTTOM = 0;\nvar MIN_WIDTH = 800;\nvar MultistepDialog = /** @class */function (_super) {\n  __extends(MultistepDialog, _super);\n  function MultistepDialog() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.state = _this.getInitialIndexFromProps(_this.props);\n    _this.renderDialogStep = function (step, index) {\n      var _a;\n      var stepNumber = index + 1;\n      var hasBeenViewed = _this.state.lastViewedIndex >= index;\n      var currentlySelected = _this.state.selectedIndex === index;\n      return React.createElement(\"div\", {\n        className: classNames(Classes.DIALOG_STEP_CONTAINER, (_a = {}, _a[Classes.ACTIVE] = currentlySelected, _a[Classes.DIALOG_STEP_VIEWED] = hasBeenViewed, _a)),\n        key: index\n      }, React.createElement(\"div\", {\n        className: Classes.DIALOG_STEP,\n        onClick: _this.handleClickDialogStep(index)\n      }, React.createElement(\"div\", {\n        className: Classes.DIALOG_STEP_ICON\n      }, stepNumber), React.createElement(\"div\", {\n        className: Classes.DIALOG_STEP_TITLE\n      }, step.props.title)));\n    };\n    _this.handleClickDialogStep = function (index) {\n      if (index > _this.state.lastViewedIndex) {\n        return;\n      }\n      return _this.getDialogStepChangeHandler(index);\n    };\n    return _this;\n  }\n  MultistepDialog.prototype.render = function () {\n    var _a;\n    var _b = this.props,\n      className = _b.className,\n      navigationPosition = _b.navigationPosition,\n      showCloseButtonInFooter = _b.showCloseButtonInFooter,\n      isCloseButtonShown = _b.isCloseButtonShown,\n      otherProps = __rest(_b, [\"className\", \"navigationPosition\", \"showCloseButtonInFooter\", \"isCloseButtonShown\"]);\n    // Only one close button should be displayed. If the footer close button\n    // is shown, we need to ensure the dialog close button is not displayed.\n    var isCloseButtonVisible = !showCloseButtonInFooter && isCloseButtonShown;\n    return React.createElement(Dialog, __assign({\n      isCloseButtonShown: isCloseButtonVisible\n    }, otherProps, {\n      className: classNames((_a = {}, _a[Classes.MULTISTEP_DIALOG_NAV_RIGHT] = navigationPosition === \"right\", _a[Classes.MULTISTEP_DIALOG_NAV_TOP] = navigationPosition === \"top\", _a), className),\n      style: this.getDialogStyle()\n    }), React.createElement(\"div\", {\n      className: Classes.MULTISTEP_DIALOG_PANELS\n    }, this.renderLeftPanel(), this.maybeRenderRightPanel()));\n  };\n  MultistepDialog.prototype.componentDidUpdate = function (prevProps) {\n    if ((prevProps.resetOnClose || prevProps.initialStepIndex !== this.props.initialStepIndex) && !prevProps.isOpen && this.props.isOpen) {\n      this.setState(this.getInitialIndexFromProps(this.props));\n    }\n  };\n  MultistepDialog.prototype.getDialogStyle = function () {\n    return __assign({\n      minWidth: MIN_WIDTH,\n      paddingBottom: PADDING_BOTTOM\n    }, this.props.style);\n  };\n  MultistepDialog.prototype.renderLeftPanel = function () {\n    return React.createElement(\"div\", {\n      className: Classes.MULTISTEP_DIALOG_LEFT_PANEL\n    }, this.getDialogStepChildren().filter(isDialogStepElement).map(this.renderDialogStep));\n  };\n  MultistepDialog.prototype.maybeRenderRightPanel = function () {\n    var steps = this.getDialogStepChildren();\n    if (steps.length <= this.state.selectedIndex) {\n      return null;\n    }\n    var _a = steps[this.state.selectedIndex].props,\n      className = _a.className,\n      panel = _a.panel,\n      panelClassName = _a.panelClassName;\n    return React.createElement(\"div\", {\n      className: classNames(Classes.MULTISTEP_DIALOG_RIGHT_PANEL, className, panelClassName)\n    }, panel, this.renderFooter());\n  };\n  MultistepDialog.prototype.renderFooter = function () {\n    var _a = this.props,\n      closeButtonProps = _a.closeButtonProps,\n      isCloseButtonShown = _a.isCloseButtonShown,\n      showCloseButtonInFooter = _a.showCloseButtonInFooter,\n      onClose = _a.onClose;\n    var isFooterCloseButtonVisible = showCloseButtonInFooter && isCloseButtonShown;\n    var maybeCloseButton = !isFooterCloseButtonVisible ? undefined : React.createElement(DialogStepButton, __assign({\n      text: \"Close\",\n      onClick: onClose\n    }, closeButtonProps));\n    return React.createElement(\"div\", {\n      className: Classes.MULTISTEP_DIALOG_FOOTER\n    }, maybeCloseButton, React.createElement(\"div\", {\n      className: Classes.DIALOG_FOOTER_ACTIONS\n    }, this.renderButtons()));\n  };\n  MultistepDialog.prototype.renderButtons = function () {\n    var _a, _b;\n    var selectedIndex = this.state.selectedIndex;\n    var steps = this.getDialogStepChildren();\n    var buttons = [];\n    if (this.state.selectedIndex > 0) {\n      var backButtonProps = (_a = steps[selectedIndex].props.backButtonProps) !== null && _a !== void 0 ? _a : this.props.backButtonProps;\n      buttons.push(React.createElement(DialogStepButton, __assign({\n        key: \"back\",\n        onClick: this.getDialogStepChangeHandler(selectedIndex - 1),\n        text: \"Back\"\n      }, backButtonProps)));\n    }\n    if (selectedIndex === this.getDialogStepChildren().length - 1) {\n      buttons.push(React.createElement(DialogStepButton, __assign({\n        intent: \"primary\",\n        key: \"final\",\n        text: \"Submit\"\n      }, this.props.finalButtonProps)));\n    } else {\n      var nextButtonProps = (_b = steps[selectedIndex].props.nextButtonProps) !== null && _b !== void 0 ? _b : this.props.nextButtonProps;\n      buttons.push(React.createElement(DialogStepButton, __assign({\n        intent: \"primary\",\n        key: \"next\",\n        onClick: this.getDialogStepChangeHandler(selectedIndex + 1),\n        text: \"Next\"\n      }, nextButtonProps)));\n    }\n    return buttons;\n  };\n  MultistepDialog.prototype.getDialogStepChangeHandler = function (index) {\n    var _this = this;\n    return function (event) {\n      if (_this.props.onChange !== undefined) {\n        var steps = _this.getDialogStepChildren();\n        var prevStepId = steps[_this.state.selectedIndex].props.id;\n        var newStepId = steps[index].props.id;\n        _this.props.onChange(newStepId, prevStepId, event);\n      }\n      _this.setState({\n        lastViewedIndex: Math.max(_this.state.lastViewedIndex, index),\n        selectedIndex: index\n      });\n    };\n  };\n  /** Filters children to only `<DialogStep>`s */\n  MultistepDialog.prototype.getDialogStepChildren = function (props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n    return React.Children.toArray(props.children).filter(isDialogStepElement);\n  };\n  MultistepDialog.prototype.getInitialIndexFromProps = function (props) {\n    if (props.initialStepIndex !== undefined) {\n      var boundedInitialIndex = Math.max(0, Math.min(props.initialStepIndex, this.getDialogStepChildren(props).length - 1));\n      return {\n        lastViewedIndex: boundedInitialIndex,\n        selectedIndex: boundedInitialIndex\n      };\n    } else {\n      return {\n        lastViewedIndex: 0,\n        selectedIndex: 0\n      };\n    }\n  };\n  MultistepDialog.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".MultistepDialog\");\n  MultistepDialog.defaultProps = {\n    canOutsideClickClose: true,\n    isOpen: false,\n    navigationPosition: \"left\",\n    resetOnClose: true,\n    showCloseButtonInFooter: false\n  };\n  return MultistepDialog;\n}(AbstractPureComponent2);\nexport { MultistepDialog };\nfunction isDialogStepElement(child) {\n  return Utils.isElementOfType(child, DialogStep);\n}","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Classes","Utils","DISPLAYNAME_PREFIX","Dialog","DialogStep","DialogStepButton","PADDING_BOTTOM","MIN_WIDTH","__extends","_this","getInitialIndexFromProps","props","step","index","stepNumber","hasBeenViewed","state","lastViewedIndex","currentlySelected","selectedIndex","className","DIALOG_STEP_CONTAINER","_a","ACTIVE","DIALOG_STEP_VIEWED","key","DIALOG_STEP","onClick","handleClickDialogStep","DIALOG_STEP_ICON","DIALOG_STEP_TITLE","title","getDialogStepChangeHandler","MultistepDialog","_b","navigationPosition","showCloseButtonInFooter","isCloseButtonShown","otherProps","isCloseButtonVisible","MULTISTEP_DIALOG_NAV_RIGHT","MULTISTEP_DIALOG_NAV_TOP","style","getDialogStyle","MULTISTEP_DIALOG_PANELS","renderLeftPanel","maybeRenderRightPanel","prevProps","resetOnClose","initialStepIndex","isOpen","setState","minWidth","paddingBottom","MULTISTEP_DIALOG_LEFT_PANEL","getDialogStepChildren","filter","isDialogStepElement","map","renderDialogStep","steps","length","panel","panelClassName","MULTISTEP_DIALOG_RIGHT_PANEL","renderFooter","closeButtonProps","onClose","isFooterCloseButtonVisible","maybeCloseButton","undefined","text","MULTISTEP_DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","renderButtons","buttons","backButtonProps","push","intent","finalButtonProps","nextButtonProps","event","onChange","prevStepId","id","newStepId","Math","max","Children","toArray","children","boundedInitialIndex","min","canOutsideClickClose","child","isElementOfType"],"sources":["/Users/mansidabriwal/Documents/Web design class/React-Assignment/react-app/node_modules/@blueprintjs/core/src/components/dialog/multistepDialog.tsx"],"sourcesContent":["/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes, Position, Utils } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { Dialog, DialogProps } from \"./dialog\";\nimport { DialogStep, DialogStepId, DialogStepProps } from \"./dialogStep\";\nimport { DialogStepButton, DialogStepButtonProps } from \"./dialogStepButton\";\n\ntype DialogStepElement = React.ReactElement<DialogStepProps & { children: React.ReactNode }>;\n\nexport type MultistepDialogNavPosition = typeof Position.TOP | typeof Position.LEFT | typeof Position.RIGHT;\n\n// eslint-disable-next-line deprecation/deprecation\nexport type MultistepDialogProps = IMultistepDialogProps;\n/** @deprecated use MultistepDialogProps */\nexport interface IMultistepDialogProps extends DialogProps {\n    /**\n     * Props for the back button.\n     */\n    backButtonProps?: DialogStepButtonProps;\n\n    /** Dialog steps. */\n    children?: React.ReactNode;\n\n    /**\n     * Props for the close button that appears in the footer when there is no title.\n     */\n    closeButtonProps?: DialogStepButtonProps;\n\n    /**\n     * Props for the button to display on the final step.\n     */\n    finalButtonProps?: DialogStepButtonProps;\n\n    /**\n     * Position of the step navigation within the dialog.\n     *\n     * @default \"left\"\n     */\n    navigationPosition?: MultistepDialogNavPosition;\n\n    /**\n     * Props for the next button.\n     */\n    nextButtonProps?: DialogStepButtonProps;\n\n    /**\n     * A callback that is invoked when the user selects a different step by clicking on back, next, or a step itself.\n     */\n    onChange?(\n        newDialogStepId: DialogStepId,\n        prevDialogStepId: DialogStepId | undefined,\n        event: React.MouseEvent<HTMLElement>,\n    ): void;\n\n    /**\n     * Whether to reset the dialog state to its initial state on close.\n     * By default, closing the dialog will reset its state.\n     *\n     * @default true\n     */\n    resetOnClose?: boolean;\n\n    /**\n     * Whether the footer close button is shown. The button will only appear if\n     * `isCloseButtonShown` is `true`. The close button in the dialog title will\n     * not be shown when this is `true`.\n     *\n     * @default false\n     */\n    showCloseButtonInFooter?: boolean;\n\n    /**\n     * A 0 indexed initial step to start off on, to start in the middle of the dialog, for example.\n     * If the provided index exceeds the number of steps, it defaults to the last step.\n     * If a negative index is provided, it defaults to the first step.\n     */\n    initialStepIndex?: number;\n}\n\ninterface IMultistepDialogState {\n    lastViewedIndex: number;\n    selectedIndex: number;\n}\n\nconst PADDING_BOTTOM = 0;\n\nconst MIN_WIDTH = 800;\n\nexport class MultistepDialog extends AbstractPureComponent2<MultistepDialogProps, IMultistepDialogState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.MultistepDialog`;\n\n    public static defaultProps: Partial<MultistepDialogProps> = {\n        canOutsideClickClose: true,\n        isOpen: false,\n        navigationPosition: \"left\",\n        resetOnClose: true,\n        showCloseButtonInFooter: false,\n    };\n\n    public state: IMultistepDialogState = this.getInitialIndexFromProps(this.props);\n\n    public render() {\n        const { className, navigationPosition, showCloseButtonInFooter, isCloseButtonShown, ...otherProps } =\n            this.props;\n\n        // Only one close button should be displayed. If the footer close button\n        // is shown, we need to ensure the dialog close button is not displayed.\n        const isCloseButtonVisible = !showCloseButtonInFooter && isCloseButtonShown;\n\n        return (\n            <Dialog\n                isCloseButtonShown={isCloseButtonVisible}\n                {...otherProps}\n                className={classNames(\n                    {\n                        [Classes.MULTISTEP_DIALOG_NAV_RIGHT]: navigationPosition === \"right\",\n                        [Classes.MULTISTEP_DIALOG_NAV_TOP]: navigationPosition === \"top\",\n                    },\n                    className,\n                )}\n                style={this.getDialogStyle()}\n            >\n                <div className={Classes.MULTISTEP_DIALOG_PANELS}>\n                    {this.renderLeftPanel()}\n                    {this.maybeRenderRightPanel()}\n                </div>\n            </Dialog>\n        );\n    }\n\n    public componentDidUpdate(prevProps: MultistepDialogProps) {\n        if (\n            (prevProps.resetOnClose || prevProps.initialStepIndex !== this.props.initialStepIndex) &&\n            !prevProps.isOpen &&\n            this.props.isOpen\n        ) {\n            this.setState(this.getInitialIndexFromProps(this.props));\n        }\n    }\n\n    private getDialogStyle() {\n        return { minWidth: MIN_WIDTH, paddingBottom: PADDING_BOTTOM, ...this.props.style };\n    }\n\n    private renderLeftPanel() {\n        return (\n            <div className={Classes.MULTISTEP_DIALOG_LEFT_PANEL}>\n                {this.getDialogStepChildren().filter(isDialogStepElement).map(this.renderDialogStep)}\n            </div>\n        );\n    }\n\n    private renderDialogStep = (step: DialogStepElement, index: number) => {\n        const stepNumber = index + 1;\n        const hasBeenViewed = this.state.lastViewedIndex >= index;\n        const currentlySelected = this.state.selectedIndex === index;\n        return (\n            <div\n                className={classNames(Classes.DIALOG_STEP_CONTAINER, {\n                    [Classes.ACTIVE]: currentlySelected,\n                    [Classes.DIALOG_STEP_VIEWED]: hasBeenViewed,\n                })}\n                key={index}\n            >\n                <div className={Classes.DIALOG_STEP} onClick={this.handleClickDialogStep(index)}>\n                    <div className={Classes.DIALOG_STEP_ICON}>{stepNumber}</div>\n                    <div className={Classes.DIALOG_STEP_TITLE}>{step.props.title}</div>\n                </div>\n            </div>\n        );\n    };\n\n    private handleClickDialogStep = (index: number) => {\n        if (index > this.state.lastViewedIndex) {\n            return;\n        }\n        return this.getDialogStepChangeHandler(index);\n    };\n\n    private maybeRenderRightPanel() {\n        const steps = this.getDialogStepChildren();\n        if (steps.length <= this.state.selectedIndex) {\n            return null;\n        }\n\n        const { className, panel, panelClassName } = steps[this.state.selectedIndex].props;\n        return (\n            <div className={classNames(Classes.MULTISTEP_DIALOG_RIGHT_PANEL, className, panelClassName)}>\n                {panel}\n                {this.renderFooter()}\n            </div>\n        );\n    }\n\n    private renderFooter() {\n        const { closeButtonProps, isCloseButtonShown, showCloseButtonInFooter, onClose } = this.props;\n        const isFooterCloseButtonVisible = showCloseButtonInFooter && isCloseButtonShown;\n        const maybeCloseButton = !isFooterCloseButtonVisible ? undefined : (\n            <DialogStepButton text=\"Close\" onClick={onClose} {...closeButtonProps} />\n        );\n        return (\n            <div className={Classes.MULTISTEP_DIALOG_FOOTER}>\n                {maybeCloseButton}\n                <div className={Classes.DIALOG_FOOTER_ACTIONS}>{this.renderButtons()}</div>\n            </div>\n        );\n    }\n\n    private renderButtons() {\n        const { selectedIndex } = this.state;\n        const steps = this.getDialogStepChildren();\n        const buttons = [];\n\n        if (this.state.selectedIndex > 0) {\n            const backButtonProps = steps[selectedIndex].props.backButtonProps ?? this.props.backButtonProps;\n            buttons.push(\n                <DialogStepButton\n                    key=\"back\"\n                    onClick={this.getDialogStepChangeHandler(selectedIndex - 1)}\n                    text=\"Back\"\n                    {...backButtonProps}\n                />,\n            );\n        }\n\n        if (selectedIndex === this.getDialogStepChildren().length - 1) {\n            buttons.push(\n                <DialogStepButton intent=\"primary\" key=\"final\" text=\"Submit\" {...this.props.finalButtonProps} />,\n            );\n        } else {\n            const nextButtonProps = steps[selectedIndex].props.nextButtonProps ?? this.props.nextButtonProps;\n            buttons.push(\n                <DialogStepButton\n                    intent=\"primary\"\n                    key=\"next\"\n                    onClick={this.getDialogStepChangeHandler(selectedIndex + 1)}\n                    text=\"Next\"\n                    {...nextButtonProps}\n                />,\n            );\n        }\n\n        return buttons;\n    }\n\n    private getDialogStepChangeHandler(index: number) {\n        return (event: React.MouseEvent<HTMLElement>) => {\n            if (this.props.onChange !== undefined) {\n                const steps = this.getDialogStepChildren();\n                const prevStepId = steps[this.state.selectedIndex].props.id;\n                const newStepId = steps[index].props.id;\n                this.props.onChange(newStepId, prevStepId, event);\n            }\n            this.setState({\n                lastViewedIndex: Math.max(this.state.lastViewedIndex, index),\n                selectedIndex: index,\n            });\n        };\n    }\n\n    /** Filters children to only `<DialogStep>`s */\n    private getDialogStepChildren(props: MultistepDialogProps & { children?: React.ReactNode } = this.props) {\n        return React.Children.toArray(props.children).filter(isDialogStepElement);\n    }\n\n    private getInitialIndexFromProps(props: MultistepDialogProps) {\n        if (props.initialStepIndex !== undefined) {\n            const boundedInitialIndex = Math.max(\n                0,\n                Math.min(props.initialStepIndex, this.getDialogStepChildren(props).length - 1),\n            );\n            return {\n                lastViewedIndex: boundedInitialIndex,\n                selectedIndex: boundedInitialIndex,\n            };\n        } else {\n            return {\n                lastViewedIndex: 0,\n                selectedIndex: 0,\n            };\n        }\n    }\n}\n\nfunction isDialogStepElement(child: any): child is DialogStepElement {\n    return Utils.isElementOfType(child, DialogStep);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}