{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var KeyCodes = {\n  8: \"backspace\",\n  9: \"tab\",\n  13: \"enter\",\n  20: \"capslock\",\n  27: \"esc\",\n  32: \"space\",\n  33: \"pageup\",\n  34: \"pagedown\",\n  35: \"end\",\n  36: \"home\",\n  37: \"left\",\n  38: \"up\",\n  39: \"right\",\n  40: \"down\",\n  45: \"ins\",\n  46: \"del\",\n  // number keys\n  48: \"0\",\n  49: \"1\",\n  50: \"2\",\n  51: \"3\",\n  52: \"4\",\n  53: \"5\",\n  54: \"6\",\n  55: \"7\",\n  56: \"8\",\n  57: \"9\",\n  // alphabet\n  65: \"a\",\n  66: \"b\",\n  67: \"c\",\n  68: \"d\",\n  69: \"e\",\n  70: \"f\",\n  71: \"g\",\n  72: \"h\",\n  73: \"i\",\n  74: \"j\",\n  75: \"k\",\n  76: \"l\",\n  77: \"m\",\n  78: \"n\",\n  79: \"o\",\n  80: \"p\",\n  81: \"q\",\n  82: \"r\",\n  83: \"s\",\n  84: \"t\",\n  85: \"u\",\n  86: \"v\",\n  87: \"w\",\n  88: \"x\",\n  89: \"y\",\n  90: \"z\",\n  // punctuation\n  106: \"*\",\n  107: \"+\",\n  109: \"-\",\n  110: \".\",\n  111: \"/\",\n  186: \";\",\n  187: \"=\",\n  188: \",\",\n  189: \"-\",\n  190: \".\",\n  191: \"/\",\n  192: \"`\",\n  219: \"[\",\n  220: \"\\\\\",\n  221: \"]\",\n  222: \"'\"\n};\nexport var Modifiers = {\n  16: \"shift\",\n  17: \"ctrl\",\n  18: \"alt\",\n  91: \"meta\",\n  93: \"meta\",\n  224: \"meta\"\n};\nexport var ModifierBitMasks = {\n  alt: 1,\n  ctrl: 2,\n  meta: 4,\n  shift: 8\n};\nexport var Aliases = {\n  cmd: \"meta\",\n  command: \"meta\",\n  escape: \"esc\",\n  minus: \"-\",\n  mod: isMac() ? \"meta\" : \"ctrl\",\n  option: \"alt\",\n  plus: \"+\",\n  return: \"enter\",\n  win: \"meta\"\n};\n// alph sorting is unintuitive here\n// tslint:disable object-literal-sort-keys\nexport var ShiftKeys = {\n  \"~\": \"`\",\n  \"!\": \"1\",\n  \"@\": \"2\",\n  \"#\": \"3\",\n  $: \"4\",\n  \"%\": \"5\",\n  \"^\": \"6\",\n  \"&\": \"7\",\n  \"*\": \"8\",\n  \"(\": \"9\",\n  \")\": \"0\",\n  _: \"-\",\n  \"+\": \"=\",\n  \"{\": \"[\",\n  \"}\": \"]\",\n  \"|\": \"\\\\\",\n  \":\": \";\",\n  '\"': \"'\",\n  \"<\": \",\",\n  \">\": \".\",\n  \"?\": \"/\"\n};\n// tslint:enable object-literal-sort-keys\n// Function keys\nfor (var i = 1; i <= 12; ++i) {\n  KeyCodes[111 + i] = \"f\" + i;\n}\n// Numpad\nfor (var i = 0; i <= 9; ++i) {\n  KeyCodes[96 + i] = \"num\" + i.toString();\n}\nexport function comboMatches(a, b) {\n  return a.modifiers === b.modifiers && a.key === b.key;\n}\n/**\n * Converts a key combo string into a key combo object. Key combos include\n * zero or more modifier keys, such as `shift` or `alt`, and exactly one\n * action key, such as `A`, `enter`, or `left`.\n *\n * For action keys that require a shift, e.g. `@` or `|`, we inlude the\n * necessary `shift` modifier and automatically convert the action key to the\n * unshifted version. For example, `@` is equivalent to `shift+2`.\n */\nexport var parseKeyCombo = function (combo) {\n  var pieces = combo.replace(/\\s/g, \"\").toLowerCase().split(\"+\");\n  var modifiers = 0;\n  var key;\n  for (var _i = 0, pieces_1 = pieces; _i < pieces_1.length; _i++) {\n    var piece = pieces_1[_i];\n    if (piece === \"\") {\n      throw new Error(\"Failed to parse key combo \\\"\".concat(combo, \"\\\".\\n                Valid key combos look like \\\"cmd + plus\\\", \\\"shift+p\\\", or \\\"!\\\"\"));\n    }\n    if (Aliases[piece] != null) {\n      piece = Aliases[piece];\n    }\n    if (ModifierBitMasks[piece] != null) {\n      modifiers += ModifierBitMasks[piece];\n    } else if (ShiftKeys[piece] != null) {\n      modifiers += ModifierBitMasks.shift;\n      key = ShiftKeys[piece];\n    } else {\n      key = piece.toLowerCase();\n    }\n  }\n  return {\n    modifiers: modifiers,\n    key: key\n  };\n};\n/**\n * Converts a keyboard event into a valid combo prop string\n */\nexport var getKeyComboString = function (e) {\n  var keys = [];\n  // modifiers first\n  if (e.ctrlKey) {\n    keys.push(\"ctrl\");\n  }\n  if (e.altKey) {\n    keys.push(\"alt\");\n  }\n  if (e.shiftKey) {\n    keys.push(\"shift\");\n  }\n  if (e.metaKey) {\n    keys.push(\"meta\");\n  }\n  // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n  // eslint-disable-next-line deprecation/deprecation\n  var which = e.which;\n  if (Modifiers[which] != null) {\n    // no action key\n  } else if (KeyCodes[which] != null) {\n    keys.push(KeyCodes[which]);\n  } else {\n    // eslint-disable-next-line id-blacklist\n    keys.push(String.fromCharCode(which).toLowerCase());\n  }\n  // join keys with plusses\n  return keys.join(\" + \");\n};\n/**\n * Determines the key combo object from the given keyboard event. Again, a key\n * combo includes zero or more modifiers (represented by a bitmask) and one\n * action key, which we determine from the `e.which` property of the keyboard\n * event.\n */\nexport var getKeyCombo = function (e) {\n  var key;\n  // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n  // eslint-disable-next-line deprecation/deprecation\n  var which = e.which;\n  if (Modifiers[which] != null) {\n    // keep key null\n  } else if (KeyCodes[which] != null) {\n    key = KeyCodes[which];\n  } else {\n    // eslint-disable-next-line id-blacklist\n    key = String.fromCharCode(which).toLowerCase();\n  }\n  var modifiers = 0;\n  if (e.altKey) {\n    modifiers += ModifierBitMasks.alt;\n  }\n  if (e.ctrlKey) {\n    modifiers += ModifierBitMasks.ctrl;\n  }\n  if (e.metaKey) {\n    modifiers += ModifierBitMasks.meta;\n  }\n  if (e.shiftKey) {\n    modifiers += ModifierBitMasks.shift;\n  }\n  return {\n    modifiers: modifiers,\n    key: key\n  };\n};\n/**\n * Splits a key combo string into its constituent key values and looks up\n * aliases, such as `return` -> `enter`.\n *\n * Unlike the parseKeyCombo method, this method does NOT convert shifted\n * action keys. So `\"@\"` will NOT be converted to `[\"shift\", \"2\"]`).\n */\nexport var normalizeKeyCombo = function (combo, platformOverride) {\n  var keys = combo.replace(/\\s/g, \"\").split(\"+\");\n  return keys.map(function (key) {\n    var keyName = Aliases[key] != null ? Aliases[key] : key;\n    return keyName === \"meta\" ? isMac(platformOverride) ? \"cmd\" : \"ctrl\" : keyName;\n  });\n};\nfunction isMac(platformOverride) {\n  // HACKHACK: see https://github.com/palantir/blueprint/issues/5174\n  // eslint-disable-next-line deprecation/deprecation\n  var platform = platformOverride !== null && platformOverride !== void 0 ? platformOverride : typeof navigator !== \"undefined\" ? navigator.platform : undefined;\n  return platform === undefined ? false : /Mac|iPod|iPhone|iPad/.test(platform);\n}","map":{"version":3,"mappings":"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","names":["KeyCodes","Modifiers","ModifierBitMasks","alt","ctrl","meta","shift","Aliases","cmd","command","escape","minus","mod","isMac","option","plus","return","win","ShiftKeys","$","_","i","toString","comboMatches","a","b","modifiers","key","parseKeyCombo","combo","pieces","replace","toLowerCase","split","pieces_1","_i","piece","Error","getKeyComboString","e","keys","ctrlKey","push","altKey","shiftKey","metaKey","which","String","fromCharCode","join","getKeyCombo","normalizeKeyCombo","platformOverride","map","keyName","platform","navigator","undefined","test"],"sources":["/Users/mansidabriwal/Documents/Web design class/React-Assignment/react-app/node_modules/@blueprintjs/core/src/components/hotkeys/hotkeyParser.ts"],"sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface IKeyCodeTable {\n    [code: number]: string;\n}\n\nexport interface IKeyCodeReverseTable {\n    [key: string]: number;\n}\n\nexport interface IKeyMap {\n    [key: string]: string;\n}\n\nexport const KeyCodes: IKeyCodeTable = {\n    8: \"backspace\",\n    9: \"tab\",\n    13: \"enter\",\n    20: \"capslock\",\n    27: \"esc\",\n    32: \"space\",\n    33: \"pageup\",\n    34: \"pagedown\",\n    35: \"end\",\n    36: \"home\",\n    37: \"left\",\n    38: \"up\",\n    39: \"right\",\n    40: \"down\",\n    45: \"ins\",\n    46: \"del\",\n    // number keys\n    48: \"0\",\n    49: \"1\",\n    50: \"2\",\n    51: \"3\",\n    52: \"4\",\n    53: \"5\",\n    54: \"6\",\n    55: \"7\",\n    56: \"8\",\n    57: \"9\",\n    // alphabet\n    65: \"a\",\n    66: \"b\",\n    67: \"c\",\n    68: \"d\",\n    69: \"e\",\n    70: \"f\",\n    71: \"g\",\n    72: \"h\",\n    73: \"i\",\n    74: \"j\",\n    75: \"k\",\n    76: \"l\",\n    77: \"m\",\n    78: \"n\",\n    79: \"o\",\n    80: \"p\",\n    81: \"q\",\n    82: \"r\",\n    83: \"s\",\n    84: \"t\",\n    85: \"u\",\n    86: \"v\",\n    87: \"w\",\n    88: \"x\",\n    89: \"y\",\n    90: \"z\",\n    // punctuation\n    106: \"*\",\n    107: \"+\",\n    109: \"-\",\n    110: \".\",\n    111: \"/\",\n    186: \";\",\n    187: \"=\",\n    188: \",\",\n    189: \"-\",\n    190: \".\",\n    191: \"/\",\n    192: \"`\",\n    219: \"[\",\n    220: \"\\\\\",\n    221: \"]\",\n    222: \"'\",\n};\n\nexport const Modifiers: IKeyCodeTable = {\n    16: \"shift\",\n    17: \"ctrl\",\n    18: \"alt\",\n    91: \"meta\",\n    93: \"meta\",\n    224: \"meta\",\n};\n\nexport const ModifierBitMasks: IKeyCodeReverseTable = {\n    alt: 1,\n    ctrl: 2,\n    meta: 4,\n    shift: 8,\n};\n\nexport const Aliases: IKeyMap = {\n    cmd: \"meta\",\n    command: \"meta\",\n    escape: \"esc\",\n    minus: \"-\",\n    mod: isMac() ? \"meta\" : \"ctrl\",\n    option: \"alt\",\n    plus: \"+\",\n    return: \"enter\",\n    win: \"meta\",\n};\n\n// alph sorting is unintuitive here\n// tslint:disable object-literal-sort-keys\nexport const ShiftKeys: IKeyMap = {\n    \"~\": \"`\",\n    \"!\": \"1\",\n    \"@\": \"2\",\n    \"#\": \"3\",\n    $: \"4\",\n    \"%\": \"5\",\n    \"^\": \"6\",\n    \"&\": \"7\",\n    \"*\": \"8\",\n    \"(\": \"9\",\n    \")\": \"0\",\n    _: \"-\",\n    \"+\": \"=\",\n    \"{\": \"[\",\n    \"}\": \"]\",\n    \"|\": \"\\\\\",\n    \":\": \";\",\n    '\"': \"'\",\n    \"<\": \",\",\n    \">\": \".\",\n    \"?\": \"/\",\n};\n// tslint:enable object-literal-sort-keys\n\n// Function keys\nfor (let i = 1; i <= 12; ++i) {\n    KeyCodes[111 + i] = \"f\" + i;\n}\n\n// Numpad\nfor (let i = 0; i <= 9; ++i) {\n    KeyCodes[96 + i] = \"num\" + i.toString();\n}\n\nexport interface IKeyCombo {\n    key?: string;\n    modifiers: number;\n}\n\nexport function comboMatches(a: IKeyCombo, b: IKeyCombo) {\n    return a.modifiers === b.modifiers && a.key === b.key;\n}\n\n/**\n * Converts a key combo string into a key combo object. Key combos include\n * zero or more modifier keys, such as `shift` or `alt`, and exactly one\n * action key, such as `A`, `enter`, or `left`.\n *\n * For action keys that require a shift, e.g. `@` or `|`, we inlude the\n * necessary `shift` modifier and automatically convert the action key to the\n * unshifted version. For example, `@` is equivalent to `shift+2`.\n */\nexport const parseKeyCombo = (combo: string): IKeyCombo => {\n    const pieces = combo.replace(/\\s/g, \"\").toLowerCase().split(\"+\");\n    let modifiers = 0;\n    let key: string | undefined;\n    for (let piece of pieces) {\n        if (piece === \"\") {\n            throw new Error(`Failed to parse key combo \"${combo}\".\n                Valid key combos look like \"cmd + plus\", \"shift+p\", or \"!\"`);\n        }\n\n        if (Aliases[piece] != null) {\n            piece = Aliases[piece];\n        }\n\n        if (ModifierBitMasks[piece] != null) {\n            modifiers += ModifierBitMasks[piece];\n        } else if (ShiftKeys[piece] != null) {\n            modifiers += ModifierBitMasks.shift;\n            key = ShiftKeys[piece];\n        } else {\n            key = piece.toLowerCase();\n        }\n    }\n    return { modifiers, key };\n};\n\n/**\n * Converts a keyboard event into a valid combo prop string\n */\nexport const getKeyComboString = (e: KeyboardEvent): string => {\n    const keys = [] as string[];\n\n    // modifiers first\n    if (e.ctrlKey) {\n        keys.push(\"ctrl\");\n    }\n    if (e.altKey) {\n        keys.push(\"alt\");\n    }\n    if (e.shiftKey) {\n        keys.push(\"shift\");\n    }\n    if (e.metaKey) {\n        keys.push(\"meta\");\n    }\n\n    // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n    // eslint-disable-next-line deprecation/deprecation\n    const { which } = e;\n    if (Modifiers[which] != null) {\n        // no action key\n    } else if (KeyCodes[which] != null) {\n        keys.push(KeyCodes[which]);\n    } else {\n        // eslint-disable-next-line id-blacklist\n        keys.push(String.fromCharCode(which).toLowerCase());\n    }\n\n    // join keys with plusses\n    return keys.join(\" + \");\n};\n\n/**\n * Determines the key combo object from the given keyboard event. Again, a key\n * combo includes zero or more modifiers (represented by a bitmask) and one\n * action key, which we determine from the `e.which` property of the keyboard\n * event.\n */\nexport const getKeyCombo = (e: KeyboardEvent): IKeyCombo => {\n    let key: string | undefined;\n    // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n    // eslint-disable-next-line deprecation/deprecation\n    const { which } = e;\n    if (Modifiers[which] != null) {\n        // keep key null\n    } else if (KeyCodes[which] != null) {\n        key = KeyCodes[which];\n    } else {\n        // eslint-disable-next-line id-blacklist\n        key = String.fromCharCode(which).toLowerCase();\n    }\n\n    let modifiers = 0;\n    if (e.altKey) {\n        modifiers += ModifierBitMasks.alt;\n    }\n    if (e.ctrlKey) {\n        modifiers += ModifierBitMasks.ctrl;\n    }\n    if (e.metaKey) {\n        modifiers += ModifierBitMasks.meta;\n    }\n    if (e.shiftKey) {\n        modifiers += ModifierBitMasks.shift;\n    }\n\n    return { modifiers, key };\n};\n\n/**\n * Splits a key combo string into its constituent key values and looks up\n * aliases, such as `return` -> `enter`.\n *\n * Unlike the parseKeyCombo method, this method does NOT convert shifted\n * action keys. So `\"@\"` will NOT be converted to `[\"shift\", \"2\"]`).\n */\nexport const normalizeKeyCombo = (combo: string, platformOverride?: string): string[] => {\n    const keys = combo.replace(/\\s/g, \"\").split(\"+\");\n    return keys.map(key => {\n        const keyName = Aliases[key] != null ? Aliases[key] : key;\n        return keyName === \"meta\" ? (isMac(platformOverride) ? \"cmd\" : \"ctrl\") : keyName;\n    });\n};\n\nfunction isMac(platformOverride?: string) {\n    // HACKHACK: see https://github.com/palantir/blueprint/issues/5174\n    // eslint-disable-next-line deprecation/deprecation\n    const platform = platformOverride ?? (typeof navigator !== \"undefined\" ? navigator.platform : undefined);\n    return platform === undefined ? false : /Mac|iPod|iPhone|iPad/.test(platform);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}