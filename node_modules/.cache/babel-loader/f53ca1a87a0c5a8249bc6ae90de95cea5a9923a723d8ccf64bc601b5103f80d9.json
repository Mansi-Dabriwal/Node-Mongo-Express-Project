{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX, removeNonHTMLProps } from \"../../common/props\";\nimport { Icon } from \"../icon/icon\";\nimport { AsyncControllableInput } from \"./asyncControllableInput\";\nvar InputGroup = /** @class */function (_super) {\n  __extends(InputGroup, _super);\n  function InputGroup() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.state = {};\n    _this.leftElement = null;\n    _this.rightElement = null;\n    _this.refHandlers = {\n      leftElement: function (ref) {\n        return _this.leftElement = ref;\n      },\n      rightElement: function (ref) {\n        return _this.rightElement = ref;\n      }\n    };\n    return _this;\n  }\n  InputGroup.prototype.render = function () {\n    var _a;\n    var _b = this.props,\n      _c = _b.asyncControl,\n      asyncControl = _c === void 0 ? false : _c,\n      className = _b.className,\n      disabled = _b.disabled,\n      fill = _b.fill,\n      inputRef = _b.inputRef,\n      intent = _b.intent,\n      large = _b.large,\n      round = _b.round,\n      small = _b.small,\n      _d = _b.tagName,\n      tagName = _d === void 0 ? \"div\" : _d;\n    var inputGroupClasses = classNames(Classes.INPUT_GROUP, Classes.intentClass(intent), (_a = {}, _a[Classes.DISABLED] = disabled, _a[Classes.FILL] = fill, _a[Classes.LARGE] = large, _a[Classes.SMALL] = small, _a[Classes.ROUND] = round, _a), className);\n    var style = __assign(__assign({}, this.props.style), {\n      paddingLeft: this.state.leftElementWidth,\n      paddingRight: this.state.rightElementWidth\n    });\n    var inputProps = __assign(__assign({\n      type: \"text\"\n    }, removeNonHTMLProps(this.props)), {\n      className: Classes.INPUT,\n      style: style\n    });\n    var inputElement = asyncControl ? React.createElement(AsyncControllableInput, __assign({}, inputProps, {\n      inputRef: inputRef\n    })) : React.createElement(\"input\", __assign({}, inputProps, {\n      ref: inputRef\n    }));\n    return React.createElement(tagName, {\n      className: inputGroupClasses\n    }, this.maybeRenderLeftElement(), inputElement, this.maybeRenderRightElement());\n  };\n  InputGroup.prototype.componentDidMount = function () {\n    this.updateInputWidth();\n  };\n  InputGroup.prototype.componentDidUpdate = function (prevProps) {\n    var _a = this.props,\n      leftElement = _a.leftElement,\n      rightElement = _a.rightElement;\n    if (prevProps.leftElement !== leftElement || prevProps.rightElement !== rightElement) {\n      this.updateInputWidth();\n    }\n  };\n  InputGroup.prototype.validateProps = function (props) {\n    if (props.leftElement != null && props.leftIcon != null) {\n      console.warn(Errors.INPUT_WARN_LEFT_ELEMENT_LEFT_ICON_MUTEX);\n    }\n  };\n  InputGroup.prototype.maybeRenderLeftElement = function () {\n    var _a = this.props,\n      leftElement = _a.leftElement,\n      leftIcon = _a.leftIcon;\n    if (leftElement != null) {\n      return React.createElement(\"span\", {\n        className: Classes.INPUT_LEFT_CONTAINER,\n        ref: this.refHandlers.leftElement\n      }, leftElement);\n    } else if (leftIcon != null) {\n      return React.createElement(Icon, {\n        icon: leftIcon,\n        \"aria-hidden\": true,\n        tabIndex: -1\n      });\n    }\n    return undefined;\n  };\n  InputGroup.prototype.maybeRenderRightElement = function () {\n    var rightElement = this.props.rightElement;\n    if (rightElement == null) {\n      return undefined;\n    }\n    return React.createElement(\"span\", {\n      className: Classes.INPUT_ACTION,\n      ref: this.refHandlers.rightElement\n    }, rightElement);\n  };\n  InputGroup.prototype.updateInputWidth = function () {\n    var _a = this.state,\n      leftElementWidth = _a.leftElementWidth,\n      rightElementWidth = _a.rightElementWidth;\n    if (this.leftElement != null) {\n      var clientWidth = this.leftElement.clientWidth;\n      // small threshold to prevent infinite loops\n      if (leftElementWidth === undefined || Math.abs(clientWidth - leftElementWidth) > 2) {\n        this.setState({\n          leftElementWidth: clientWidth\n        });\n      }\n    } else {\n      this.setState({\n        leftElementWidth: undefined\n      });\n    }\n    if (this.rightElement != null) {\n      var clientWidth = this.rightElement.clientWidth;\n      // small threshold to prevent infinite loops\n      if (rightElementWidth === undefined || Math.abs(clientWidth - rightElementWidth) > 2) {\n        this.setState({\n          rightElementWidth: clientWidth\n        });\n      }\n    } else {\n      this.setState({\n        rightElementWidth: undefined\n      });\n    }\n  };\n  InputGroup.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".InputGroup\");\n  return InputGroup;\n}(AbstractPureComponent2);\nexport { InputGroup };","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Classes","Errors","DISPLAYNAME_PREFIX","removeNonHTMLProps","Icon","AsyncControllableInput","__extends","_this","leftElement","ref","rightElement","InputGroup","props","_c","asyncControl","className","disabled","fill","inputRef","intent","large","round","small","_d","tagName","inputGroupClasses","INPUT_GROUP","intentClass","_a","DISABLED","FILL","LARGE","SMALL","ROUND","style","paddingLeft","state","leftElementWidth","paddingRight","rightElementWidth","inputProps","type","INPUT","inputElement","createElement","maybeRenderLeftElement","maybeRenderRightElement","updateInputWidth","prevProps","leftIcon","console","warn","INPUT_WARN_LEFT_ELEMENT_LEFT_ICON_MUTEX","INPUT_LEFT_CONTAINER","refHandlers","icon","tabIndex","undefined","INPUT_ACTION","Math","abs","clientWidth","setState"],"sources":["/Users/mansidabriwal/Documents/Web design class/React-Assignment/react-app/node_modules/@blueprintjs/core/src/components/forms/inputGroup.tsx"],"sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport {\n    ControlledProps2,\n    DISPLAYNAME_PREFIX,\n    HTMLInputProps,\n    IControlledProps,\n    IntentProps,\n    MaybeElement,\n    Props,\n    removeNonHTMLProps,\n} from \"../../common/props\";\nimport { Icon, IconName } from \"../icon/icon\";\nimport { AsyncControllableInput } from \"./asyncControllableInput\";\nimport type { InputSharedProps } from \"./inputSharedProps\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type InputGroupProps = IInputGroupProps;\n\n/**\n * @deprecated use IInputGroupProps2.\n *\n * NOTE: This interface does not extend HTMLInputProps due to incompatiblity with `IControlledProps`.\n * Instead, we union the props in the component definition, which does work and properly disallows `string[]` values.\n */\nexport interface IInputGroupProps\n    // eslint-disable-next-line deprecation/deprecation\n    extends IControlledProps,\n        IntentProps,\n        Props {\n    /**\n     * Set this to `true` if you will be controlling the `value` of this input with asynchronous updates.\n     * These may occur if you do not immediately call setState in a parent component with the value from\n     * the `onChange` handler, or if working with certain libraries like __redux-form__.\n     *\n     * @default false\n     */\n    asyncControl?: boolean;\n\n    /**\n     * Whether the input is non-interactive.\n     * Note that `rightElement` must be disabled separately; this prop will not affect it.\n     *\n     * @default false\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether the component should take up the full width of its container.\n     */\n    fill?: boolean;\n\n    /** Ref handler or a ref object that receives HTML `<input>` element backing this component. */\n    inputRef?: React.Ref<HTMLInputElement>;\n\n    /**\n     * Element to render on the left side of input.  This prop is mutually exclusive\n     * with `leftIcon`.\n     */\n    leftElement?: JSX.Element;\n\n    /**\n     * Name of a Blueprint UI icon to render on the left side of the input group,\n     * before the user's cursor.  This prop is mutually exclusive with `leftElement`.\n     * Usage with content is deprecated.  Use `leftElement` for elements.\n     */\n    leftIcon?: IconName | MaybeElement;\n\n    /** Whether this input should use large styles. */\n    large?: boolean;\n\n    /** Whether this input should use small styles. */\n    small?: boolean;\n\n    /** Placeholder text in the absence of any value. */\n    placeholder?: string;\n\n    /**\n     * Element to render on right side of input.\n     * For best results, use a minimal button, tag, or small spinner.\n     */\n    rightElement?: JSX.Element;\n\n    /** Whether the input (and any buttons) should appear with rounded caps. */\n    round?: boolean;\n\n    /**\n     * HTML `input` type attribute.\n     *\n     * @default \"text\"\n     */\n    type?: string;\n}\n\n// eslint-disable-next-line deprecation/deprecation\nexport type InputGroupProps2 = IInputGroupProps2;\n/** @deprecated use InputGroupProps2 */\nexport interface IInputGroupProps2\n    extends Omit<HTMLInputProps, keyof ControlledProps2>,\n        ControlledProps2,\n        InputSharedProps {\n    /**\n     * Set this to `true` if you will be controlling the `value` of this input with asynchronous updates.\n     * These may occur if you do not immediately call setState in a parent component with the value from\n     * the `onChange` handler, or if working with certain libraries like __redux-form__.\n     *\n     * @default false\n     */\n    asyncControl?: boolean;\n\n    /** Whether this input should use large styles. */\n    large?: boolean;\n\n    /** Whether this input should use small styles. */\n    small?: boolean;\n\n    /** Whether the input (and any buttons) should appear with rounded caps. */\n    round?: boolean;\n\n    /**\n     * Name of the HTML tag that contains the input group.\n     *\n     * @default \"div\"\n     */\n    tagName?: keyof JSX.IntrinsicElements;\n\n    /**\n     * HTML `input` type attribute.\n     *\n     * @default \"text\"\n     */\n    type?: string;\n}\n\nexport interface IInputGroupState {\n    leftElementWidth?: number;\n    rightElementWidth?: number;\n}\n\nexport class InputGroup extends AbstractPureComponent2<InputGroupProps2, IInputGroupState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.InputGroup`;\n\n    public state: IInputGroupState = {};\n\n    private leftElement: HTMLElement | null = null;\n\n    private rightElement: HTMLElement | null = null;\n\n    private refHandlers = {\n        leftElement: (ref: HTMLSpanElement | null) => (this.leftElement = ref),\n        rightElement: (ref: HTMLSpanElement | null) => (this.rightElement = ref),\n    };\n\n    public render() {\n        const {\n            asyncControl = false,\n            className,\n            disabled,\n            fill,\n            inputRef,\n            intent,\n            large,\n            round,\n            small,\n            tagName = \"div\",\n        } = this.props;\n        const inputGroupClasses = classNames(\n            Classes.INPUT_GROUP,\n            Classes.intentClass(intent),\n            {\n                [Classes.DISABLED]: disabled,\n                [Classes.FILL]: fill,\n                [Classes.LARGE]: large,\n                [Classes.SMALL]: small,\n                [Classes.ROUND]: round,\n            },\n            className,\n        );\n        const style: React.CSSProperties = {\n            ...this.props.style,\n            paddingLeft: this.state.leftElementWidth,\n            paddingRight: this.state.rightElementWidth,\n        };\n        const inputProps = {\n            type: \"text\",\n            ...removeNonHTMLProps(this.props),\n            className: Classes.INPUT,\n            style,\n        };\n        const inputElement = asyncControl ? (\n            <AsyncControllableInput {...inputProps} inputRef={inputRef} />\n        ) : (\n            <input {...inputProps} ref={inputRef} />\n        );\n\n        return React.createElement(\n            tagName,\n            { className: inputGroupClasses },\n            this.maybeRenderLeftElement(),\n            inputElement,\n            this.maybeRenderRightElement(),\n        );\n    }\n\n    public componentDidMount() {\n        this.updateInputWidth();\n    }\n\n    public componentDidUpdate(prevProps: InputGroupProps2) {\n        const { leftElement, rightElement } = this.props;\n        if (prevProps.leftElement !== leftElement || prevProps.rightElement !== rightElement) {\n            this.updateInputWidth();\n        }\n    }\n\n    protected validateProps(props: InputGroupProps2) {\n        if (props.leftElement != null && props.leftIcon != null) {\n            console.warn(Errors.INPUT_WARN_LEFT_ELEMENT_LEFT_ICON_MUTEX);\n        }\n    }\n\n    private maybeRenderLeftElement() {\n        const { leftElement, leftIcon } = this.props;\n\n        if (leftElement != null) {\n            return (\n                <span className={Classes.INPUT_LEFT_CONTAINER} ref={this.refHandlers.leftElement}>\n                    {leftElement}\n                </span>\n            );\n        } else if (leftIcon != null) {\n            return <Icon icon={leftIcon} aria-hidden={true} tabIndex={-1} />;\n        }\n\n        return undefined;\n    }\n\n    private maybeRenderRightElement() {\n        const { rightElement } = this.props;\n        if (rightElement == null) {\n            return undefined;\n        }\n        return (\n            <span className={Classes.INPUT_ACTION} ref={this.refHandlers.rightElement}>\n                {rightElement}\n            </span>\n        );\n    }\n\n    private updateInputWidth() {\n        const { leftElementWidth, rightElementWidth } = this.state;\n\n        if (this.leftElement != null) {\n            const { clientWidth } = this.leftElement;\n            // small threshold to prevent infinite loops\n            if (leftElementWidth === undefined || Math.abs(clientWidth - leftElementWidth) > 2) {\n                this.setState({ leftElementWidth: clientWidth });\n            }\n        } else {\n            this.setState({ leftElementWidth: undefined });\n        }\n\n        if (this.rightElement != null) {\n            const { clientWidth } = this.rightElement;\n            // small threshold to prevent infinite loops\n            if (rightElementWidth === undefined || Math.abs(clientWidth - rightElementWidth) > 2) {\n                this.setState({ rightElementWidth: clientWidth });\n            }\n        } else {\n            this.setState({ rightElementWidth: undefined });\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}