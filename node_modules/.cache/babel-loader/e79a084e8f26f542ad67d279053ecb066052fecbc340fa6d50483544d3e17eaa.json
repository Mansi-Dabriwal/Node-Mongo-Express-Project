{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { isElementOfType } from \"../../common/utils\";\nimport { Radio } from \"./controls\";\nvar counter = 0;\nfunction nextName() {\n  return \"\".concat(RadioGroup.displayName, \"-\").concat(counter++);\n}\nvar RadioGroup = /** @class */function (_super) {\n  __extends(RadioGroup, _super);\n  function RadioGroup() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    // a unique name for this group, which can be overridden by `name` prop.\n    _this.autoGroupName = nextName();\n    return _this;\n  }\n  RadioGroup.prototype.render = function () {\n    var label = this.props.label;\n    return React.createElement(\"div\", {\n      className: this.props.className\n    }, label == null ? null : React.createElement(\"label\", {\n      className: Classes.LABEL\n    }, label), Array.isArray(this.props.options) ? this.renderOptions() : this.renderChildren());\n  };\n  RadioGroup.prototype.validateProps = function () {\n    if (this.props.children != null && this.props.options != null) {\n      console.warn(Errors.RADIOGROUP_WARN_CHILDREN_OPTIONS_MUTEX);\n    }\n  };\n  RadioGroup.prototype.renderChildren = function () {\n    var _this = this;\n    return React.Children.map(this.props.children, function (child) {\n      if (isElementOfType(child, Radio)) {\n        return React.cloneElement(child, _this.getRadioProps(child.props));\n      } else {\n        return child;\n      }\n    });\n  };\n  RadioGroup.prototype.renderOptions = function () {\n    var _this = this;\n    var _a;\n    return (_a = this.props.options) === null || _a === void 0 ? void 0 : _a.map(function (option) {\n      return React.createElement(Radio, __assign({}, _this.getRadioProps(option), {\n        key: option.value,\n        labelElement: option.label || option.value\n      }));\n    });\n  };\n  RadioGroup.prototype.getRadioProps = function (optionProps) {\n    var name = this.props.name;\n    var className = optionProps.className,\n      disabled = optionProps.disabled,\n      value = optionProps.value;\n    return {\n      checked: value === this.props.selectedValue,\n      className: className,\n      disabled: disabled || this.props.disabled,\n      inline: this.props.inline,\n      name: name == null ? this.autoGroupName : name,\n      onChange: this.props.onChange,\n      value: value\n    };\n  };\n  RadioGroup.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".RadioGroup\");\n  return RadioGroup;\n}(AbstractPureComponent2);\nexport { RadioGroup };","map":{"version":3,"mappings":"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","names":["React","AbstractPureComponent2","Classes","Errors","DISPLAYNAME_PREFIX","isElementOfType","Radio","counter","nextName","RadioGroup","displayName","__extends","_this","props","className","label","LABEL","Array","isArray","options","renderOptions","renderChildren","children","console","warn","RADIOGROUP_WARN_CHILDREN_OPTIONS_MUTEX","Children","map","child","cloneElement","getRadioProps","option","key","value","labelElement","optionProps","disabled","checked","selectedValue","inline","name","autoGroupName","onChange"],"sources":["/Users/mansidabriwal/Documents/Web design class/React-Assignment/react-app/node_modules/@blueprintjs/core/src/components/forms/radioGroup.tsx"],"sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX, OptionProps, Props } from \"../../common/props\";\nimport { isElementOfType } from \"../../common/utils\";\nimport { Radio, RadioProps } from \"./controls\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type RadioGroupProps = IRadioGroupProps;\n/** @deprecated use RadioGroupProps */\nexport interface IRadioGroupProps extends Props {\n    /**\n     * Radio elements. This prop is mutually exclusive with `options`.\n     */\n    children?: React.ReactNode;\n\n    /**\n     * Whether the group and _all_ its radios are disabled.\n     * Individual radios can be disabled using their `disabled` prop.\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether the radio buttons are to be displayed inline horizontally.\n     */\n    inline?: boolean;\n\n    /** Optional label text to display above the radio buttons. */\n    label?: React.ReactNode;\n\n    /**\n     * Name of the group, used to link radio buttons together in HTML.\n     * If omitted, a unique name will be generated internally.\n     */\n    name?: string;\n\n    /**\n     * Callback invoked when the currently selected radio changes.\n     * Use `event.currentTarget.value` to read the currently selected value.\n     * This prop is required because this component only supports controlled usage.\n     */\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void;\n\n    /**\n     * Array of options to render in the group. This prop is mutually exclusive\n     * with `children`: either provide an array of `OptionProps` objects or\n     * provide `<Radio>` children elements.\n     */\n    options?: readonly OptionProps[];\n\n    /** Value of the selected radio. The child with this value will be `:checked`. */\n    selectedValue?: string | number;\n}\n\nlet counter = 0;\nfunction nextName() {\n    return `${RadioGroup.displayName}-${counter++}`;\n}\n\nexport class RadioGroup extends AbstractPureComponent2<RadioGroupProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.RadioGroup`;\n\n    // a unique name for this group, which can be overridden by `name` prop.\n    private autoGroupName = nextName();\n\n    public render() {\n        const { label } = this.props;\n        return (\n            <div className={this.props.className}>\n                {label == null ? null : <label className={Classes.LABEL}>{label}</label>}\n                {Array.isArray(this.props.options) ? this.renderOptions() : this.renderChildren()}\n            </div>\n        );\n    }\n\n    protected validateProps() {\n        if (this.props.children != null && this.props.options != null) {\n            console.warn(Errors.RADIOGROUP_WARN_CHILDREN_OPTIONS_MUTEX);\n        }\n    }\n\n    private renderChildren() {\n        return React.Children.map(this.props.children, child => {\n            if (isElementOfType(child, Radio)) {\n                return React.cloneElement(child, this.getRadioProps(child.props as OptionProps));\n            } else {\n                return child;\n            }\n        });\n    }\n\n    private renderOptions() {\n        return this.props.options?.map(option => (\n            <Radio {...this.getRadioProps(option)} key={option.value} labelElement={option.label || option.value} />\n        ));\n    }\n\n    private getRadioProps(optionProps: OptionProps): RadioProps {\n        const { name } = this.props;\n        const { className, disabled, value } = optionProps;\n        return {\n            checked: value === this.props.selectedValue,\n            className,\n            disabled: disabled || this.props.disabled,\n            inline: this.props.inline,\n            name: name == null ? this.autoGroupName : name,\n            onChange: this.props.onChange,\n            value,\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}