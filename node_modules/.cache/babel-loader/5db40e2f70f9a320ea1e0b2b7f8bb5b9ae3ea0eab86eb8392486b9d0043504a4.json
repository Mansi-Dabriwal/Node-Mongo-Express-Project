{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport { ResizeObserver } from \"@juggle/resize-observer\";\nimport * as React from \"react\";\nimport { findDOMNode } from \"react-dom\";\nimport { AbstractPureComponent2 } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n/** `ResizeSensor` requires a single DOM element child and will error otherwise. */\nvar ResizeSensor = /** @class */function (_super) {\n  __extends(ResizeSensor, _super);\n  function ResizeSensor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.element = null;\n    _this.observer = new ResizeObserver(function (entries) {\n      var _a, _b;\n      return (_b = (_a = _this.props).onResize) === null || _b === void 0 ? void 0 : _b.call(_a, entries);\n    });\n    return _this;\n  }\n  ResizeSensor.prototype.render = function () {\n    // pass-through render of single child\n    return React.Children.only(this.props.children);\n  };\n  ResizeSensor.prototype.componentDidMount = function () {\n    this.observeElement();\n  };\n  ResizeSensor.prototype.componentDidUpdate = function (prevProps) {\n    this.observeElement(this.props.observeParents !== prevProps.observeParents);\n  };\n  ResizeSensor.prototype.componentWillUnmount = function () {\n    this.observer.disconnect();\n    this.element = null;\n  };\n  /**\n   * Observe the DOM element, if defined and different from the currently\n   * observed element. Pass `force` argument to skip element checks and always\n   * re-observe.\n   */\n  ResizeSensor.prototype.observeElement = function (force) {\n    if (force === void 0) {\n      force = false;\n    }\n    var element = this.getElement();\n    if (!(element instanceof Element)) {\n      // stop everything if not defined\n      this.observer.disconnect();\n      return;\n    }\n    if (element === this.element && !force) {\n      // quit if given same element -- nothing to update (unless forced)\n      return;\n    } else {\n      // clear observer list if new element\n      this.observer.disconnect();\n      // remember element reference for next time\n      this.element = element;\n    }\n    // observer callback is invoked immediately when observing new elements\n    this.observer.observe(element);\n    if (this.props.observeParents) {\n      var parent_1 = element.parentElement;\n      while (parent_1 != null) {\n        this.observer.observe(parent_1);\n        parent_1 = parent_1.parentElement;\n      }\n    }\n  };\n  ResizeSensor.prototype.getElement = function () {\n    try {\n      // using findDOMNode for two reasons:\n      // 1. cloning to insert a ref is unwieldy and not performant.\n      // 2. ensure that we resolve to an actual DOM node (instead of any JSX ref instance).\n      // HACKHACK: see https://github.com/palantir/blueprint/issues/3979\n      /* eslint-disable-next-line react/no-find-dom-node */\n      return findDOMNode(this);\n    } catch (_a) {\n      // swallow error if findDOMNode is run on unmounted component.\n      return null;\n    }\n  };\n  ResizeSensor.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".ResizeSensor\");\n  return ResizeSensor;\n}(AbstractPureComponent2);\nexport { ResizeSensor };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAASA,cAAc,QAA6B,yBAAyB;AAC7E,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,WAAW,QAAQ,WAAW;AAEvC,SAASC,sBAAsB,QAAQ,cAAc;AACrD,SAASC,kBAAkB,QAAQ,oBAAoB;AAmCvD;AACA;EAAkCC;EAAlC;IAAA;IAGYC,aAAO,GAAmB,IAAI;IAE9BA,cAAQ,GAAG,IAAIN,cAAc,CAAC,iBAAO;MAAA;MAAI,wBAAI,CAACO,KAAK,EAACC,QAAQ,mDAAGC,OAAO,CAAC;IAAA,EAAC;;EAoEpF;EAlEWC,6BAAM,GAAb;IACI;IACA,OAAOT,KAAK,CAACU,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACL,KAAK,CAACM,QAAQ,CAAC;EACnD,CAAC;EAEMH,wCAAiB,GAAxB;IACI,IAAI,CAACI,cAAc,EAAE;EACzB,CAAC;EAEMJ,yCAAkB,GAAzB,UAA0BK,SAA4B;IAClD,IAAI,CAACD,cAAc,CAAC,IAAI,CAACP,KAAK,CAACS,cAAc,KAAKD,SAAS,CAACC,cAAc,CAAC;EAC/E,CAAC;EAEMN,2CAAoB,GAA3B;IACI,IAAI,CAACO,QAAQ,CAACC,UAAU,EAAE;IAC1B,IAAI,CAACC,OAAO,GAAG,IAAI;EACvB,CAAC;EAED;;;;;EAKQT,qCAAc,GAAtB,UAAuBU,KAAa;IAAb;MAAAA,aAAa;IAAA;IAChC,IAAMD,OAAO,GAAG,IAAI,CAACE,UAAU,EAAE;IACjC,IAAI,EAAEF,OAAO,YAAYG,OAAO,CAAC,EAAE;MAC/B;MACA,IAAI,CAACL,QAAQ,CAACC,UAAU,EAAE;MAC1B;;IAGJ,IAAIC,OAAO,KAAK,IAAI,CAACA,OAAO,IAAI,CAACC,KAAK,EAAE;MACpC;MACA;KACH,MAAM;MACH;MACA,IAAI,CAACH,QAAQ,CAACC,UAAU,EAAE;MAC1B;MACA,IAAI,CAACC,OAAO,GAAGA,OAAO;;IAG1B;IACA,IAAI,CAACF,QAAQ,CAACM,OAAO,CAACJ,OAAO,CAAC;IAE9B,IAAI,IAAI,CAACZ,KAAK,CAACS,cAAc,EAAE;MAC3B,IAAIQ,QAAM,GAAGL,OAAO,CAACM,aAAa;MAClC,OAAOD,QAAM,IAAI,IAAI,EAAE;QACnB,IAAI,CAACP,QAAQ,CAACM,OAAO,CAACC,QAAM,CAAC;QAC7BA,QAAM,GAAGA,QAAM,CAACC,aAAa;;;EAGzC,CAAC;EAEOf,iCAAU,GAAlB;IACI,IAAI;MACA;MACA;MACA;MACA;MACA;MACA,OAAOR,WAAW,CAAC,IAAI,CAAC;KAC3B,CAAC,WAAM;MACJ;MACA,OAAO,IAAI;;EAEnB,CAAC;EAvEaQ,wBAAW,GAAG,UAAGN,kBAAkB,kBAAe;EAwEpE,mBAAC;CAAA,CAzEiCD,sBAAsB;SAA3CO,YAAY","names":["ResizeObserver","React","findDOMNode","AbstractPureComponent2","DISPLAYNAME_PREFIX","__extends","_this","props","onResize","entries","ResizeSensor","Children","only","children","observeElement","prevProps","observeParents","observer","disconnect","element","force","getElement","Element","observe","parent_1","parentElement"],"sources":["/Users/mansidabriwal/Documents/Web design class/React-Assignment/react-app/node_modules/@blueprintjs/core/src/components/resize-sensor/resizeSensor.tsx"],"sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResizeObserver, ResizeObserverEntry } from \"@juggle/resize-observer\";\nimport * as React from \"react\";\nimport { findDOMNode } from \"react-dom\";\n\nimport { AbstractPureComponent2 } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type ResizeSensorProps = IResizeSensorProps;\n/** @deprecated use ResizeSensorProps */\nexport interface IResizeSensorProps {\n    /** Contents to observe for size changes. */\n    children: React.ReactNode;\n\n    /**\n     * Callback invoked when the wrapped element resizes.\n     *\n     * The `entries` array contains an entry for each observed element. In the\n     * default case (no `observeParents`), the array will contain only one\n     * element: the single child of the `ResizeSensor`.\n     *\n     * Note that this method is called _asynchronously_ after a resize is\n     * detected and typically it will be called no more than once per frame.\n     */\n    onResize: (entries: ResizeObserverEntry[]) => void;\n\n    /**\n     * If `true`, all parent DOM elements of the container will also be\n     * observed for size changes. The array of entries passed to `onResize`\n     * will now contain an entry for each parent element up to the root of the\n     * document.\n     *\n     * Only enable this prop if a parent element resizes in a way that does\n     * not also cause the child element to resize.\n     *\n     * @default false\n     */\n    observeParents?: boolean;\n}\n\n/** `ResizeSensor` requires a single DOM element child and will error otherwise. */\nexport class ResizeSensor extends AbstractPureComponent2<ResizeSensorProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.ResizeSensor`;\n\n    private element: Element | null = null;\n\n    private observer = new ResizeObserver(entries => this.props.onResize?.(entries));\n\n    public render(): React.ReactNode {\n        // pass-through render of single child\n        return React.Children.only(this.props.children);\n    }\n\n    public componentDidMount() {\n        this.observeElement();\n    }\n\n    public componentDidUpdate(prevProps: ResizeSensorProps) {\n        this.observeElement(this.props.observeParents !== prevProps.observeParents);\n    }\n\n    public componentWillUnmount() {\n        this.observer.disconnect();\n        this.element = null;\n    }\n\n    /**\n     * Observe the DOM element, if defined and different from the currently\n     * observed element. Pass `force` argument to skip element checks and always\n     * re-observe.\n     */\n    private observeElement(force = false) {\n        const element = this.getElement();\n        if (!(element instanceof Element)) {\n            // stop everything if not defined\n            this.observer.disconnect();\n            return;\n        }\n\n        if (element === this.element && !force) {\n            // quit if given same element -- nothing to update (unless forced)\n            return;\n        } else {\n            // clear observer list if new element\n            this.observer.disconnect();\n            // remember element reference for next time\n            this.element = element;\n        }\n\n        // observer callback is invoked immediately when observing new elements\n        this.observer.observe(element);\n\n        if (this.props.observeParents) {\n            let parent = element.parentElement;\n            while (parent != null) {\n                this.observer.observe(parent);\n                parent = parent.parentElement;\n            }\n        }\n    }\n\n    private getElement() {\n        try {\n            // using findDOMNode for two reasons:\n            // 1. cloning to insert a ref is unwieldy and not performant.\n            // 2. ensure that we resolve to an actual DOM node (instead of any JSX ref instance).\n            // HACKHACK: see https://github.com/palantir/blueprint/issues/3979\n            /* eslint-disable-next-line react/no-find-dom-node */\n            return findDOMNode(this);\n        } catch {\n            // swallow error if findDOMNode is run on unmounted component.\n            return null;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}