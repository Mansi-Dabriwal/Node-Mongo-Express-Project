{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes, refHandler, setRef } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n// this component is simple enough that tests would be purely tautological.\n/* istanbul ignore next */\nvar TextArea = /** @class */function (_super) {\n  __extends(TextArea, _super);\n  function TextArea() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.state = {};\n    // used to measure and set the height of the component on first mount\n    _this.textareaElement = null;\n    _this.handleRef = refHandler(_this, \"textareaElement\", _this.props.inputRef);\n    _this.handleChange = function (e) {\n      if (_this.props.growVertically) {\n        _this.setState({\n          height: e.target.scrollHeight\n        });\n      }\n      if (_this.props.onChange != null) {\n        _this.props.onChange(e);\n      }\n    };\n    return _this;\n  }\n  TextArea.prototype.componentDidMount = function () {\n    var _a;\n    if (this.props.growVertically && this.textareaElement !== null) {\n      // HACKHACK: this should probably be done in getSnapshotBeforeUpdate\n      /* eslint-disable-next-line react/no-did-mount-set-state */\n      this.setState({\n        height: (_a = this.textareaElement) === null || _a === void 0 ? void 0 : _a.scrollHeight\n      });\n    }\n  };\n  TextArea.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.inputRef !== this.props.inputRef) {\n      setRef(prevProps.inputRef, null);\n      this.handleRef = refHandler(this, \"textareaElement\", this.props.inputRef);\n      setRef(this.props.inputRef, this.textareaElement);\n    }\n  };\n  TextArea.prototype.render = function () {\n    var _a;\n    var _b = this.props,\n      className = _b.className,\n      fill = _b.fill,\n      inputRef = _b.inputRef,\n      intent = _b.intent,\n      large = _b.large,\n      small = _b.small,\n      growVertically = _b.growVertically,\n      htmlProps = __rest(_b, [\"className\", \"fill\", \"inputRef\", \"intent\", \"large\", \"small\", \"growVertically\"]);\n    var rootClasses = classNames(Classes.INPUT, Classes.intentClass(intent), (_a = {}, _a[Classes.FILL] = fill, _a[Classes.LARGE] = large, _a[Classes.SMALL] = small, _a), className);\n    // add explicit height style while preserving user-supplied styles if they exist\n    var _c = htmlProps.style,\n      style = _c === void 0 ? {} : _c;\n    if (growVertically && this.state.height != null) {\n      // this style object becomes non-extensible when mounted (at least in the enzyme renderer),\n      // so we make a new one to add a property\n      style = __assign(__assign({}, style), {\n        height: \"\".concat(this.state.height, \"px\")\n      });\n    }\n    return React.createElement(\"textarea\", __assign({}, htmlProps, {\n      className: rootClasses,\n      onChange: this.handleChange,\n      ref: this.handleRef,\n      style: style\n    }));\n  };\n  TextArea.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".TextArea\");\n  return TextArea;\n}(AbstractPureComponent2);\nexport { TextArea };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAU,MAAM,YAAY;AACnC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,SAASC,sBAAsB,EAAEC,OAAO,EAAEC,UAAU,EAAEC,MAAM,QAAQ,cAAc;AAClF,SAASC,kBAAkB,QAA4B,oBAAoB;AAoC3E;AACA;AACA;EAA8BC;EAA9B;IAAA;IAGWC,WAAK,GAAmB,EAAE;IAEjC;IACOA,qBAAe,GAA+B,IAAI;IAEjDA,eAAS,GAA2CJ,UAAU,CAClEI,KAAI,EACJ,iBAAiB,EACjBA,KAAI,CAACC,KAAK,CAACC,QAAQ,CACtB;IAwDOF,kBAAY,GAAG,UAACG,CAAyC;MAC7D,IAAIH,KAAI,CAACC,KAAK,CAACG,cAAc,EAAE;QAC3BJ,KAAI,CAACK,QAAQ,CAAC;UACVC,MAAM,EAAEH,CAAC,CAACI,MAAM,CAACC;SACpB,CAAC;;MAGN,IAAIR,KAAI,CAACC,KAAK,CAACQ,QAAQ,IAAI,IAAI,EAAE;QAC7BT,KAAI,CAACC,KAAK,CAACQ,QAAQ,CAACN,CAAC,CAAC;;IAE9B,CAAC;;EACL;EAjEWO,oCAAiB,GAAxB;;IACI,IAAI,IAAI,CAACT,KAAK,CAACG,cAAc,IAAI,IAAI,CAACO,eAAe,KAAK,IAAI,EAAE;MAC5D;MACA;MACA,IAAI,CAACN,QAAQ,CAAC;QACVC,MAAM,EAAE,UAAI,CAACK,eAAe,0CAAEH;OACjC,CAAC;;EAEV,CAAC;EAEME,qCAAkB,GAAzB,UAA0BE,SAAwB;IAC9C,IAAIA,SAAS,CAACV,QAAQ,KAAK,IAAI,CAACD,KAAK,CAACC,QAAQ,EAAE;MAC5CL,MAAM,CAACe,SAAS,CAACV,QAAQ,EAAE,IAAI,CAAC;MAChC,IAAI,CAACW,SAAS,GAAGjB,UAAU,CAAC,IAAI,EAAE,iBAAiB,EAAE,IAAI,CAACK,KAAK,CAACC,QAAQ,CAAC;MACzEL,MAAM,CAAC,IAAI,CAACI,KAAK,CAACC,QAAQ,EAAE,IAAI,CAACS,eAAe,CAAC;;EAEzD,CAAC;EAEMD,yBAAM,GAAb;;IACI,IAAMI,KAAoF,IAAI,CAACb,KAAK;MAA5Fc,SAAS;MAAEC,IAAI;MAAEd,QAAQ;MAAEe,MAAM;MAAEC,KAAK;MAAEC,KAAK;MAAEf,cAAc;MAAKgB,SAAS,cAA/E,+EAAiF,CAAa;IAEpG,IAAMC,WAAW,GAAG7B,UAAU,CAC1BG,OAAO,CAAC2B,KAAK,EACb3B,OAAO,CAAC4B,WAAW,CAACN,MAAM,CAAC,YAEvBO,GAAC7B,OAAO,CAAC8B,IAAI,IAAGT,IAAI,EACpBQ,GAAC7B,OAAO,CAAC+B,KAAK,IAAGR,KAAK,EACtBM,GAAC7B,OAAO,CAACgC,KAAK,IAAGR,KAAK,OAE1BJ,SAAS,CACZ;IAED;IACM,SAAeK,SAAS,MAAd;MAAVQ,KAAK,mBAAG,EAAE;IAChB,IAAIxB,cAAc,IAAI,IAAI,CAACyB,KAAK,CAACvB,MAAM,IAAI,IAAI,EAAE;MAC7C;MACA;MACAsB,KAAK,yBACEA,KAAK;QACRtB,MAAM,EAAE,UAAG,IAAI,CAACuB,KAAK,CAACvB,MAAM;MAAI,EACnC;;IAGL,OACIb,6CACQ2B,SAAS;MACbL,SAAS,EAAEM,WAAW;MACtBZ,QAAQ,EAAE,IAAI,CAACqB,YAAY;MAC3BC,GAAG,EAAE,IAAI,CAAClB,SAAS;MACnBe,KAAK,EAAEA;IAAK,GACd;EAEV,CAAC;EAjEalB,oBAAW,GAAG,UAAGZ,kBAAkB,cAAW;EA8EhE,eAAC;CAAA,CA/E6BJ,sBAAsB;SAAvCgB,QAAQ","names":["classNames","React","AbstractPureComponent2","Classes","refHandler","setRef","DISPLAYNAME_PREFIX","__extends","_this","props","inputRef","e","growVertically","setState","height","target","scrollHeight","onChange","TextArea","textareaElement","prevProps","handleRef","_b","className","fill","intent","large","small","htmlProps","rootClasses","INPUT","intentClass","_a","FILL","LARGE","SMALL","style","state","handleChange","ref"],"sources":["/Users/mansidabriwal/Documents/Web design class/React-Assignment/react-app/node_modules/@blueprintjs/core/src/components/forms/textArea.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes, refHandler, setRef } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, IntentProps, Props } from \"../../common/props\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type TextAreaProps = ITextAreaProps;\n/** @deprecated use TextAreaProps */\nexport interface ITextAreaProps extends IntentProps, Props, React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n    /**\n     * Whether the text area should take up the full width of its container.\n     */\n    fill?: boolean;\n\n    /**\n     * Whether the text area should appear with large styling.\n     */\n    large?: boolean;\n\n    /**\n     * Whether the text area should appear with small styling.\n     */\n    small?: boolean;\n\n    /**\n     * Whether the text area should automatically grow vertically to accomodate content.\n     */\n    growVertically?: boolean;\n\n    /**\n     * Ref handler that receives HTML `<textarea>` element backing this component.\n     */\n    inputRef?: React.Ref<HTMLTextAreaElement>;\n}\n\nexport interface ITextAreaState {\n    height?: number;\n}\n\n// this component is simple enough that tests would be purely tautological.\n/* istanbul ignore next */\nexport class TextArea extends AbstractPureComponent2<TextAreaProps, ITextAreaState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.TextArea`;\n\n    public state: ITextAreaState = {};\n\n    // used to measure and set the height of the component on first mount\n    public textareaElement: HTMLTextAreaElement | null = null;\n\n    private handleRef: React.RefCallback<HTMLTextAreaElement> = refHandler(\n        this,\n        \"textareaElement\",\n        this.props.inputRef,\n    );\n\n    public componentDidMount() {\n        if (this.props.growVertically && this.textareaElement !== null) {\n            // HACKHACK: this should probably be done in getSnapshotBeforeUpdate\n            /* eslint-disable-next-line react/no-did-mount-set-state */\n            this.setState({\n                height: this.textareaElement?.scrollHeight,\n            });\n        }\n    }\n\n    public componentDidUpdate(prevProps: TextAreaProps) {\n        if (prevProps.inputRef !== this.props.inputRef) {\n            setRef(prevProps.inputRef, null);\n            this.handleRef = refHandler(this, \"textareaElement\", this.props.inputRef);\n            setRef(this.props.inputRef, this.textareaElement);\n        }\n    }\n\n    public render() {\n        const { className, fill, inputRef, intent, large, small, growVertically, ...htmlProps } = this.props;\n\n        const rootClasses = classNames(\n            Classes.INPUT,\n            Classes.intentClass(intent),\n            {\n                [Classes.FILL]: fill,\n                [Classes.LARGE]: large,\n                [Classes.SMALL]: small,\n            },\n            className,\n        );\n\n        // add explicit height style while preserving user-supplied styles if they exist\n        let { style = {} } = htmlProps;\n        if (growVertically && this.state.height != null) {\n            // this style object becomes non-extensible when mounted (at least in the enzyme renderer),\n            // so we make a new one to add a property\n            style = {\n                ...style,\n                height: `${this.state.height}px`,\n            };\n        }\n\n        return (\n            <textarea\n                {...htmlProps}\n                className={rootClasses}\n                onChange={this.handleChange}\n                ref={this.handleRef}\n                style={style}\n            />\n        );\n    }\n\n    private handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        if (this.props.growVertically) {\n            this.setState({\n                height: e.target.scrollHeight,\n            });\n        }\n\n        if (this.props.onChange != null) {\n            this.props.onChange(e);\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}