{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Popper placement utils\n// ======================\n/** Converts a full placement to one of the four positions by stripping text after the `-`. */\nexport function getPosition(placement) {\n  return placement.split(\"-\")[0];\n}\n/** Returns true if position is left or right. */\nexport function isVerticalPosition(side) {\n  return [\"left\", \"right\"].indexOf(side) !== -1;\n}\n/** Returns the opposite position. */\nexport function getOppositePosition(side) {\n  switch (side) {\n    case \"top\":\n      return \"bottom\";\n    case \"left\":\n      return \"right\";\n    case \"bottom\":\n      return \"top\";\n    default:\n      return \"left\";\n  }\n}\n/** Returns the CSS alignment keyword corresponding to given placement. */\nexport function getAlignment(placement) {\n  var align = placement.split(\"-\")[1];\n  switch (align) {\n    case \"start\":\n      return \"left\";\n    case \"end\":\n      return \"right\";\n    default:\n      return \"center\";\n  }\n}\n// Popper modifiers\n// ================\n/** Modifier helper function to compute popper transform-origin based on arrow position */\nexport function getTransformOrigin(data) {\n  var position = getPosition(data.placement);\n  if (data.arrowElement == null) {\n    return isVerticalPosition(position) ? \"\".concat(getOppositePosition(position), \" \").concat(getAlignment(position)) : \"\".concat(getAlignment(position), \" \").concat(getOppositePosition(position));\n  } else {\n    var arrowSizeShift = data.arrowElement.clientHeight / 2;\n    var arrow = data.offsets.arrow;\n    // can use keyword for dimension without the arrow, to ease computation burden.\n    // move origin by half arrow's height to keep it centered.\n    return isVerticalPosition(position) ? \"\".concat(getOppositePosition(position), \" \").concat(arrow.top + arrowSizeShift, \"px\") : \"\".concat(arrow.left + arrowSizeShift, \"px \").concat(getOppositePosition(position));\n  }\n}\n// additional space between arrow and edge of target\nvar ARROW_SPACING = 4;\n/** Popper modifier that offsets popper and arrow so arrow points out of the correct side */\nexport var arrowOffsetModifier = function (data) {\n  if (data.arrowElement == null) {\n    return data;\n  }\n  // our arrows have equal width and height\n  var arrowSize = data.arrowElement.clientWidth;\n  // this logic borrowed from original Popper arrow modifier itself\n  var position = getPosition(data.placement);\n  var isVertical = isVerticalPosition(position);\n  var len = isVertical ? \"width\" : \"height\";\n  var offsetSide = isVertical ? \"left\" : \"top\";\n  var arrowOffsetSize = Math.round(arrowSize / 2 / Math.sqrt(2));\n  // offset popover by arrow size, offset arrow in the opposite direction\n  if (position === \"top\" || position === \"left\") {\n    // the \"up & back\" directions require negative popper offsets\n    data.offsets.popper[offsetSide] -= arrowOffsetSize + ARROW_SPACING;\n    // can only use left/top on arrow so gotta get clever with 100% + X\n    data.offsets.arrow[offsetSide] = data.offsets.popper[len] - arrowSize + arrowOffsetSize;\n  } else {\n    data.offsets.popper[offsetSide] += arrowOffsetSize + ARROW_SPACING;\n    data.offsets.arrow[offsetSide] = -arrowOffsetSize;\n  }\n  return data;\n};","map":{"version":3,"mappings":"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","names":["getPosition","placement","split","isVerticalPosition","side","indexOf","getOppositePosition","getAlignment","align","getTransformOrigin","data","position","arrowElement","arrowSizeShift","clientHeight","offsets","arrow","top","left","ARROW_SPACING","arrowOffsetModifier","arrowSize","clientWidth","isVertical","len","offsetSide","arrowOffsetSize","Math","round","sqrt","popper"],"sources":["/Users/mansidabriwal/Documents/Web design class/React-Assignment/react-app/node_modules/@blueprintjs/core/src/components/popover/popperUtils.ts"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport PopperJS from \"popper.js\";\n\n// Popper placement utils\n// ======================\n\n/** Converts a full placement to one of the four positions by stripping text after the `-`. */\nexport function getPosition(placement: PopperJS.Placement) {\n    return placement.split(\"-\")[0] as PopperJS.Position;\n}\n\n/** Returns true if position is left or right. */\nexport function isVerticalPosition(side: PopperJS.Position) {\n    return [\"left\", \"right\"].indexOf(side) !== -1;\n}\n\n/** Returns the opposite position. */\nexport function getOppositePosition(side: PopperJS.Position) {\n    switch (side) {\n        case \"top\":\n            return \"bottom\";\n        case \"left\":\n            return \"right\";\n        case \"bottom\":\n            return \"top\";\n        default:\n            return \"left\";\n    }\n}\n\n/** Returns the CSS alignment keyword corresponding to given placement. */\nexport function getAlignment(placement: PopperJS.Placement) {\n    const align = placement.split(\"-\")[1] as \"start\" | \"end\" | undefined;\n    switch (align) {\n        case \"start\":\n            return \"left\";\n        case \"end\":\n            return \"right\";\n        default:\n            return \"center\";\n    }\n}\n\n// Popper modifiers\n// ================\n\n/** Modifier helper function to compute popper transform-origin based on arrow position */\nexport function getTransformOrigin(data: PopperJS.Data) {\n    const position = getPosition(data.placement);\n    if (data.arrowElement == null) {\n        return isVerticalPosition(position)\n            ? `${getOppositePosition(position)} ${getAlignment(position)}`\n            : `${getAlignment(position)} ${getOppositePosition(position)}`;\n    } else {\n        const arrowSizeShift = data.arrowElement.clientHeight / 2;\n        const { arrow } = data.offsets;\n        // can use keyword for dimension without the arrow, to ease computation burden.\n        // move origin by half arrow's height to keep it centered.\n        return isVerticalPosition(position)\n            ? `${getOppositePosition(position)} ${arrow.top + arrowSizeShift}px`\n            : `${arrow.left + arrowSizeShift}px ${getOppositePosition(position)}`;\n    }\n}\n\n// additional space between arrow and edge of target\nconst ARROW_SPACING = 4;\n\n/** Popper modifier that offsets popper and arrow so arrow points out of the correct side */\nexport const arrowOffsetModifier: PopperJS.ModifierFn = data => {\n    if (data.arrowElement == null) {\n        return data;\n    }\n    // our arrows have equal width and height\n    const arrowSize = data.arrowElement.clientWidth;\n    // this logic borrowed from original Popper arrow modifier itself\n    const position = getPosition(data.placement);\n    const isVertical = isVerticalPosition(position);\n    const len = isVertical ? \"width\" : \"height\";\n    const offsetSide = isVertical ? \"left\" : \"top\";\n\n    const arrowOffsetSize = Math.round(arrowSize / 2 / Math.sqrt(2));\n    // offset popover by arrow size, offset arrow in the opposite direction\n    if (position === \"top\" || position === \"left\") {\n        // the \"up & back\" directions require negative popper offsets\n        data.offsets.popper[offsetSide] -= arrowOffsetSize + ARROW_SPACING;\n        // can only use left/top on arrow so gotta get clever with 100% + X\n        data.offsets.arrow[offsetSide] = data.offsets.popper[len] - arrowSize + arrowOffsetSize;\n    } else {\n        data.offsets.popper[offsetSide] += arrowOffsetSize + ARROW_SPACING;\n        data.offsets.arrow[offsetSide] = -arrowOffsetSize;\n    }\n    return data;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}