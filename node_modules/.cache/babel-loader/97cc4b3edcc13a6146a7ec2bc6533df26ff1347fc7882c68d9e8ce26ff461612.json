{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __spreadArray } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { PanelView2 } from \"./panelView2\";\n/**\n * @template T type union of all possible panels in this stack\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport var PanelStack2 = function (props) {\n  var _a = props.renderActivePanelOnly,\n    renderActivePanelOnly = _a === void 0 ? true : _a,\n    _b = props.showPanelHeader,\n    showPanelHeader = _b === void 0 ? true : _b,\n    propsStack = props.stack;\n  var _c = React.useState(\"push\"),\n    direction = _c[0],\n    setDirection = _c[1];\n  var _d = React.useState(props.initialPanel !== undefined ? [props.initialPanel] : []),\n    localStack = _d[0],\n    setLocalStack = _d[1];\n  var stack = React.useMemo(function () {\n    return propsStack != null ? propsStack.slice().reverse() : localStack;\n  }, [localStack, propsStack]);\n  var stackLength = React.useRef(stack.length);\n  React.useEffect(function () {\n    if (stack.length !== stackLength.current) {\n      // Adjust the direction in case the stack size has changed, controlled or uncontrolled\n      setDirection(stack.length - stackLength.current < 0 ? \"pop\" : \"push\");\n    }\n    stackLength.current = stack.length;\n  }, [stack]);\n  var handlePanelOpen = React.useCallback(function (panel) {\n    var _a;\n    (_a = props.onOpen) === null || _a === void 0 ? void 0 : _a.call(props, panel);\n    if (props.stack == null) {\n      setLocalStack(function (prevStack) {\n        return __spreadArray([panel], prevStack, true);\n      });\n    }\n  }, [props.onOpen]);\n  var handlePanelClose = React.useCallback(function (panel) {\n    var _a;\n    // only remove this panel if it is at the top and not the only one.\n    if (stack[0] !== panel || stack.length <= 1) {\n      return;\n    }\n    (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props, panel);\n    if (props.stack == null) {\n      setLocalStack(function (prevStack) {\n        return prevStack.slice(1);\n      });\n    }\n  }, [stack, props.onClose]);\n  // early return, after all hooks are called\n  if (stack.length === 0) {\n    return null;\n  }\n  var panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n  var panels = panelsToRender.map(function (panel, index) {\n    // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n    // therefore they would not trigger the \"enter\" transition event as they were entered.\n    // To force the enter event, we want to change the key, but stack.length is not enough\n    // and a single panel should not rerender as long as it's hidden.\n    // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n    // second one, active changes only when the panel becomes or stops being active.\n    var layer = stack.length - index;\n    var key = renderActivePanelOnly ? stack.length : layer;\n    return React.createElement(CSSTransition, {\n      classNames: Classes.PANEL_STACK2,\n      key: key,\n      timeout: 400\n    }, React.createElement(PanelView2, {\n      onClose: handlePanelClose,\n      onOpen: handlePanelOpen,\n      panel: panel,\n      previousPanel: stack[index + 1],\n      showHeader: showPanelHeader\n    }));\n  }).reverse();\n  var classes = classNames(Classes.PANEL_STACK2, \"\".concat(Classes.PANEL_STACK2, \"-\").concat(direction), props.className);\n  return React.createElement(TransitionGroup, {\n    className: classes,\n    component: \"div\"\n  }, panels);\n};\nPanelStack2.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".PanelStack2\");","map":{"version":3,"mappings":"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","names":["classNames","React","CSSTransition","TransitionGroup","Classes","DISPLAYNAME_PREFIX","PanelView2","PanelStack2","props","renderActivePanelOnly","_b","showPanelHeader","propsStack","useState","direction","setDirection","initialPanel","undefined","localStack","setLocalStack","stack","useMemo","slice","reverse","stackLength","useRef","length","useEffect","current","handlePanelOpen","useCallback","panel","onOpen","prevStack","handlePanelClose","onClose","panelsToRender","panels","map","index","layer","key","PANEL_STACK2","timeout","previousPanel","showHeader","classes","className","component","displayName"],"sources":["/Users/mansidabriwal/Documents/Web design class/React-Assignment/react-app/node_modules/@blueprintjs/core/src/components/panel-stack2/panelStack2.tsx"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport { Classes, DISPLAYNAME_PREFIX, Props } from \"../../common\";\nimport { Panel } from \"./panelTypes\";\nimport { PanelView2 } from \"./panelView2\";\n\n/**\n * @template T type union of all possible panels in this stack\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface PanelStack2Props<T extends Panel<object>> extends Props {\n    /**\n     * The initial panel to show on mount. This panel cannot be removed from the\n     * stack and will appear when the stack is empty.\n     * This prop is only used in uncontrolled mode and is thus mutually\n     * exclusive with the `stack` prop.\n     */\n    initialPanel?: T;\n\n    /**\n     * Callback invoked when the user presses the back button or a panel\n     * closes itself with a `closePanel()` action.\n     */\n    onClose?: (removedPanel: T) => void;\n\n    /**\n     * Callback invoked when a panel opens a new panel with an `openPanel(panel)`\n     * action.\n     */\n    onOpen?: (addedPanel: T) => void;\n\n    /**\n     * If false, PanelStack will render all panels in the stack to the DOM, allowing their\n     * React component trees to maintain state as a user navigates through the stack.\n     * Panels other than the currently active one will be invisible.\n     *\n     * @default true\n     */\n    renderActivePanelOnly?: boolean;\n\n    /**\n     * Whether to show the header with the \"back\" button in each panel.\n     *\n     * @default true\n     */\n    showPanelHeader?: boolean;\n\n    /**\n     * The full stack of panels in controlled mode. The last panel in the stack\n     * will be displayed.\n     */\n    stack?: readonly T[];\n}\n\ninterface PanelStack2Component {\n    /**\n     * @template T type union of all possible panels in this stack\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    <T extends Panel<object>>(props: PanelStack2Props<T>): JSX.Element | null;\n    displayName: string;\n}\n\n/**\n * @template T type union of all possible panels in this stack\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const PanelStack2: PanelStack2Component = <T extends Panel<object>>(props: PanelStack2Props<T>) => {\n    const { renderActivePanelOnly = true, showPanelHeader = true, stack: propsStack } = props;\n    const [direction, setDirection] = React.useState(\"push\");\n\n    const [localStack, setLocalStack] = React.useState<T[]>(\n        props.initialPanel !== undefined ? [props.initialPanel] : [],\n    );\n    const stack = React.useMemo(\n        () => (propsStack != null ? propsStack.slice().reverse() : localStack),\n        [localStack, propsStack],\n    );\n    const stackLength = React.useRef<number>(stack.length);\n    React.useEffect(() => {\n        if (stack.length !== stackLength.current) {\n            // Adjust the direction in case the stack size has changed, controlled or uncontrolled\n            setDirection(stack.length - stackLength.current < 0 ? \"pop\" : \"push\");\n        }\n        stackLength.current = stack.length;\n    }, [stack]);\n\n    const handlePanelOpen = React.useCallback(\n        (panel: T) => {\n            props.onOpen?.(panel);\n            if (props.stack == null) {\n                setLocalStack(prevStack => [panel, ...prevStack]);\n            }\n        },\n        [props.onOpen],\n    );\n    const handlePanelClose = React.useCallback(\n        (panel: T) => {\n            // only remove this panel if it is at the top and not the only one.\n            if (stack[0] !== panel || stack.length <= 1) {\n                return;\n            }\n            props.onClose?.(panel);\n            if (props.stack == null) {\n                setLocalStack(prevStack => prevStack.slice(1));\n            }\n        },\n        [stack, props.onClose],\n    );\n\n    // early return, after all hooks are called\n    if (stack.length === 0) {\n        return null;\n    }\n\n    const panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n    const panels = panelsToRender\n        .map((panel: T, index: number) => {\n            // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n            // therefore they would not trigger the \"enter\" transition event as they were entered.\n            // To force the enter event, we want to change the key, but stack.length is not enough\n            // and a single panel should not rerender as long as it's hidden.\n            // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n            // second one, active changes only when the panel becomes or stops being active.\n            const layer = stack.length - index;\n            const key = renderActivePanelOnly ? stack.length : layer;\n\n            return (\n                <CSSTransition classNames={Classes.PANEL_STACK2} key={key} timeout={400}>\n                    <PanelView2<T>\n                        onClose={handlePanelClose}\n                        onOpen={handlePanelOpen}\n                        panel={panel}\n                        previousPanel={stack[index + 1]}\n                        showHeader={showPanelHeader}\n                    />\n                </CSSTransition>\n            );\n        })\n        .reverse();\n\n    const classes = classNames(Classes.PANEL_STACK2, `${Classes.PANEL_STACK2}-${direction}`, props.className);\n\n    return (\n        <TransitionGroup className={classes} component=\"div\">\n            {panels}\n        </TransitionGroup>\n    );\n};\nPanelStack2.displayName = `${DISPLAYNAME_PREFIX}.PanelStack2`;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}