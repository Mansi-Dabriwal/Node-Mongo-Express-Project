{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n/**\n * `Collapse` can be in one of six states, enumerated here.\n * When changing the `isOpen` prop, the following happens to the states:\n * isOpen={true}  : CLOSED -> OPEN_START -> OPENING -> OPEN\n * isOpen={false} : OPEN -> CLOSING_START -> CLOSING -> CLOSED\n */\nexport var AnimationStates;\n(function (AnimationStates) {\n  /**\n   * The body is re-rendered, height is set to the measured body height and\n   * the body Y is set to 0.\n   */\n  AnimationStates[AnimationStates[\"OPEN_START\"] = 0] = \"OPEN_START\";\n  /**\n   * Animation begins, height is set to auto. This is all animated, and on\n   * complete, the state changes to OPEN.\n   */\n  AnimationStates[AnimationStates[\"OPENING\"] = 1] = \"OPENING\";\n  /**\n   * The collapse height is set to auto, and the body Y is set to 0 (so the\n   * element can be seen as normal).\n   */\n  AnimationStates[AnimationStates[\"OPEN\"] = 2] = \"OPEN\";\n  /**\n   * Height has been changed from auto to the measured height of the body to\n   * prepare for the closing animation in CLOSING.\n   */\n  AnimationStates[AnimationStates[\"CLOSING_START\"] = 3] = \"CLOSING_START\";\n  /**\n   * Height is set to 0 and the body Y is at -height. Both of these properties\n   * are transformed, and then after the animation is complete, the state\n   * changes to CLOSED.\n   */\n  AnimationStates[AnimationStates[\"CLOSING\"] = 4] = \"CLOSING\";\n  /**\n   * The contents of the collapse is not rendered, the collapse height is 0,\n   * and the body Y is at -height (so that the bottom of the body is at Y=0).\n   */\n  AnimationStates[AnimationStates[\"CLOSED\"] = 5] = \"CLOSED\";\n})(AnimationStates || (AnimationStates = {}));\nvar Collapse = /** @class */function (_super) {\n  __extends(Collapse, _super);\n  function Collapse() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.state = {\n      animationState: _this.props.isOpen ? AnimationStates.OPEN : AnimationStates.CLOSED,\n      height: undefined,\n      heightWhenOpen: undefined\n    };\n    // The element containing the contents of the collapse.\n    _this.contents = null;\n    _this.contentsRefHandler = function (el) {\n      _this.contents = el;\n      if (_this.contents != null) {\n        var height = _this.contents.clientHeight;\n        _this.setState({\n          animationState: _this.props.isOpen ? AnimationStates.OPEN : AnimationStates.CLOSED,\n          height: height === 0 ? undefined : \"\".concat(height, \"px\"),\n          heightWhenOpen: height === 0 ? undefined : height\n        });\n      }\n    };\n    return _this;\n  }\n  Collapse.getDerivedStateFromProps = function (props, state) {\n    var isOpen = props.isOpen;\n    var animationState = state.animationState;\n    if (isOpen) {\n      switch (animationState) {\n        case AnimationStates.OPEN:\n          // no-op\n          break;\n        case AnimationStates.OPENING:\n          // allow Collapse#onDelayedStateChange() to handle the transition here\n          break;\n        default:\n          return {\n            animationState: AnimationStates.OPEN_START\n          };\n      }\n    } else {\n      switch (animationState) {\n        case AnimationStates.CLOSED:\n          // no-op\n          break;\n        case AnimationStates.CLOSING:\n          // allow Collapse#onDelayedStateChange() to handle the transition here\n          break;\n        default:\n          // need to set an explicit height so that transition can work\n          return {\n            animationState: AnimationStates.CLOSING_START,\n            height: \"\".concat(state.heightWhenOpen, \"px\")\n          };\n      }\n    }\n    return null;\n  };\n  Collapse.prototype.render = function () {\n    var isContentVisible = this.state.animationState !== AnimationStates.CLOSED;\n    var shouldRenderChildren = isContentVisible || this.props.keepChildrenMounted;\n    var displayWithTransform = isContentVisible && this.state.animationState !== AnimationStates.CLOSING;\n    var isAutoHeight = this.state.height === \"auto\";\n    var containerStyle = {\n      height: isContentVisible ? this.state.height : undefined,\n      overflowY: isAutoHeight ? \"visible\" : undefined,\n      // transitions don't work with height: auto\n      transition: isAutoHeight ? \"none\" : undefined\n    };\n    var contentsStyle = {\n      // only use heightWhenOpen while closing\n      transform: displayWithTransform ? \"translateY(0)\" : \"translateY(-\".concat(this.state.heightWhenOpen, \"px)\"),\n      // transitions don't work with height: auto\n      transition: isAutoHeight ? \"none\" : undefined\n    };\n    return React.createElement(this.props.component, {\n      className: classNames(Classes.COLLAPSE, this.props.className),\n      style: containerStyle\n    }, React.createElement(\"div\", {\n      className: Classes.COLLAPSE_BODY,\n      ref: this.contentsRefHandler,\n      style: contentsStyle,\n      \"aria-hidden\": !isContentVisible && this.props.keepChildrenMounted\n    }, shouldRenderChildren ? this.props.children : null));\n  };\n  Collapse.prototype.componentDidMount = function () {\n    this.forceUpdate();\n    // HACKHACK: this should probably be done in getSnapshotBeforeUpdate\n    /* eslint-disable react/no-did-mount-set-state */\n    if (this.props.isOpen) {\n      this.setState({\n        animationState: AnimationStates.OPEN,\n        height: \"auto\"\n      });\n    } else {\n      this.setState({\n        animationState: AnimationStates.CLOSED,\n        height: \"0px\"\n      });\n    }\n    /* eslint-disable react/no-did-mount-set-state */\n  };\n\n  Collapse.prototype.componentDidUpdate = function () {\n    var _this = this;\n    if (this.contents == null) {\n      return;\n    }\n    var transitionDuration = this.props.transitionDuration;\n    var animationState = this.state.animationState;\n    if (animationState === AnimationStates.OPEN_START) {\n      var clientHeight = this.contents.clientHeight;\n      this.setState({\n        animationState: AnimationStates.OPENING,\n        height: \"\".concat(clientHeight, \"px\"),\n        heightWhenOpen: clientHeight\n      });\n      this.setTimeout(function () {\n        return _this.onDelayedStateChange();\n      }, transitionDuration);\n    } else if (animationState === AnimationStates.CLOSING_START) {\n      var clientHeight_1 = this.contents.clientHeight;\n      this.setTimeout(function () {\n        return _this.setState({\n          animationState: AnimationStates.CLOSING,\n          height: \"0px\",\n          heightWhenOpen: clientHeight_1\n        });\n      });\n      this.setTimeout(function () {\n        return _this.onDelayedStateChange();\n      }, transitionDuration);\n    }\n  };\n  Collapse.prototype.onDelayedStateChange = function () {\n    switch (this.state.animationState) {\n      case AnimationStates.OPENING:\n        this.setState({\n          animationState: AnimationStates.OPEN,\n          height: \"auto\"\n        });\n        break;\n      case AnimationStates.CLOSING:\n        this.setState({\n          animationState: AnimationStates.CLOSED\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  Collapse.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Collapse\");\n  Collapse.defaultProps = {\n    component: \"div\",\n    isOpen: false,\n    keepChildrenMounted: false,\n    transitionDuration: 200\n  };\n  return Collapse;\n}(AbstractPureComponent2);\nexport { Collapse };","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Classes","DISPLAYNAME_PREFIX","AnimationStates","__extends","_this","animationState","props","isOpen","OPEN","CLOSED","height","undefined","heightWhenOpen","el","contents","clientHeight","setState","Collapse","state","OPENING","OPEN_START","CLOSING","CLOSING_START","isContentVisible","shouldRenderChildren","keepChildrenMounted","displayWithTransform","isAutoHeight","containerStyle","overflowY","transition","contentsStyle","transform","createElement","component","className","COLLAPSE","style","COLLAPSE_BODY","ref","contentsRefHandler","children","forceUpdate","setTimeout","onDelayedStateChange","transitionDuration","clientHeight_1"],"sources":["/Users/mansidabriwal/Documents/Web design class/React-Assignment/react-app/node_modules/@blueprintjs/core/src/components/collapse/collapse.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, Props } from \"../../common/props\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type CollapseProps = ICollapseProps;\n/** @deprecated use CollapseProps */\nexport interface ICollapseProps extends Props {\n    /** Contents to collapse. */\n    children?: React.ReactNode;\n\n    /**\n     * Component to render as the root element.\n     * Useful when rendering a `Collapse` inside a `<table>`, for instance.\n     *\n     * @default \"div\"\n     */\n    component?: React.ElementType;\n\n    /**\n     * Whether the component is open or closed.\n     *\n     * @default false\n     */\n    isOpen?: boolean;\n\n    /**\n     * Whether the child components will remain mounted when the `Collapse` is closed.\n     * Setting to true may improve performance by avoiding re-mounting children.\n     *\n     * @default false\n     */\n    keepChildrenMounted?: boolean;\n\n    /**\n     * The length of time the transition takes, in milliseconds. This must match\n     * the duration of the animation in CSS. Only set this prop if you override\n     * Blueprint's default transitions with new transitions of a different\n     * length.\n     *\n     * @default 200\n     */\n    transitionDuration?: number;\n}\n\nexport interface ICollapseState {\n    /** The state the element is currently in. */\n    animationState: AnimationStates;\n\n    /** The height that should be used for the content animations. This is a CSS value, not just a number. */\n    height: string | undefined;\n\n    /**\n     * The most recent non-zero height (once a height has been measured upon first open; it is undefined until then)\n     */\n    heightWhenOpen: number | undefined;\n}\n\n/**\n * `Collapse` can be in one of six states, enumerated here.\n * When changing the `isOpen` prop, the following happens to the states:\n * isOpen={true}  : CLOSED -> OPEN_START -> OPENING -> OPEN\n * isOpen={false} : OPEN -> CLOSING_START -> CLOSING -> CLOSED\n */\nexport enum AnimationStates {\n    /**\n     * The body is re-rendered, height is set to the measured body height and\n     * the body Y is set to 0.\n     */\n    OPEN_START,\n\n    /**\n     * Animation begins, height is set to auto. This is all animated, and on\n     * complete, the state changes to OPEN.\n     */\n    OPENING,\n\n    /**\n     * The collapse height is set to auto, and the body Y is set to 0 (so the\n     * element can be seen as normal).\n     */\n    OPEN,\n\n    /**\n     * Height has been changed from auto to the measured height of the body to\n     * prepare for the closing animation in CLOSING.\n     */\n    CLOSING_START,\n\n    /**\n     * Height is set to 0 and the body Y is at -height. Both of these properties\n     * are transformed, and then after the animation is complete, the state\n     * changes to CLOSED.\n     */\n    CLOSING,\n\n    /**\n     * The contents of the collapse is not rendered, the collapse height is 0,\n     * and the body Y is at -height (so that the bottom of the body is at Y=0).\n     */\n    CLOSED,\n}\n\nexport class Collapse extends AbstractPureComponent2<CollapseProps, ICollapseState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Collapse`;\n\n    public static defaultProps: Partial<CollapseProps> = {\n        component: \"div\",\n        isOpen: false,\n        keepChildrenMounted: false,\n        transitionDuration: 200,\n    };\n\n    public static getDerivedStateFromProps(props: CollapseProps, state: ICollapseState) {\n        const { isOpen } = props;\n        const { animationState } = state;\n\n        if (isOpen) {\n            switch (animationState) {\n                case AnimationStates.OPEN:\n                    // no-op\n                    break;\n                case AnimationStates.OPENING:\n                    // allow Collapse#onDelayedStateChange() to handle the transition here\n                    break;\n                default:\n                    return { animationState: AnimationStates.OPEN_START };\n            }\n        } else {\n            switch (animationState) {\n                case AnimationStates.CLOSED:\n                    // no-op\n                    break;\n                case AnimationStates.CLOSING:\n                    // allow Collapse#onDelayedStateChange() to handle the transition here\n                    break;\n                default:\n                    // need to set an explicit height so that transition can work\n                    return {\n                        animationState: AnimationStates.CLOSING_START,\n                        height: `${state.heightWhenOpen}px`,\n                    };\n            }\n        }\n\n        return null;\n    }\n\n    public state: ICollapseState = {\n        animationState: this.props.isOpen ? AnimationStates.OPEN : AnimationStates.CLOSED,\n        height: undefined,\n        heightWhenOpen: undefined,\n    };\n\n    // The element containing the contents of the collapse.\n    private contents: HTMLElement | null = null;\n\n    public render() {\n        const isContentVisible = this.state.animationState !== AnimationStates.CLOSED;\n        const shouldRenderChildren = isContentVisible || this.props.keepChildrenMounted;\n        const displayWithTransform = isContentVisible && this.state.animationState !== AnimationStates.CLOSING;\n        const isAutoHeight = this.state.height === \"auto\";\n\n        const containerStyle = {\n            height: isContentVisible ? this.state.height : undefined,\n            overflowY: isAutoHeight ? \"visible\" : undefined,\n            // transitions don't work with height: auto\n            transition: isAutoHeight ? \"none\" : undefined,\n        };\n\n        const contentsStyle = {\n            // only use heightWhenOpen while closing\n            transform: displayWithTransform ? \"translateY(0)\" : `translateY(-${this.state.heightWhenOpen}px)`,\n            // transitions don't work with height: auto\n            transition: isAutoHeight ? \"none\" : undefined,\n        };\n\n        return React.createElement(\n            this.props.component!,\n            {\n                className: classNames(Classes.COLLAPSE, this.props.className),\n                style: containerStyle,\n            },\n            <div\n                className={Classes.COLLAPSE_BODY}\n                ref={this.contentsRefHandler}\n                style={contentsStyle}\n                aria-hidden={!isContentVisible && this.props.keepChildrenMounted}\n            >\n                {shouldRenderChildren ? this.props.children : null}\n            </div>,\n        );\n    }\n\n    public componentDidMount() {\n        this.forceUpdate();\n        // HACKHACK: this should probably be done in getSnapshotBeforeUpdate\n        /* eslint-disable react/no-did-mount-set-state */\n        if (this.props.isOpen) {\n            this.setState({ animationState: AnimationStates.OPEN, height: \"auto\" });\n        } else {\n            this.setState({ animationState: AnimationStates.CLOSED, height: \"0px\" });\n        }\n        /* eslint-disable react/no-did-mount-set-state */\n    }\n\n    public componentDidUpdate() {\n        if (this.contents == null) {\n            return;\n        }\n\n        const { transitionDuration } = this.props;\n        const { animationState } = this.state;\n\n        if (animationState === AnimationStates.OPEN_START) {\n            const { clientHeight } = this.contents;\n            this.setState({\n                animationState: AnimationStates.OPENING,\n                height: `${clientHeight}px`,\n                heightWhenOpen: clientHeight,\n            });\n            this.setTimeout(() => this.onDelayedStateChange(), transitionDuration);\n        } else if (animationState === AnimationStates.CLOSING_START) {\n            const { clientHeight } = this.contents;\n            this.setTimeout(() =>\n                this.setState({\n                    animationState: AnimationStates.CLOSING,\n                    height: \"0px\",\n                    heightWhenOpen: clientHeight,\n                }),\n            );\n            this.setTimeout(() => this.onDelayedStateChange(), transitionDuration);\n        }\n    }\n\n    private contentsRefHandler = (el: HTMLElement | null) => {\n        this.contents = el;\n        if (this.contents != null) {\n            const height = this.contents.clientHeight;\n            this.setState({\n                animationState: this.props.isOpen ? AnimationStates.OPEN : AnimationStates.CLOSED,\n                height: height === 0 ? undefined : `${height}px`,\n                heightWhenOpen: height === 0 ? undefined : height,\n            });\n        }\n    };\n\n    private onDelayedStateChange() {\n        switch (this.state.animationState) {\n            case AnimationStates.OPENING:\n                this.setState({ animationState: AnimationStates.OPEN, height: \"auto\" });\n                break;\n            case AnimationStates.CLOSING:\n                this.setState({ animationState: AnimationStates.CLOSED });\n                break;\n            default:\n                break;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}